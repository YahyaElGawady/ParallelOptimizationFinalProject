[
    {
        "label": "ply.lex",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ply.lex",
        "description": "ply.lex",
        "detail": "ply.lex",
        "documentation": {}
    },
    {
        "label": "cupy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cupy",
        "description": "cupy",
        "detail": "cupy",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "yacc",
        "importPath": "ply",
        "description": "ply",
        "isExtraImport": true,
        "detail": "ply",
        "documentation": {}
    },
    {
        "label": "main",
        "importPath": "parsing_lex",
        "description": "parsing_lex",
        "isExtraImport": true,
        "detail": "parsing_lex",
        "documentation": {}
    },
    {
        "label": "MyLexer",
        "importPath": "parsing_lex",
        "description": "parsing_lex",
        "isExtraImport": true,
        "detail": "parsing_lex",
        "documentation": {}
    },
    {
        "label": "MyLexer",
        "kind": 6,
        "importPath": "parsing_lex",
        "description": "parsing_lex",
        "peekOfCode": "class MyLexer(object):\n    # This is the class that will build the Lexer \n    # Let's have our Lexer handle reserved keywords \n    reserved = {\n        'if': 'IF',\n        'else': 'ELSE',\n        'elif': 'ELIF',\n        'while': 'WHILE',\n        'for': 'FOR',\n        'in': 'IN',",
        "detail": "parsing_lex",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "parsing_lex",
        "description": "parsing_lex",
        "peekOfCode": "def main(input):\n    # Call your parsing function(s) here\n    # Let input be a string that contains the code to be parsed \n    m = MyLexer() \n    m.build() \n    m.test(input)\nif __name__ == \"__main__\":\n    main()",
        "detail": "parsing_lex",
        "documentation": {}
    },
    {
        "label": "add_with_gpu",
        "kind": 2,
        "importPath": "pythonTopython",
        "description": "pythonTopython",
        "peekOfCode": "def add_with_gpu(self, x_np, y_np):\n    \"\"\"\n    perform element-wise addition of two arrays using GPU acceleration\n    parameters:\n    x_np (numpy.ndarray): The first input array\n    y_np (numpy.ndarray): The second input array\n    returns:\n    numpy.ndarray: The result of adding x_np and y_np element-wise, returned as a NumPy array\n    sample usage: \n        x_np = np.array([5, 7, 9])",
        "detail": "pythonTopython",
        "documentation": {}
    },
    {
        "label": "subtract_with_gpu",
        "kind": 2,
        "importPath": "pythonTopython",
        "description": "pythonTopython",
        "peekOfCode": "def subtract_with_gpu(self, x_np, y_np):\n    \"\"\"\n    perform element-wise subtraction of two arrays using GPU acceleration\n    parameters:\n    x_np (numpy.ndarray): The minuend array\n    y_np (numpy.ndarray): The subtrahend array\n    returns:\n    numpy.ndarray: The result of subtracting y_np from x_np element-wise, returned as a NumPy array\n    sample usage: \n        x_np = np.array([5, 7, 9])",
        "detail": "pythonTopython",
        "documentation": {}
    },
    {
        "label": "sum_with_gpu",
        "kind": 2,
        "importPath": "pythonTopython",
        "description": "pythonTopython",
        "peekOfCode": "def sum_with_gpu(a_np, axis=None, dtype=None, keepdims=False):\n    \"\"\"\n    compute the sum of array elements over a given axis using GPU acceleration\n    parameters:\n        - a_np (numpy.ndarray): The input array.\n        - axis (int or tuple of ints, optional): Axis or axes along which a sum is performed. Default is None, summing all elements\n        - dtype (data-type, optional): The type of the returned array and of the accumulator in which the elements are summed\n        - keepdims (bool, optional): If this is set to True, the axes which are reduced are left in the result as dimensions with size one\n    returns:\n        - numpy.ndarray: An array with the same shape as `a_np`, except the axis along which the sum is computed is removed, unless `keepdims` is True",
        "detail": "pythonTopython",
        "documentation": {}
    },
    {
        "label": "dot_with_gpu",
        "kind": 2,
        "importPath": "pythonTopython",
        "description": "pythonTopython",
        "peekOfCode": "def dot_with_gpu(a_np, b_np):\n    \"\"\"\n    compute the dot product of two arrays using GPU acceleration.\n    parameters:\n        - a_np (numpy.ndarray): First operand, can be a 1-D or 2-D array.\n        - b_np (numpy.ndarray): Second operand, must be a 1-D or 2-D array.\n    returns:\n        - numpy.ndarray: Dot product of a_np and b_np. If both a_np and b_np are 1-D arrays, it returns the inner product. If both are 2-D, it returns the matrix product.\n    sample usage:\n        a_np = np.array([1, 2])",
        "detail": "pythonTopython",
        "documentation": {}
    },
    {
        "label": "function_caller",
        "kind": 2,
        "importPath": "pythonTopython",
        "description": "pythonTopython",
        "peekOfCode": "def function_caller(func_name, params):\n    \"\"\"\n    dynamically call a function based on the provided name and parameters (from the parser's output)\n    parameters:\n        - func_name (str): The name of the function to be called\n        - params (list): A list of parameters to be passed to the function\n    returns:\n        - the result of the function call\n    sample usage:\n        result = function_caller('add', [np.array([1, 2, 3]), np.array([4, 5, 6])])",
        "detail": "pythonTopython",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "pythonTopython",
        "description": "pythonTopython",
        "peekOfCode": "def main():\n    # Your main code logic goes here\n    pass\nif __name__ == \"__main__\":\n    main()",
        "detail": "pythonTopython",
        "documentation": {}
    },
    {
        "label": "set_up",
        "kind": 2,
        "importPath": "pythonToC",
        "description": "pythonToC",
        "peekOfCode": "def set_up(args, file_name):\n    file = open(file_name + \".c\", \"a\")\n    file.write(\"//%%cuda_group_save -n run.cu -g default\\n\")\n    file.write(\"#include <stdio.h>\\n\")\n    file.write('#include \"util.h\"\\n\\n')\n    file.write(\"__host__\\n main() {\\n\")\n#    file.write(\"}\\n\\n__host__\\n\")\n#    file.write(\"const int THREADS_PER_BLOCK = 256, BLOCKS = 3;\\n\\n\")\n# convert args to c\n# convert args from device to host",
        "detail": "pythonToC",
        "documentation": {}
    },
    {
        "label": "get_var_name",
        "kind": 2,
        "importPath": "pythonToC",
        "description": "pythonToC",
        "peekOfCode": "def get_var_name(var):\n    matrix_dim = 0\n    for name, value in globals().items():\n        if value is var:\n            return name\n        if value is result:\n            matrix_dim = np.prod(result.shape)\ndef numpy_add_to_c(a, b, result):\n    a_name = get_var_name(a)\n    b_name = get_var_name(b)",
        "detail": "pythonToC",
        "documentation": {}
    },
    {
        "label": "numpy_add_to_c",
        "kind": 2,
        "importPath": "pythonToC",
        "description": "pythonToC",
        "peekOfCode": "def numpy_add_to_c(a, b, result):\n    a_name = get_var_name(a)\n    b_name = get_var_name(b)\n    result_name = get_var_name(result)\n    return f\"addArraysHelper({a_name}, {b_name}, {result_name})\"\ndef numpy_sub_to_c(a, b, result):\n    a_name = get_var_name(a)\n    b_name = get_var_name(b)\n    result_name = get_var_name(result)\n    return f\"subtractArraysHelper({a_name}, {b_name}, {result_name})\"",
        "detail": "pythonToC",
        "documentation": {}
    },
    {
        "label": "numpy_sub_to_c",
        "kind": 2,
        "importPath": "pythonToC",
        "description": "pythonToC",
        "peekOfCode": "def numpy_sub_to_c(a, b, result):\n    a_name = get_var_name(a)\n    b_name = get_var_name(b)\n    result_name = get_var_name(result)\n    return f\"subtractArraysHelper({a_name}, {b_name}, {result_name})\"\ndef numpy_sum_to_c(a, result):\n    a_name = get_var_name(a)\n    result_name = get_var_name(result)\n    return f\"sumArraysHelper({a_name}, {result_name})\"\ndef numpy_dot_product_to_c(a, b, result):",
        "detail": "pythonToC",
        "documentation": {}
    },
    {
        "label": "numpy_sum_to_c",
        "kind": 2,
        "importPath": "pythonToC",
        "description": "pythonToC",
        "peekOfCode": "def numpy_sum_to_c(a, result):\n    a_name = get_var_name(a)\n    result_name = get_var_name(result)\n    return f\"sumArraysHelper({a_name}, {result_name})\"\ndef numpy_dot_product_to_c(a, b, result):\n    a_name = get_var_name(a)\n    b_name = get_var_name(b)\n    result_name = get_var_name(result)\n    return f\"dotArraysHelper({a_name}, {b_name}, {result_name})\"\ndef set_up_host(args, filen_name, matrix_dim):",
        "detail": "pythonToC",
        "documentation": {}
    },
    {
        "label": "numpy_dot_product_to_c",
        "kind": 2,
        "importPath": "pythonToC",
        "description": "pythonToC",
        "peekOfCode": "def numpy_dot_product_to_c(a, b, result):\n    a_name = get_var_name(a)\n    b_name = get_var_name(b)\n    result_name = get_var_name(result)\n    return f\"dotArraysHelper({a_name}, {b_name}, {result_name})\"\ndef set_up_host(args, filen_name, matrix_dim):\n    file = open(file_name + \".c\", \"a\")\n    file.write(\"    float *h_input, *h_output;\\n\")\n    file.write(f\"    h_input = (float*)malloc({matrix_dim} * {matrix_dim} * sizeof(float));\\n\")\n    file.write(f\"    h_output = (float*)malloc({matrix_dim} * {matrix_dim} * sizeof(float));\\n\")",
        "detail": "pythonToC",
        "documentation": {}
    },
    {
        "label": "set_up_host",
        "kind": 2,
        "importPath": "pythonToC",
        "description": "pythonToC",
        "peekOfCode": "def set_up_host(args, filen_name, matrix_dim):\n    file = open(file_name + \".c\", \"a\")\n    file.write(\"    float *h_input, *h_output;\\n\")\n    file.write(f\"    h_input = (float*)malloc({matrix_dim} * {matrix_dim} * sizeof(float));\\n\")\n    file.write(f\"    h_output = (float*)malloc({matrix_dim} * {matrix_dim} * sizeof(float));\\n\")\n    file.write(\"    float *d_input, *d_output;\\n\")\n    file.write(f\"    cudaMalloc(&d_input, {matrix_dim} * {matrix_dim} * sizeof(float));\\n\")\n    file.write(f\"    cudaMalloc(&d_output, {matrix_dim} * {matrix_dim} * sizeof(float));\\n\\n\")\n    file.write(f\"    cudaMemcpy(d_input, h_input, {matrix_dim} * {matrix_dim} * sizeof(float), cudaMemcpyHostToDevice);\\n\\n\")\n    file.write(f\"    THREADS_PER_BLOCK = matrix_dim;\\n\")",
        "detail": "pythonToC",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "pythonToC",
        "description": "pythonToC",
        "peekOfCode": "def main():\n    pass\nif __name__ == \"__main__\":\n    main()\n#helper functions\n# __device__ void addArraysHelper(float *array1, float *array2, float *result) {\n#     int N = blockDim.x * gridDim.x;\n#     for (int i = threadIdx.x + blockIdx.x * blockDim.x; i < N; i += blockDim.x * gridDim.x) {\n#         result[i] = array1[i] + array2[i];\n#     }",
        "detail": "pythonToC",
        "documentation": {}
    },
    {
        "label": "MyParser",
        "kind": 6,
        "importPath": "parsing_yacc",
        "description": "parsing_yacc",
        "peekOfCode": "class MyParser(object): \n    # Define the tokens that the parser will recognize \n    tokens = MyLexer.tokens\n    # Handle print statements \n    def p_print_statement(self, p):\n        '''statement : PRINT LPAREN STRING RPAREN \n                     | PRINT LPAREN NUMBER RPAREN\n                     | PRINT LPAREN statement RPAREN'''\n        # Based on the mode, we either want to call the C or Python print function \n        if self.mode == 'C':",
        "detail": "parsing_yacc",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "parsing_yacc",
        "description": "parsing_yacc",
        "peekOfCode": "def main(input, mode):\n    # Create a parser object\n    parser = MyParser(mode)\n    # Parse the input\n    return parser.parse(input)\nif __name__ == '__main__':\n    main()",
        "detail": "parsing_yacc",
        "documentation": {}
    },
    {
        "label": "_tabversion",
        "kind": 5,
        "importPath": "parsetab",
        "description": "parsetab",
        "peekOfCode": "_tabversion = '3.10'\n_lr_method = 'LALR'\n_lr_signature = 'ARRAY COLON COMMENT DEF DIVIDE DOUBLE_EQUALS ELIF ELSE EQUALS FALSE FOR IF IN LIST LPAREN MINUS NONE NUMBER PLUS PRINT RANGE RETURN RPAREN STRING TIMES TRUE WHILEstatement : PRINT LPAREN STRING RPAREN \\n                     | PRINT LPAREN NUMBER RPAREN\\n                     | PRINT LPAREN statement RPARENstatement : NUMBER PLUS NUMBER \\n                     | statement PLUS NUMBER\\n                     | NUMBER PLUS statement\\n                     | statement PLUS statementstatement : NUMBER MINUS NUMBER \\n                     | statement MINUS NUMBER\\n                     | NUMBER MINUS statement\\n                     | statement MINUS statementstatement : NUMBER TIMES NUMBER \\n                     | statement TIMES NUMBER\\n                     | NUMBER TIMES statement\\n                     | statement TIMES statementstatement : NUMBER DIVIDE NUMBER\\n                     | statement DIVIDE NUMBER\\n                     | NUMBER DIVIDE statement\\n                     | statement DIVIDE statementstatement : LPAREN statement RPARENstatement : statement DOUBLE_EQUALS statement\\n                     | NUMBER DOUBLE_EQUALS NUMBER\\n                     | STRING DOUBLE_EQUALS STRING\\n                     | statement DOUBLE_EQUALS NUMBER\\n                     | NUMBER DOUBLE_EQUALS statement\\n                     | statement DOUBLE_EQUALS STRING\\n                     | STRING DOUBLE_EQUALS statement\\n                     | STRING DOUBLE_EQUALS NUMBER\\n                     | NUMBER DOUBLE_EQUALS STRINGstatement : IF statement COLON statementstatement : ARRAY LPAREN LIST RPAREN'\n_lr_action_items = {'PRINT':([0,3,6,8,9,10,11,12,13,15,16,17,18,19,20,52,],[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,]),'NUMBER':([0,3,6,8,9,10,11,12,13,15,16,17,18,19,20,52,],[5,5,5,24,26,28,30,32,35,40,41,43,45,47,49,5,]),'LPAREN':([0,2,3,6,7,8,9,10,11,12,13,15,16,17,18,19,20,52,],[3,13,3,3,22,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'STRING':([0,3,6,8,9,10,11,12,13,15,16,17,18,19,20,52,],[4,4,4,4,4,4,4,33,34,38,4,4,4,4,51,4,]),'IF':([0,3,6,8,9,10,11,12,13,15,16,17,18,19,20,52,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'ARRAY':([0,3,6,8,9,10,11,12,13,15,16,17,18,19,20,52,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'$end':([1,23,24,25,26,27,28,29,30,31,32,33,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,54,55,56,57,58,],[0,-7,-5,-11,-9,-15,-13,-19,-17,-21,-24,-26,-20,-23,-27,-28,-4,-6,-8,-10,-12,-14,-16,-18,-22,-25,-29,-1,-2,-3,-30,-31,]),'PLUS':([1,5,14,21,23,24,25,26,27,28,29,30,31,32,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,54,55,56,57,58,],[8,16,8,8,8,16,8,16,8,16,8,16,8,16,-26,16,8,-20,-23,8,16,16,8,16,8,16,8,16,8,16,8,-29,-1,-2,-3,8,-31,]),'MINUS':([1,5,14,21,23,24,25,26,27,28,29,30,31,32,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,54,55,56,57,58,],[9,17,9,9,9,17,9,17,9,17,9,17,9,17,-26,17,9,-20,-23,9,17,17,9,17,9,17,9,17,9,17,9,-29,-1,-2,-3,9,-31,]),'TIMES':([1,5,14,21,23,24,25,26,27,28,29,30,31,32,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,54,55,56,57,58,],[10,18,10,10,10,18,10,18,10,18,10,18,10,18,-26,18,10,-20,-23,10,18,18,10,18,10,18,10,18,10,18,10,-29,-1,-2,-3,10,-31,]),'DIVIDE':([1,5,14,21,23,24,25,26,27,28,29,30,31,32,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,54,55,56,57,58,],[11,19,11,11,11,19,11,19,11,19,11,19,11,19,-26,19,11,-20,-23,11,19,19,11,19,11,19,11,19,11,19,11,-29,-1,-2,-3,11,-31,]),'DOUBLE_EQUALS':([1,4,5,14,21,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,54,55,56,57,58,],[12,15,20,12,12,12,20,12,20,12,20,12,20,12,20,15,15,20,12,-20,15,12,20,20,12,20,12,20,12,20,12,20,12,15,-1,-2,-3,12,-31,]),'RPAREN':([14,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,53,54,55,56,57,58,],[37,-7,-5,-11,-9,-15,-13,-19,-17,-21,-24,-26,54,55,56,-20,-23,-27,-28,-4,-6,-8,-10,-12,-14,-16,-18,-22,-25,-29,58,-1,-2,-3,-30,-31,]),'COLON':([21,23,24,25,26,27,28,29,30,31,32,33,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,54,55,56,57,58,],[52,-7,-5,-11,-9,-15,-13,-19,-17,-21,-24,-26,-20,-23,-27,-28,-4,-6,-8,-10,-12,-14,-16,-18,-22,-25,-29,-1,-2,-3,-30,-31,]),'LIST':([22,],[53,]),}\n_lr_action = {}\nfor _k, _v in _lr_action_items.items():\n   for _x,_y in zip(_v[0],_v[1]):\n      if not _x in _lr_action:  _lr_action[_x] = {}\n      _lr_action[_x][_k] = _y\ndel _lr_action_items",
        "detail": "parsetab",
        "documentation": {}
    },
    {
        "label": "_lr_method",
        "kind": 5,
        "importPath": "parsetab",
        "description": "parsetab",
        "peekOfCode": "_lr_method = 'LALR'\n_lr_signature = 'ARRAY COLON COMMENT DEF DIVIDE DOUBLE_EQUALS ELIF ELSE EQUALS FALSE FOR IF IN LIST LPAREN MINUS NONE NUMBER PLUS PRINT RANGE RETURN RPAREN STRING TIMES TRUE WHILEstatement : PRINT LPAREN STRING RPAREN \\n                     | PRINT LPAREN NUMBER RPAREN\\n                     | PRINT LPAREN statement RPARENstatement : NUMBER PLUS NUMBER \\n                     | statement PLUS NUMBER\\n                     | NUMBER PLUS statement\\n                     | statement PLUS statementstatement : NUMBER MINUS NUMBER \\n                     | statement MINUS NUMBER\\n                     | NUMBER MINUS statement\\n                     | statement MINUS statementstatement : NUMBER TIMES NUMBER \\n                     | statement TIMES NUMBER\\n                     | NUMBER TIMES statement\\n                     | statement TIMES statementstatement : NUMBER DIVIDE NUMBER\\n                     | statement DIVIDE NUMBER\\n                     | NUMBER DIVIDE statement\\n                     | statement DIVIDE statementstatement : LPAREN statement RPARENstatement : statement DOUBLE_EQUALS statement\\n                     | NUMBER DOUBLE_EQUALS NUMBER\\n                     | STRING DOUBLE_EQUALS STRING\\n                     | statement DOUBLE_EQUALS NUMBER\\n                     | NUMBER DOUBLE_EQUALS statement\\n                     | statement DOUBLE_EQUALS STRING\\n                     | STRING DOUBLE_EQUALS statement\\n                     | STRING DOUBLE_EQUALS NUMBER\\n                     | NUMBER DOUBLE_EQUALS STRINGstatement : IF statement COLON statementstatement : ARRAY LPAREN LIST RPAREN'\n_lr_action_items = {'PRINT':([0,3,6,8,9,10,11,12,13,15,16,17,18,19,20,52,],[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,]),'NUMBER':([0,3,6,8,9,10,11,12,13,15,16,17,18,19,20,52,],[5,5,5,24,26,28,30,32,35,40,41,43,45,47,49,5,]),'LPAREN':([0,2,3,6,7,8,9,10,11,12,13,15,16,17,18,19,20,52,],[3,13,3,3,22,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'STRING':([0,3,6,8,9,10,11,12,13,15,16,17,18,19,20,52,],[4,4,4,4,4,4,4,33,34,38,4,4,4,4,51,4,]),'IF':([0,3,6,8,9,10,11,12,13,15,16,17,18,19,20,52,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'ARRAY':([0,3,6,8,9,10,11,12,13,15,16,17,18,19,20,52,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'$end':([1,23,24,25,26,27,28,29,30,31,32,33,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,54,55,56,57,58,],[0,-7,-5,-11,-9,-15,-13,-19,-17,-21,-24,-26,-20,-23,-27,-28,-4,-6,-8,-10,-12,-14,-16,-18,-22,-25,-29,-1,-2,-3,-30,-31,]),'PLUS':([1,5,14,21,23,24,25,26,27,28,29,30,31,32,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,54,55,56,57,58,],[8,16,8,8,8,16,8,16,8,16,8,16,8,16,-26,16,8,-20,-23,8,16,16,8,16,8,16,8,16,8,16,8,-29,-1,-2,-3,8,-31,]),'MINUS':([1,5,14,21,23,24,25,26,27,28,29,30,31,32,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,54,55,56,57,58,],[9,17,9,9,9,17,9,17,9,17,9,17,9,17,-26,17,9,-20,-23,9,17,17,9,17,9,17,9,17,9,17,9,-29,-1,-2,-3,9,-31,]),'TIMES':([1,5,14,21,23,24,25,26,27,28,29,30,31,32,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,54,55,56,57,58,],[10,18,10,10,10,18,10,18,10,18,10,18,10,18,-26,18,10,-20,-23,10,18,18,10,18,10,18,10,18,10,18,10,-29,-1,-2,-3,10,-31,]),'DIVIDE':([1,5,14,21,23,24,25,26,27,28,29,30,31,32,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,54,55,56,57,58,],[11,19,11,11,11,19,11,19,11,19,11,19,11,19,-26,19,11,-20,-23,11,19,19,11,19,11,19,11,19,11,19,11,-29,-1,-2,-3,11,-31,]),'DOUBLE_EQUALS':([1,4,5,14,21,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,54,55,56,57,58,],[12,15,20,12,12,12,20,12,20,12,20,12,20,12,20,15,15,20,12,-20,15,12,20,20,12,20,12,20,12,20,12,20,12,15,-1,-2,-3,12,-31,]),'RPAREN':([14,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,53,54,55,56,57,58,],[37,-7,-5,-11,-9,-15,-13,-19,-17,-21,-24,-26,54,55,56,-20,-23,-27,-28,-4,-6,-8,-10,-12,-14,-16,-18,-22,-25,-29,58,-1,-2,-3,-30,-31,]),'COLON':([21,23,24,25,26,27,28,29,30,31,32,33,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,54,55,56,57,58,],[52,-7,-5,-11,-9,-15,-13,-19,-17,-21,-24,-26,-20,-23,-27,-28,-4,-6,-8,-10,-12,-14,-16,-18,-22,-25,-29,-1,-2,-3,-30,-31,]),'LIST':([22,],[53,]),}\n_lr_action = {}\nfor _k, _v in _lr_action_items.items():\n   for _x,_y in zip(_v[0],_v[1]):\n      if not _x in _lr_action:  _lr_action[_x] = {}\n      _lr_action[_x][_k] = _y\ndel _lr_action_items\n_lr_goto_items = {'statement':([0,3,6,8,9,10,11,12,13,15,16,17,18,19,20,52,],[1,14,21,23,25,27,29,31,36,39,42,44,46,48,50,57,]),}",
        "detail": "parsetab",
        "documentation": {}
    },
    {
        "label": "_lr_signature",
        "kind": 5,
        "importPath": "parsetab",
        "description": "parsetab",
        "peekOfCode": "_lr_signature = 'ARRAY COLON COMMENT DEF DIVIDE DOUBLE_EQUALS ELIF ELSE EQUALS FALSE FOR IF IN LIST LPAREN MINUS NONE NUMBER PLUS PRINT RANGE RETURN RPAREN STRING TIMES TRUE WHILEstatement : PRINT LPAREN STRING RPAREN \\n                     | PRINT LPAREN NUMBER RPAREN\\n                     | PRINT LPAREN statement RPARENstatement : NUMBER PLUS NUMBER \\n                     | statement PLUS NUMBER\\n                     | NUMBER PLUS statement\\n                     | statement PLUS statementstatement : NUMBER MINUS NUMBER \\n                     | statement MINUS NUMBER\\n                     | NUMBER MINUS statement\\n                     | statement MINUS statementstatement : NUMBER TIMES NUMBER \\n                     | statement TIMES NUMBER\\n                     | NUMBER TIMES statement\\n                     | statement TIMES statementstatement : NUMBER DIVIDE NUMBER\\n                     | statement DIVIDE NUMBER\\n                     | NUMBER DIVIDE statement\\n                     | statement DIVIDE statementstatement : LPAREN statement RPARENstatement : statement DOUBLE_EQUALS statement\\n                     | NUMBER DOUBLE_EQUALS NUMBER\\n                     | STRING DOUBLE_EQUALS STRING\\n                     | statement DOUBLE_EQUALS NUMBER\\n                     | NUMBER DOUBLE_EQUALS statement\\n                     | statement DOUBLE_EQUALS STRING\\n                     | STRING DOUBLE_EQUALS statement\\n                     | STRING DOUBLE_EQUALS NUMBER\\n                     | NUMBER DOUBLE_EQUALS STRINGstatement : IF statement COLON statementstatement : ARRAY LPAREN LIST RPAREN'\n_lr_action_items = {'PRINT':([0,3,6,8,9,10,11,12,13,15,16,17,18,19,20,52,],[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,]),'NUMBER':([0,3,6,8,9,10,11,12,13,15,16,17,18,19,20,52,],[5,5,5,24,26,28,30,32,35,40,41,43,45,47,49,5,]),'LPAREN':([0,2,3,6,7,8,9,10,11,12,13,15,16,17,18,19,20,52,],[3,13,3,3,22,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'STRING':([0,3,6,8,9,10,11,12,13,15,16,17,18,19,20,52,],[4,4,4,4,4,4,4,33,34,38,4,4,4,4,51,4,]),'IF':([0,3,6,8,9,10,11,12,13,15,16,17,18,19,20,52,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'ARRAY':([0,3,6,8,9,10,11,12,13,15,16,17,18,19,20,52,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'$end':([1,23,24,25,26,27,28,29,30,31,32,33,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,54,55,56,57,58,],[0,-7,-5,-11,-9,-15,-13,-19,-17,-21,-24,-26,-20,-23,-27,-28,-4,-6,-8,-10,-12,-14,-16,-18,-22,-25,-29,-1,-2,-3,-30,-31,]),'PLUS':([1,5,14,21,23,24,25,26,27,28,29,30,31,32,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,54,55,56,57,58,],[8,16,8,8,8,16,8,16,8,16,8,16,8,16,-26,16,8,-20,-23,8,16,16,8,16,8,16,8,16,8,16,8,-29,-1,-2,-3,8,-31,]),'MINUS':([1,5,14,21,23,24,25,26,27,28,29,30,31,32,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,54,55,56,57,58,],[9,17,9,9,9,17,9,17,9,17,9,17,9,17,-26,17,9,-20,-23,9,17,17,9,17,9,17,9,17,9,17,9,-29,-1,-2,-3,9,-31,]),'TIMES':([1,5,14,21,23,24,25,26,27,28,29,30,31,32,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,54,55,56,57,58,],[10,18,10,10,10,18,10,18,10,18,10,18,10,18,-26,18,10,-20,-23,10,18,18,10,18,10,18,10,18,10,18,10,-29,-1,-2,-3,10,-31,]),'DIVIDE':([1,5,14,21,23,24,25,26,27,28,29,30,31,32,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,54,55,56,57,58,],[11,19,11,11,11,19,11,19,11,19,11,19,11,19,-26,19,11,-20,-23,11,19,19,11,19,11,19,11,19,11,19,11,-29,-1,-2,-3,11,-31,]),'DOUBLE_EQUALS':([1,4,5,14,21,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,54,55,56,57,58,],[12,15,20,12,12,12,20,12,20,12,20,12,20,12,20,15,15,20,12,-20,15,12,20,20,12,20,12,20,12,20,12,20,12,15,-1,-2,-3,12,-31,]),'RPAREN':([14,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,53,54,55,56,57,58,],[37,-7,-5,-11,-9,-15,-13,-19,-17,-21,-24,-26,54,55,56,-20,-23,-27,-28,-4,-6,-8,-10,-12,-14,-16,-18,-22,-25,-29,58,-1,-2,-3,-30,-31,]),'COLON':([21,23,24,25,26,27,28,29,30,31,32,33,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,54,55,56,57,58,],[52,-7,-5,-11,-9,-15,-13,-19,-17,-21,-24,-26,-20,-23,-27,-28,-4,-6,-8,-10,-12,-14,-16,-18,-22,-25,-29,-1,-2,-3,-30,-31,]),'LIST':([22,],[53,]),}\n_lr_action = {}\nfor _k, _v in _lr_action_items.items():\n   for _x,_y in zip(_v[0],_v[1]):\n      if not _x in _lr_action:  _lr_action[_x] = {}\n      _lr_action[_x][_k] = _y\ndel _lr_action_items\n_lr_goto_items = {'statement':([0,3,6,8,9,10,11,12,13,15,16,17,18,19,20,52,],[1,14,21,23,25,27,29,31,36,39,42,44,46,48,50,57,]),}\n_lr_goto = {}",
        "detail": "parsetab",
        "documentation": {}
    },
    {
        "label": "_lr_action_items",
        "kind": 5,
        "importPath": "parsetab",
        "description": "parsetab",
        "peekOfCode": "_lr_action_items = {'PRINT':([0,3,6,8,9,10,11,12,13,15,16,17,18,19,20,52,],[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,]),'NUMBER':([0,3,6,8,9,10,11,12,13,15,16,17,18,19,20,52,],[5,5,5,24,26,28,30,32,35,40,41,43,45,47,49,5,]),'LPAREN':([0,2,3,6,7,8,9,10,11,12,13,15,16,17,18,19,20,52,],[3,13,3,3,22,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'STRING':([0,3,6,8,9,10,11,12,13,15,16,17,18,19,20,52,],[4,4,4,4,4,4,4,33,34,38,4,4,4,4,51,4,]),'IF':([0,3,6,8,9,10,11,12,13,15,16,17,18,19,20,52,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'ARRAY':([0,3,6,8,9,10,11,12,13,15,16,17,18,19,20,52,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'$end':([1,23,24,25,26,27,28,29,30,31,32,33,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,54,55,56,57,58,],[0,-7,-5,-11,-9,-15,-13,-19,-17,-21,-24,-26,-20,-23,-27,-28,-4,-6,-8,-10,-12,-14,-16,-18,-22,-25,-29,-1,-2,-3,-30,-31,]),'PLUS':([1,5,14,21,23,24,25,26,27,28,29,30,31,32,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,54,55,56,57,58,],[8,16,8,8,8,16,8,16,8,16,8,16,8,16,-26,16,8,-20,-23,8,16,16,8,16,8,16,8,16,8,16,8,-29,-1,-2,-3,8,-31,]),'MINUS':([1,5,14,21,23,24,25,26,27,28,29,30,31,32,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,54,55,56,57,58,],[9,17,9,9,9,17,9,17,9,17,9,17,9,17,-26,17,9,-20,-23,9,17,17,9,17,9,17,9,17,9,17,9,-29,-1,-2,-3,9,-31,]),'TIMES':([1,5,14,21,23,24,25,26,27,28,29,30,31,32,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,54,55,56,57,58,],[10,18,10,10,10,18,10,18,10,18,10,18,10,18,-26,18,10,-20,-23,10,18,18,10,18,10,18,10,18,10,18,10,-29,-1,-2,-3,10,-31,]),'DIVIDE':([1,5,14,21,23,24,25,26,27,28,29,30,31,32,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,54,55,56,57,58,],[11,19,11,11,11,19,11,19,11,19,11,19,11,19,-26,19,11,-20,-23,11,19,19,11,19,11,19,11,19,11,19,11,-29,-1,-2,-3,11,-31,]),'DOUBLE_EQUALS':([1,4,5,14,21,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,54,55,56,57,58,],[12,15,20,12,12,12,20,12,20,12,20,12,20,12,20,15,15,20,12,-20,15,12,20,20,12,20,12,20,12,20,12,20,12,15,-1,-2,-3,12,-31,]),'RPAREN':([14,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,53,54,55,56,57,58,],[37,-7,-5,-11,-9,-15,-13,-19,-17,-21,-24,-26,54,55,56,-20,-23,-27,-28,-4,-6,-8,-10,-12,-14,-16,-18,-22,-25,-29,58,-1,-2,-3,-30,-31,]),'COLON':([21,23,24,25,26,27,28,29,30,31,32,33,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,54,55,56,57,58,],[52,-7,-5,-11,-9,-15,-13,-19,-17,-21,-24,-26,-20,-23,-27,-28,-4,-6,-8,-10,-12,-14,-16,-18,-22,-25,-29,-1,-2,-3,-30,-31,]),'LIST':([22,],[53,]),}\n_lr_action = {}\nfor _k, _v in _lr_action_items.items():\n   for _x,_y in zip(_v[0],_v[1]):\n      if not _x in _lr_action:  _lr_action[_x] = {}\n      _lr_action[_x][_k] = _y\ndel _lr_action_items\n_lr_goto_items = {'statement':([0,3,6,8,9,10,11,12,13,15,16,17,18,19,20,52,],[1,14,21,23,25,27,29,31,36,39,42,44,46,48,50,57,]),}\n_lr_goto = {}\nfor _k, _v in _lr_goto_items.items():",
        "detail": "parsetab",
        "documentation": {}
    },
    {
        "label": "_lr_action",
        "kind": 5,
        "importPath": "parsetab",
        "description": "parsetab",
        "peekOfCode": "_lr_action = {}\nfor _k, _v in _lr_action_items.items():\n   for _x,_y in zip(_v[0],_v[1]):\n      if not _x in _lr_action:  _lr_action[_x] = {}\n      _lr_action[_x][_k] = _y\ndel _lr_action_items\n_lr_goto_items = {'statement':([0,3,6,8,9,10,11,12,13,15,16,17,18,19,20,52,],[1,14,21,23,25,27,29,31,36,39,42,44,46,48,50,57,]),}\n_lr_goto = {}\nfor _k, _v in _lr_goto_items.items():\n   for _x, _y in zip(_v[0], _v[1]):",
        "detail": "parsetab",
        "documentation": {}
    },
    {
        "label": "_lr_goto_items",
        "kind": 5,
        "importPath": "parsetab",
        "description": "parsetab",
        "peekOfCode": "_lr_goto_items = {'statement':([0,3,6,8,9,10,11,12,13,15,16,17,18,19,20,52,],[1,14,21,23,25,27,29,31,36,39,42,44,46,48,50,57,]),}\n_lr_goto = {}\nfor _k, _v in _lr_goto_items.items():\n   for _x, _y in zip(_v[0], _v[1]):\n       if not _x in _lr_goto: _lr_goto[_x] = {}\n       _lr_goto[_x][_k] = _y\ndel _lr_goto_items\n_lr_productions = [\n  (\"S' -> statement\",\"S'\",1,None,None,None),\n  ('statement -> PRINT LPAREN STRING RPAREN','statement',4,'p_print_statement','parsing_yacc.py',14),",
        "detail": "parsetab",
        "documentation": {}
    },
    {
        "label": "_lr_goto",
        "kind": 5,
        "importPath": "parsetab",
        "description": "parsetab",
        "peekOfCode": "_lr_goto = {}\nfor _k, _v in _lr_goto_items.items():\n   for _x, _y in zip(_v[0], _v[1]):\n       if not _x in _lr_goto: _lr_goto[_x] = {}\n       _lr_goto[_x][_k] = _y\ndel _lr_goto_items\n_lr_productions = [\n  (\"S' -> statement\",\"S'\",1,None,None,None),\n  ('statement -> PRINT LPAREN STRING RPAREN','statement',4,'p_print_statement','parsing_yacc.py',14),\n  ('statement -> PRINT LPAREN NUMBER RPAREN','statement',4,'p_print_statement','parsing_yacc.py',15),",
        "detail": "parsetab",
        "documentation": {}
    },
    {
        "label": "_lr_productions",
        "kind": 5,
        "importPath": "parsetab",
        "description": "parsetab",
        "peekOfCode": "_lr_productions = [\n  (\"S' -> statement\",\"S'\",1,None,None,None),\n  ('statement -> PRINT LPAREN STRING RPAREN','statement',4,'p_print_statement','parsing_yacc.py',14),\n  ('statement -> PRINT LPAREN NUMBER RPAREN','statement',4,'p_print_statement','parsing_yacc.py',15),\n  ('statement -> PRINT LPAREN statement RPAREN','statement',4,'p_print_statement','parsing_yacc.py',16),\n  ('statement -> NUMBER PLUS NUMBER','statement',3,'p_expression_plus','parsing_yacc.py',33),\n  ('statement -> statement PLUS NUMBER','statement',3,'p_expression_plus','parsing_yacc.py',34),\n  ('statement -> NUMBER PLUS statement','statement',3,'p_expression_plus','parsing_yacc.py',35),\n  ('statement -> statement PLUS statement','statement',3,'p_expression_plus','parsing_yacc.py',36),\n  ('statement -> NUMBER MINUS NUMBER','statement',3,'p_expression_minus','parsing_yacc.py',44),",
        "detail": "parsetab",
        "documentation": {}
    }
]