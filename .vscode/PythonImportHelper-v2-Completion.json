[
    {
        "label": "ply.lex",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ply.lex",
        "description": "ply.lex",
        "detail": "ply.lex",
        "documentation": {}
    },
    {
        "label": "inspect",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "inspect",
        "description": "inspect",
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "yacc",
        "importPath": "ply",
        "description": "ply",
        "isExtraImport": true,
        "detail": "ply",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "pythonToC",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pythonToC",
        "description": "pythonToC",
        "detail": "pythonToC",
        "documentation": {}
    },
    {
        "label": "main",
        "importPath": "parsing_lex",
        "description": "parsing_lex",
        "isExtraImport": true,
        "detail": "parsing_lex",
        "documentation": {}
    },
    {
        "label": "MyLexer",
        "importPath": "parsing_lex",
        "description": "parsing_lex",
        "isExtraImport": true,
        "detail": "parsing_lex",
        "documentation": {}
    },
    {
        "label": "MyLexer",
        "kind": 6,
        "importPath": "parsing_lex",
        "description": "parsing_lex",
        "peekOfCode": "class MyLexer(object):\n    # This is the class that will build the Lexer \n    # Let's have our Lexer handle reserved keywords \n    reserved = {\n        'print': 'PRINT',\n        'if': 'IF',\n        'else': 'ELSE',\n        'elif': 'ELIF',\n        'while': 'WHILE',\n        'for': 'FOR',",
        "detail": "parsing_lex",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "parsing_lex",
        "description": "parsing_lex",
        "peekOfCode": "def main(input):\n    # Call your parsing function(s) here\n    # Let input be a string that contains the code to be parsed \n    m = MyLexer() \n    m.build() \n    m.test(input)\nif __name__ == \"__main__\":\n    main()",
        "detail": "parsing_lex",
        "documentation": {}
    },
    {
        "label": "set_up",
        "kind": 2,
        "importPath": "pythonToC",
        "description": "pythonToC",
        "peekOfCode": "def set_up(file_name):\n    file = open(file_name + \".c\", \"a\")\n    file.write(\"//%%cuda_group_save -n run.cu -g default\\n\")\n    file.write(\"#include <stdio.h>\\n\")\n    file.write('#include \"util.h\"\\n\\n')\n    file.write(\"__host__\\n main() {\\n\")\n#    file.write(\"}\\n\\n__host__\\n\")\n#    file.write(\"const int THREADS_PER_BLOCK = 256, BLOCKS = 3;\\n\\n\")\n# convert args to c\n# convert args from device to host",
        "detail": "pythonToC",
        "documentation": {}
    },
    {
        "label": "get_var_name",
        "kind": 2,
        "importPath": "pythonToC",
        "description": "pythonToC",
        "peekOfCode": "def get_var_name(var):\n    callers_local_vars = inspect.currentframe().f_back.f_locals.items()\n    return ([var_name for var_name, var_val in callers_local_vars if var_val is var])[0]\ndef numpy_add_to_c(a, b, result):\n    a_name = get_var_name(a)\n    b_name = get_var_name(b)\n    result_name = get_var_name(result)\n    return f\"addArraysHelper({a_name}, {b_name}, {result_name});\"\ndef numpy_sub_to_c(a, b, result):\n    a_name = get_var_name(a)",
        "detail": "pythonToC",
        "documentation": {}
    },
    {
        "label": "numpy_add_to_c",
        "kind": 2,
        "importPath": "pythonToC",
        "description": "pythonToC",
        "peekOfCode": "def numpy_add_to_c(a, b, result):\n    a_name = get_var_name(a)\n    b_name = get_var_name(b)\n    result_name = get_var_name(result)\n    return f\"addArraysHelper({a_name}, {b_name}, {result_name});\"\ndef numpy_sub_to_c(a, b, result):\n    a_name = get_var_name(a)\n    b_name = get_var_name(b)\n    result_name = get_var_name(result)\n    return f\"subtractArraysHelper({a_name}, {b_name}, {result_name});\"",
        "detail": "pythonToC",
        "documentation": {}
    },
    {
        "label": "numpy_sub_to_c",
        "kind": 2,
        "importPath": "pythonToC",
        "description": "pythonToC",
        "peekOfCode": "def numpy_sub_to_c(a, b, result):\n    a_name = get_var_name(a)\n    b_name = get_var_name(b)\n    result_name = get_var_name(result)\n    return f\"subtractArraysHelper({a_name}, {b_name}, {result_name});\"\ndef numpy_sum_to_c(a, result):\n    a_name = get_var_name(a)\n    result_name = get_var_name(result)\n    return f\"sumArraysHelper({a_name}, {result_name});\"\ndef numpy_dot_product_to_c(a, b, result):",
        "detail": "pythonToC",
        "documentation": {}
    },
    {
        "label": "numpy_sum_to_c",
        "kind": 2,
        "importPath": "pythonToC",
        "description": "pythonToC",
        "peekOfCode": "def numpy_sum_to_c(a, result):\n    a_name = get_var_name(a)\n    result_name = get_var_name(result)\n    return f\"sumArraysHelper({a_name}, {result_name});\"\ndef numpy_dot_product_to_c(a, b, result):\n    a_name = get_var_name(a)\n    b_name = get_var_name(b)\n    result_name = get_var_name(result)\n    return f\"dotArraysHelper({a_name}, {b_name}, {result_name});\"\ndef set_up_host(args, file_name, matrix_dim):",
        "detail": "pythonToC",
        "documentation": {}
    },
    {
        "label": "numpy_dot_product_to_c",
        "kind": 2,
        "importPath": "pythonToC",
        "description": "pythonToC",
        "peekOfCode": "def numpy_dot_product_to_c(a, b, result):\n    a_name = get_var_name(a)\n    b_name = get_var_name(b)\n    result_name = get_var_name(result)\n    return f\"dotArraysHelper({a_name}, {b_name}, {result_name});\"\ndef set_up_host(args, file_name, matrix_dim):\n    file = open(file_name + \".c\", \"a\")\n    file.write(\"    float *h_input, *h_output;\\n\")\n    file.write(f\"    h_input = (float*)malloc({matrix_dim} * {matrix_dim} * sizeof(float));\\n\")\n    file.write(f\"    h_output = (float*)malloc({matrix_dim} * {matrix_dim} * sizeof(float));\\n\")",
        "detail": "pythonToC",
        "documentation": {}
    },
    {
        "label": "set_up_host",
        "kind": 2,
        "importPath": "pythonToC",
        "description": "pythonToC",
        "peekOfCode": "def set_up_host(args, file_name, matrix_dim):\n    file = open(file_name + \".c\", \"a\")\n    file.write(\"    float *h_input, *h_output;\\n\")\n    file.write(f\"    h_input = (float*)malloc({matrix_dim} * {matrix_dim} * sizeof(float));\\n\")\n    file.write(f\"    h_output = (float*)malloc({matrix_dim} * {matrix_dim} * sizeof(float));\\n\")\n    file.write(\"    float *d_input, *d_output;\\n\")\n    file.write(f\"    cudaMalloc(&d_input, {matrix_dim} * {matrix_dim} * sizeof(float));\\n\")\n    file.write(f\"    cudaMalloc(&d_output, {matrix_dim} * {matrix_dim} * sizeof(float));\\n\\n\")\n    file.write(f\"    cudaMemcpy(d_input, h_input, {matrix_dim} * {matrix_dim} * sizeof(float), cudaMemcpyHostToDevice);\\n\\n\")\n    file.write(f\"    THREADS_PER_BLOCK = matrix_dim;\\n\")",
        "detail": "pythonToC",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "pythonToC",
        "description": "pythonToC",
        "peekOfCode": "def main():\n    x = 5\n    print(get_var_name(x))\n    set_up(\"hi\")\n    pass\nif __name__ == \"__main__\":\n    main()\n#helper functions\n# __device__ void addArraysHelper(float *array1, float *array2, float *result) {\n#     int N = blockDim.x * gridDim.x;",
        "detail": "pythonToC",
        "documentation": {}
    },
    {
        "label": "MyParser",
        "kind": 6,
        "importPath": "parsing_yacc",
        "description": "parsing_yacc",
        "peekOfCode": "class MyParser(object): \n    # Define the tokens that the parser will recognize \n    tokens = MyLexer.tokens\n    #handling - production rule for setup funcs\n    def p_setup_function(self, p):\n        # I'm changing args here to be variable since there isn't a regex expression for args rn \n        '''statement : SET_UP LPAREN VARIABLE COMMA VARIABLE RPAREN'''\n        if self.mode == 'C':\n            output = pythonToC.set_up(p[3], p[5])\n        else:",
        "detail": "parsing_yacc",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "parsing_yacc",
        "description": "parsing_yacc",
        "peekOfCode": "def main(input, mode):\n    # Create a parser object\n    parser = MyParser(mode)\n    # Parse the input\n    return parser.parse(input)\nif __name__ == '__main__':\n    main()",
        "detail": "parsing_yacc",
        "documentation": {}
    },
    {
        "label": "_tabversion",
        "kind": 5,
        "importPath": "parsetab",
        "description": "parsetab",
        "peekOfCode": "_tabversion = '3.10'\n_lr_method = 'LALR'\n_lr_signature = 'AND ARRAY BREAK COLON COMMA COMMENT DECREMENT DEF DIVIDE DOUBLE_EQUALS ELIF ELSE EQUALS FALSE FOR IF IN INCREMENT LIST LPAREN MINUS NONE NOT NP_ABS NP_ADD NP_COS NP_DOT_PRODUCT NP_EXP NP_LOG NP_LOG10 NP_POWER NP_SIGN NP_SIN NP_SQRT NP_SUBTRACT NP_SUM NUMBER OR PLUS POWER PRINT RANGE RETURN RPAREN SET_UP SET_UP_HOST SPACE STRING TIMES TRUE VARIABLE WHILEstatement : SET_UP LPAREN VARIABLE COMMA VARIABLE RPARENstatement : SET_UP_HOST LPAREN VARIABLE COMMA NUMBER RPARENstatement : statement AND statementstatement : statement OR statementstatement : NOT statementstatement : statement POWER statementstatement : VARIABLE INCREMENTstatement : VARIABLE DECREMENTstatement : PRINT LPAREN STRING RPAREN \\n                     | PRINT LPAREN NUMBER RPAREN\\n                     | PRINT LPAREN statement RPARENstatement : NUMBER PLUS NUMBER \\n                     | statement PLUS NUMBER\\n                     | NUMBER PLUS statement\\n                     | statement PLUS statementstatement : NUMBER MINUS NUMBER \\n                     | statement MINUS NUMBER\\n                     | NUMBER MINUS statement\\n                     | statement MINUS statementstatement : NUMBER TIMES NUMBER \\n                     | statement TIMES NUMBER\\n                     | NUMBER TIMES statement\\n                     | statement TIMES statementstatement : NUMBER DIVIDE NUMBER\\n                     | statement DIVIDE NUMBER\\n                     | NUMBER DIVIDE statement\\n                     | statement DIVIDE statementstatement : LPAREN statement RPARENstatement : statement DOUBLE_EQUALS statement\\n                     | NUMBER DOUBLE_EQUALS NUMBER\\n                     | STRING DOUBLE_EQUALS STRING\\n                     | statement DOUBLE_EQUALS NUMBER\\n                     | NUMBER DOUBLE_EQUALS statement\\n                     | statement DOUBLE_EQUALS STRING\\n                     | STRING DOUBLE_EQUALS statement\\n                     | STRING DOUBLE_EQUALS NUMBER\\n                     | NUMBER DOUBLE_EQUALS STRINGstatement : IF statement COLON statementstatement : VARIABLE EQUALS ARRAY LPAREN LIST RPARENstatement : VARIABLE EQUALS NP_ADD LPAREN VARIABLE COMMA VARIABLE RPARENstatement : VARIABLE EQUALS NP_SUBTRACT LPAREN VARIABLE COMMA VARIABLE RPARENstatement : VARIABLE EQUALS NP_SUM LPAREN VARIABLE RPARENstatement : VARIABLE EQUALS NP_DOT_PRODUCT LPAREN VARIABLE COMMA VARIABLE RPARENstatement : '\n_lr_action_items = {'SET_UP':([0,3,7,10,11,12,13,14,15,16,17,18,25,26,27,28,29,31,32,73,],[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,]),'SET_UP_HOST':([0,3,7,10,11,12,13,14,15,16,17,18,25,26,27,28,29,31,32,73,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'NOT':([0,3,7,10,11,12,13,14,15,16,17,18,25,26,27,28,29,31,32,73,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'VARIABLE':([0,3,7,10,11,12,13,14,15,16,17,18,19,24,25,26,27,28,29,31,32,73,74,76,77,78,79,94,95,97,],[4,4,4,4,4,4,4,4,4,4,4,4,48,55,4,4,4,4,4,4,4,4,85,87,88,89,90,99,100,101,]),'PRINT':([0,3,7,10,11,12,13,14,15,16,17,18,25,26,27,28,29,31,32,73,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'NUMBER':([0,3,7,10,11,12,13,14,15,16,17,18,25,26,27,28,29,31,32,73,80,],[6,6,6,6,6,6,6,38,40,42,44,46,56,58,60,62,64,68,72,6,91,]),'LPAREN':([0,2,3,5,7,8,10,11,12,13,14,15,16,17,18,25,26,27,28,29,31,32,50,51,52,53,54,73,],[3,19,3,24,3,31,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,75,76,77,78,79,3,]),'STRING':([0,3,7,10,11,12,13,14,15,16,17,18,25,26,27,28,29,31,32,73,],[9,9,9,9,9,9,9,9,9,9,9,47,9,9,9,9,66,67,70,9,]),'IF':([0,3,7,10,11,12,13,14,15,16,17,18,25,26,27,28,29,31,32,73,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'AND':([0,1,3,7,10,11,12,13,14,15,16,17,18,20,21,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,56,57,58,59,60,61,62,63,64,65,66,69,70,71,72,73,81,82,83,84,92,93,96,98,102,103,104,],[-44,11,-44,-44,-44,-44,-44,-44,-44,-44,-44,-44,-44,11,-7,-8,-44,-44,-44,-44,-44,11,-44,-44,11,11,11,11,11,-13,11,-17,11,-21,11,-25,11,-32,-34,-28,-12,11,-16,11,-20,11,-24,11,-30,11,-37,11,-31,11,-36,-44,-9,-10,-11,11,-1,-39,-42,-2,-40,-41,-43,]),'OR':([0,1,3,7,10,11,12,13,14,15,16,17,18,20,21,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,56,57,58,59,60,61,62,63,64,65,66,69,70,71,72,73,81,82,83,84,92,93,96,98,102,103,104,],[-44,12,-44,-44,-44,-44,-44,-44,-44,-44,-44,-44,-44,12,-7,-8,-44,-44,-44,-44,-44,12,-44,-44,12,12,12,12,12,-13,12,-17,12,-21,12,-25,12,-32,-34,-28,-12,12,-16,12,-20,12,-24,12,-30,12,-37,12,-31,12,-36,-44,-9,-10,-11,12,-1,-39,-42,-2,-40,-41,-43,]),'POWER':([0,1,3,7,10,11,12,13,14,15,16,17,18,20,21,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,56,57,58,59,60,61,62,63,64,65,66,69,70,71,72,73,81,82,83,84,92,93,96,98,102,103,104,],[-44,13,-44,-44,-44,-44,-44,-44,-44,-44,-44,-44,-44,13,-7,-8,-44,-44,-44,-44,-44,13,-44,-44,13,13,13,13,13,-13,13,-17,13,-21,13,-25,13,-32,-34,-28,-12,13,-16,13,-20,13,-24,13,-30,13,-37,13,-31,13,-36,-44,-9,-10,-11,13,-1,-39,-42,-2,-40,-41,-43,]),'PLUS':([0,1,3,6,7,10,11,12,13,14,15,16,17,18,20,21,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,56,57,58,59,60,61,62,63,64,65,66,68,69,70,71,72,73,81,82,83,84,92,93,96,98,102,103,104,],[-44,14,-44,25,-44,-44,-44,-44,-44,-44,-44,-44,-44,-44,14,-7,-8,-44,-44,-44,-44,-44,14,-44,-44,14,14,14,14,14,25,14,25,14,25,14,25,14,25,-34,-28,25,14,25,14,25,14,25,14,25,14,-37,25,14,-31,14,25,-44,-9,-10,-11,14,-1,-39,-42,-2,-40,-41,-43,]),'MINUS':([0,1,3,6,7,10,11,12,13,14,15,16,17,18,20,21,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,56,57,58,59,60,61,62,63,64,65,66,68,69,70,71,72,73,81,82,83,84,92,93,96,98,102,103,104,],[-44,15,-44,26,-44,-44,-44,-44,-44,-44,-44,-44,-44,-44,15,-7,-8,-44,-44,-44,-44,-44,15,-44,-44,15,15,15,15,15,26,15,26,15,26,15,26,15,26,-34,-28,26,15,26,15,26,15,26,15,26,15,-37,26,15,-31,15,26,-44,-9,-10,-11,15,-1,-39,-42,-2,-40,-41,-43,]),'TIMES':([0,1,3,6,7,10,11,12,13,14,15,16,17,18,20,21,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,56,57,58,59,60,61,62,63,64,65,66,68,69,70,71,72,73,81,82,83,84,92,93,96,98,102,103,104,],[-44,16,-44,27,-44,-44,-44,-44,-44,-44,-44,-44,-44,-44,16,-7,-8,-44,-44,-44,-44,-44,16,-44,-44,16,16,16,16,16,27,16,27,16,27,16,27,16,27,-34,-28,27,16,27,16,27,16,27,16,27,16,-37,27,16,-31,16,27,-44,-9,-10,-11,16,-1,-39,-42,-2,-40,-41,-43,]),'DIVIDE':([0,1,3,6,7,10,11,12,13,14,15,16,17,18,20,21,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,56,57,58,59,60,61,62,63,64,65,66,68,69,70,71,72,73,81,82,83,84,92,93,96,98,102,103,104,],[-44,17,-44,28,-44,-44,-44,-44,-44,-44,-44,-44,-44,-44,17,-7,-8,-44,-44,-44,-44,-44,17,-44,-44,17,17,17,17,17,28,17,28,17,28,17,28,17,28,-34,-28,28,17,28,17,28,17,28,17,28,17,-37,28,17,-31,17,28,-44,-9,-10,-11,17,-1,-39,-42,-2,-40,-41,-43,]),'DOUBLE_EQUALS':([0,1,3,6,7,9,10,11,12,13,14,15,16,17,18,20,21,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,81,82,83,84,92,93,96,98,102,103,104,],[-44,18,-44,29,-44,32,-44,-44,-44,-44,-44,-44,-44,-44,-44,18,-7,-8,-44,-44,-44,-44,-44,18,-44,-44,18,18,18,18,18,29,18,29,18,29,18,29,18,29,32,-28,29,18,29,18,29,18,29,18,29,18,32,32,29,18,32,18,29,-44,-9,-10,-11,18,-1,-39,-42,-2,-40,-41,-43,]),'$end':([0,1,7,11,12,13,14,15,16,17,18,21,22,25,26,27,28,29,30,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,56,57,58,59,60,61,62,63,64,65,66,70,71,72,73,81,82,83,84,92,93,96,98,102,103,104,],[-44,0,-44,-44,-44,-44,-44,-44,-44,-44,-44,-7,-8,-44,-44,-44,-44,-44,-5,-44,-3,-4,-6,-15,-13,-19,-17,-23,-21,-27,-25,-29,-32,-34,-28,-12,-14,-16,-18,-20,-22,-24,-26,-30,-33,-37,-31,-35,-36,-44,-9,-10,-11,-38,-1,-39,-42,-2,-40,-41,-43,]),'RPAREN':([3,7,11,12,13,14,15,16,17,18,20,21,22,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,81,82,83,84,85,86,89,91,92,93,96,98,99,100,101,102,103,104,],[-44,-44,-44,-44,-44,-44,-44,-44,-44,-44,49,-7,-8,-44,-44,-44,-44,-44,-5,-44,-44,-3,-4,-6,-15,-13,-19,-17,-23,-21,-27,-25,-29,-32,-34,-28,-12,-14,-16,-18,-20,-22,-24,-26,-30,-33,-37,81,82,83,-31,-35,-36,-44,-9,-10,-11,-38,92,93,96,98,-1,-39,-42,-2,102,103,104,-40,-41,-43,]),'INCREMENT':([4,],[21,]),'DECREMENT':([4,],[22,]),'EQUALS':([4,],[23,]),'COLON':([7,10,11,12,13,14,15,16,17,18,21,22,25,26,27,28,29,30,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,56,57,58,59,60,61,62,63,64,65,66,70,71,72,73,81,82,83,84,92,93,96,98,102,103,104,],[-44,-44,-44,-44,-44,-44,-44,-44,-44,-44,-7,-8,-44,-44,-44,-44,-44,-5,-44,73,-3,-4,-6,-15,-13,-19,-17,-23,-21,-27,-25,-29,-32,-34,-28,-12,-14,-16,-18,-20,-22,-24,-26,-30,-33,-37,-31,-35,-36,-44,-9,-10,-11,-38,-1,-39,-42,-2,-40,-41,-43,]),'ARRAY':([23,],[50,]),'NP_ADD':([23,],[51,]),'NP_SUBTRACT':([23,],[52,]),'NP_SUM':([23,],[53,]),'NP_DOT_PRODUCT':([23,],[54,]),'COMMA':([48,55,87,88,90,],[74,80,94,95,97,]),'LIST':([75,],[86,]),}\n_lr_action = {}\nfor _k, _v in _lr_action_items.items():\n   for _x,_y in zip(_v[0],_v[1]):\n      if not _x in _lr_action:  _lr_action[_x] = {}\n      _lr_action[_x][_k] = _y\ndel _lr_action_items",
        "detail": "parsetab",
        "documentation": {}
    },
    {
        "label": "_lr_method",
        "kind": 5,
        "importPath": "parsetab",
        "description": "parsetab",
        "peekOfCode": "_lr_method = 'LALR'\n_lr_signature = 'AND ARRAY BREAK COLON COMMA COMMENT DECREMENT DEF DIVIDE DOUBLE_EQUALS ELIF ELSE EQUALS FALSE FOR IF IN INCREMENT LIST LPAREN MINUS NONE NOT NP_ABS NP_ADD NP_COS NP_DOT_PRODUCT NP_EXP NP_LOG NP_LOG10 NP_POWER NP_SIGN NP_SIN NP_SQRT NP_SUBTRACT NP_SUM NUMBER OR PLUS POWER PRINT RANGE RETURN RPAREN SET_UP SET_UP_HOST SPACE STRING TIMES TRUE VARIABLE WHILEstatement : SET_UP LPAREN VARIABLE COMMA VARIABLE RPARENstatement : SET_UP_HOST LPAREN VARIABLE COMMA NUMBER RPARENstatement : statement AND statementstatement : statement OR statementstatement : NOT statementstatement : statement POWER statementstatement : VARIABLE INCREMENTstatement : VARIABLE DECREMENTstatement : PRINT LPAREN STRING RPAREN \\n                     | PRINT LPAREN NUMBER RPAREN\\n                     | PRINT LPAREN statement RPARENstatement : NUMBER PLUS NUMBER \\n                     | statement PLUS NUMBER\\n                     | NUMBER PLUS statement\\n                     | statement PLUS statementstatement : NUMBER MINUS NUMBER \\n                     | statement MINUS NUMBER\\n                     | NUMBER MINUS statement\\n                     | statement MINUS statementstatement : NUMBER TIMES NUMBER \\n                     | statement TIMES NUMBER\\n                     | NUMBER TIMES statement\\n                     | statement TIMES statementstatement : NUMBER DIVIDE NUMBER\\n                     | statement DIVIDE NUMBER\\n                     | NUMBER DIVIDE statement\\n                     | statement DIVIDE statementstatement : LPAREN statement RPARENstatement : statement DOUBLE_EQUALS statement\\n                     | NUMBER DOUBLE_EQUALS NUMBER\\n                     | STRING DOUBLE_EQUALS STRING\\n                     | statement DOUBLE_EQUALS NUMBER\\n                     | NUMBER DOUBLE_EQUALS statement\\n                     | statement DOUBLE_EQUALS STRING\\n                     | STRING DOUBLE_EQUALS statement\\n                     | STRING DOUBLE_EQUALS NUMBER\\n                     | NUMBER DOUBLE_EQUALS STRINGstatement : IF statement COLON statementstatement : VARIABLE EQUALS ARRAY LPAREN LIST RPARENstatement : VARIABLE EQUALS NP_ADD LPAREN VARIABLE COMMA VARIABLE RPARENstatement : VARIABLE EQUALS NP_SUBTRACT LPAREN VARIABLE COMMA VARIABLE RPARENstatement : VARIABLE EQUALS NP_SUM LPAREN VARIABLE RPARENstatement : VARIABLE EQUALS NP_DOT_PRODUCT LPAREN VARIABLE COMMA VARIABLE RPARENstatement : '\n_lr_action_items = {'SET_UP':([0,3,7,10,11,12,13,14,15,16,17,18,25,26,27,28,29,31,32,73,],[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,]),'SET_UP_HOST':([0,3,7,10,11,12,13,14,15,16,17,18,25,26,27,28,29,31,32,73,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'NOT':([0,3,7,10,11,12,13,14,15,16,17,18,25,26,27,28,29,31,32,73,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'VARIABLE':([0,3,7,10,11,12,13,14,15,16,17,18,19,24,25,26,27,28,29,31,32,73,74,76,77,78,79,94,95,97,],[4,4,4,4,4,4,4,4,4,4,4,4,48,55,4,4,4,4,4,4,4,4,85,87,88,89,90,99,100,101,]),'PRINT':([0,3,7,10,11,12,13,14,15,16,17,18,25,26,27,28,29,31,32,73,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'NUMBER':([0,3,7,10,11,12,13,14,15,16,17,18,25,26,27,28,29,31,32,73,80,],[6,6,6,6,6,6,6,38,40,42,44,46,56,58,60,62,64,68,72,6,91,]),'LPAREN':([0,2,3,5,7,8,10,11,12,13,14,15,16,17,18,25,26,27,28,29,31,32,50,51,52,53,54,73,],[3,19,3,24,3,31,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,75,76,77,78,79,3,]),'STRING':([0,3,7,10,11,12,13,14,15,16,17,18,25,26,27,28,29,31,32,73,],[9,9,9,9,9,9,9,9,9,9,9,47,9,9,9,9,66,67,70,9,]),'IF':([0,3,7,10,11,12,13,14,15,16,17,18,25,26,27,28,29,31,32,73,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'AND':([0,1,3,7,10,11,12,13,14,15,16,17,18,20,21,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,56,57,58,59,60,61,62,63,64,65,66,69,70,71,72,73,81,82,83,84,92,93,96,98,102,103,104,],[-44,11,-44,-44,-44,-44,-44,-44,-44,-44,-44,-44,-44,11,-7,-8,-44,-44,-44,-44,-44,11,-44,-44,11,11,11,11,11,-13,11,-17,11,-21,11,-25,11,-32,-34,-28,-12,11,-16,11,-20,11,-24,11,-30,11,-37,11,-31,11,-36,-44,-9,-10,-11,11,-1,-39,-42,-2,-40,-41,-43,]),'OR':([0,1,3,7,10,11,12,13,14,15,16,17,18,20,21,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,56,57,58,59,60,61,62,63,64,65,66,69,70,71,72,73,81,82,83,84,92,93,96,98,102,103,104,],[-44,12,-44,-44,-44,-44,-44,-44,-44,-44,-44,-44,-44,12,-7,-8,-44,-44,-44,-44,-44,12,-44,-44,12,12,12,12,12,-13,12,-17,12,-21,12,-25,12,-32,-34,-28,-12,12,-16,12,-20,12,-24,12,-30,12,-37,12,-31,12,-36,-44,-9,-10,-11,12,-1,-39,-42,-2,-40,-41,-43,]),'POWER':([0,1,3,7,10,11,12,13,14,15,16,17,18,20,21,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,56,57,58,59,60,61,62,63,64,65,66,69,70,71,72,73,81,82,83,84,92,93,96,98,102,103,104,],[-44,13,-44,-44,-44,-44,-44,-44,-44,-44,-44,-44,-44,13,-7,-8,-44,-44,-44,-44,-44,13,-44,-44,13,13,13,13,13,-13,13,-17,13,-21,13,-25,13,-32,-34,-28,-12,13,-16,13,-20,13,-24,13,-30,13,-37,13,-31,13,-36,-44,-9,-10,-11,13,-1,-39,-42,-2,-40,-41,-43,]),'PLUS':([0,1,3,6,7,10,11,12,13,14,15,16,17,18,20,21,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,56,57,58,59,60,61,62,63,64,65,66,68,69,70,71,72,73,81,82,83,84,92,93,96,98,102,103,104,],[-44,14,-44,25,-44,-44,-44,-44,-44,-44,-44,-44,-44,-44,14,-7,-8,-44,-44,-44,-44,-44,14,-44,-44,14,14,14,14,14,25,14,25,14,25,14,25,14,25,-34,-28,25,14,25,14,25,14,25,14,25,14,-37,25,14,-31,14,25,-44,-9,-10,-11,14,-1,-39,-42,-2,-40,-41,-43,]),'MINUS':([0,1,3,6,7,10,11,12,13,14,15,16,17,18,20,21,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,56,57,58,59,60,61,62,63,64,65,66,68,69,70,71,72,73,81,82,83,84,92,93,96,98,102,103,104,],[-44,15,-44,26,-44,-44,-44,-44,-44,-44,-44,-44,-44,-44,15,-7,-8,-44,-44,-44,-44,-44,15,-44,-44,15,15,15,15,15,26,15,26,15,26,15,26,15,26,-34,-28,26,15,26,15,26,15,26,15,26,15,-37,26,15,-31,15,26,-44,-9,-10,-11,15,-1,-39,-42,-2,-40,-41,-43,]),'TIMES':([0,1,3,6,7,10,11,12,13,14,15,16,17,18,20,21,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,56,57,58,59,60,61,62,63,64,65,66,68,69,70,71,72,73,81,82,83,84,92,93,96,98,102,103,104,],[-44,16,-44,27,-44,-44,-44,-44,-44,-44,-44,-44,-44,-44,16,-7,-8,-44,-44,-44,-44,-44,16,-44,-44,16,16,16,16,16,27,16,27,16,27,16,27,16,27,-34,-28,27,16,27,16,27,16,27,16,27,16,-37,27,16,-31,16,27,-44,-9,-10,-11,16,-1,-39,-42,-2,-40,-41,-43,]),'DIVIDE':([0,1,3,6,7,10,11,12,13,14,15,16,17,18,20,21,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,56,57,58,59,60,61,62,63,64,65,66,68,69,70,71,72,73,81,82,83,84,92,93,96,98,102,103,104,],[-44,17,-44,28,-44,-44,-44,-44,-44,-44,-44,-44,-44,-44,17,-7,-8,-44,-44,-44,-44,-44,17,-44,-44,17,17,17,17,17,28,17,28,17,28,17,28,17,28,-34,-28,28,17,28,17,28,17,28,17,28,17,-37,28,17,-31,17,28,-44,-9,-10,-11,17,-1,-39,-42,-2,-40,-41,-43,]),'DOUBLE_EQUALS':([0,1,3,6,7,9,10,11,12,13,14,15,16,17,18,20,21,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,81,82,83,84,92,93,96,98,102,103,104,],[-44,18,-44,29,-44,32,-44,-44,-44,-44,-44,-44,-44,-44,-44,18,-7,-8,-44,-44,-44,-44,-44,18,-44,-44,18,18,18,18,18,29,18,29,18,29,18,29,18,29,32,-28,29,18,29,18,29,18,29,18,29,18,32,32,29,18,32,18,29,-44,-9,-10,-11,18,-1,-39,-42,-2,-40,-41,-43,]),'$end':([0,1,7,11,12,13,14,15,16,17,18,21,22,25,26,27,28,29,30,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,56,57,58,59,60,61,62,63,64,65,66,70,71,72,73,81,82,83,84,92,93,96,98,102,103,104,],[-44,0,-44,-44,-44,-44,-44,-44,-44,-44,-44,-7,-8,-44,-44,-44,-44,-44,-5,-44,-3,-4,-6,-15,-13,-19,-17,-23,-21,-27,-25,-29,-32,-34,-28,-12,-14,-16,-18,-20,-22,-24,-26,-30,-33,-37,-31,-35,-36,-44,-9,-10,-11,-38,-1,-39,-42,-2,-40,-41,-43,]),'RPAREN':([3,7,11,12,13,14,15,16,17,18,20,21,22,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,81,82,83,84,85,86,89,91,92,93,96,98,99,100,101,102,103,104,],[-44,-44,-44,-44,-44,-44,-44,-44,-44,-44,49,-7,-8,-44,-44,-44,-44,-44,-5,-44,-44,-3,-4,-6,-15,-13,-19,-17,-23,-21,-27,-25,-29,-32,-34,-28,-12,-14,-16,-18,-20,-22,-24,-26,-30,-33,-37,81,82,83,-31,-35,-36,-44,-9,-10,-11,-38,92,93,96,98,-1,-39,-42,-2,102,103,104,-40,-41,-43,]),'INCREMENT':([4,],[21,]),'DECREMENT':([4,],[22,]),'EQUALS':([4,],[23,]),'COLON':([7,10,11,12,13,14,15,16,17,18,21,22,25,26,27,28,29,30,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,56,57,58,59,60,61,62,63,64,65,66,70,71,72,73,81,82,83,84,92,93,96,98,102,103,104,],[-44,-44,-44,-44,-44,-44,-44,-44,-44,-44,-7,-8,-44,-44,-44,-44,-44,-5,-44,73,-3,-4,-6,-15,-13,-19,-17,-23,-21,-27,-25,-29,-32,-34,-28,-12,-14,-16,-18,-20,-22,-24,-26,-30,-33,-37,-31,-35,-36,-44,-9,-10,-11,-38,-1,-39,-42,-2,-40,-41,-43,]),'ARRAY':([23,],[50,]),'NP_ADD':([23,],[51,]),'NP_SUBTRACT':([23,],[52,]),'NP_SUM':([23,],[53,]),'NP_DOT_PRODUCT':([23,],[54,]),'COMMA':([48,55,87,88,90,],[74,80,94,95,97,]),'LIST':([75,],[86,]),}\n_lr_action = {}\nfor _k, _v in _lr_action_items.items():\n   for _x,_y in zip(_v[0],_v[1]):\n      if not _x in _lr_action:  _lr_action[_x] = {}\n      _lr_action[_x][_k] = _y\ndel _lr_action_items\n_lr_goto_items = {'statement':([0,3,7,10,11,12,13,14,15,16,17,18,25,26,27,28,29,31,32,73,],[1,20,30,33,34,35,36,37,39,41,43,45,57,59,61,63,65,69,71,84,]),}",
        "detail": "parsetab",
        "documentation": {}
    },
    {
        "label": "_lr_signature",
        "kind": 5,
        "importPath": "parsetab",
        "description": "parsetab",
        "peekOfCode": "_lr_signature = 'AND ARRAY BREAK COLON COMMA COMMENT DECREMENT DEF DIVIDE DOUBLE_EQUALS ELIF ELSE EQUALS FALSE FOR IF IN INCREMENT LIST LPAREN MINUS NONE NOT NP_ABS NP_ADD NP_COS NP_DOT_PRODUCT NP_EXP NP_LOG NP_LOG10 NP_POWER NP_SIGN NP_SIN NP_SQRT NP_SUBTRACT NP_SUM NUMBER OR PLUS POWER PRINT RANGE RETURN RPAREN SET_UP SET_UP_HOST SPACE STRING TIMES TRUE VARIABLE WHILEstatement : SET_UP LPAREN VARIABLE COMMA VARIABLE RPARENstatement : SET_UP_HOST LPAREN VARIABLE COMMA NUMBER RPARENstatement : statement AND statementstatement : statement OR statementstatement : NOT statementstatement : statement POWER statementstatement : VARIABLE INCREMENTstatement : VARIABLE DECREMENTstatement : PRINT LPAREN STRING RPAREN \\n                     | PRINT LPAREN NUMBER RPAREN\\n                     | PRINT LPAREN statement RPARENstatement : NUMBER PLUS NUMBER \\n                     | statement PLUS NUMBER\\n                     | NUMBER PLUS statement\\n                     | statement PLUS statementstatement : NUMBER MINUS NUMBER \\n                     | statement MINUS NUMBER\\n                     | NUMBER MINUS statement\\n                     | statement MINUS statementstatement : NUMBER TIMES NUMBER \\n                     | statement TIMES NUMBER\\n                     | NUMBER TIMES statement\\n                     | statement TIMES statementstatement : NUMBER DIVIDE NUMBER\\n                     | statement DIVIDE NUMBER\\n                     | NUMBER DIVIDE statement\\n                     | statement DIVIDE statementstatement : LPAREN statement RPARENstatement : statement DOUBLE_EQUALS statement\\n                     | NUMBER DOUBLE_EQUALS NUMBER\\n                     | STRING DOUBLE_EQUALS STRING\\n                     | statement DOUBLE_EQUALS NUMBER\\n                     | NUMBER DOUBLE_EQUALS statement\\n                     | statement DOUBLE_EQUALS STRING\\n                     | STRING DOUBLE_EQUALS statement\\n                     | STRING DOUBLE_EQUALS NUMBER\\n                     | NUMBER DOUBLE_EQUALS STRINGstatement : IF statement COLON statementstatement : VARIABLE EQUALS ARRAY LPAREN LIST RPARENstatement : VARIABLE EQUALS NP_ADD LPAREN VARIABLE COMMA VARIABLE RPARENstatement : VARIABLE EQUALS NP_SUBTRACT LPAREN VARIABLE COMMA VARIABLE RPARENstatement : VARIABLE EQUALS NP_SUM LPAREN VARIABLE RPARENstatement : VARIABLE EQUALS NP_DOT_PRODUCT LPAREN VARIABLE COMMA VARIABLE RPARENstatement : '\n_lr_action_items = {'SET_UP':([0,3,7,10,11,12,13,14,15,16,17,18,25,26,27,28,29,31,32,73,],[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,]),'SET_UP_HOST':([0,3,7,10,11,12,13,14,15,16,17,18,25,26,27,28,29,31,32,73,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'NOT':([0,3,7,10,11,12,13,14,15,16,17,18,25,26,27,28,29,31,32,73,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'VARIABLE':([0,3,7,10,11,12,13,14,15,16,17,18,19,24,25,26,27,28,29,31,32,73,74,76,77,78,79,94,95,97,],[4,4,4,4,4,4,4,4,4,4,4,4,48,55,4,4,4,4,4,4,4,4,85,87,88,89,90,99,100,101,]),'PRINT':([0,3,7,10,11,12,13,14,15,16,17,18,25,26,27,28,29,31,32,73,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'NUMBER':([0,3,7,10,11,12,13,14,15,16,17,18,25,26,27,28,29,31,32,73,80,],[6,6,6,6,6,6,6,38,40,42,44,46,56,58,60,62,64,68,72,6,91,]),'LPAREN':([0,2,3,5,7,8,10,11,12,13,14,15,16,17,18,25,26,27,28,29,31,32,50,51,52,53,54,73,],[3,19,3,24,3,31,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,75,76,77,78,79,3,]),'STRING':([0,3,7,10,11,12,13,14,15,16,17,18,25,26,27,28,29,31,32,73,],[9,9,9,9,9,9,9,9,9,9,9,47,9,9,9,9,66,67,70,9,]),'IF':([0,3,7,10,11,12,13,14,15,16,17,18,25,26,27,28,29,31,32,73,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'AND':([0,1,3,7,10,11,12,13,14,15,16,17,18,20,21,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,56,57,58,59,60,61,62,63,64,65,66,69,70,71,72,73,81,82,83,84,92,93,96,98,102,103,104,],[-44,11,-44,-44,-44,-44,-44,-44,-44,-44,-44,-44,-44,11,-7,-8,-44,-44,-44,-44,-44,11,-44,-44,11,11,11,11,11,-13,11,-17,11,-21,11,-25,11,-32,-34,-28,-12,11,-16,11,-20,11,-24,11,-30,11,-37,11,-31,11,-36,-44,-9,-10,-11,11,-1,-39,-42,-2,-40,-41,-43,]),'OR':([0,1,3,7,10,11,12,13,14,15,16,17,18,20,21,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,56,57,58,59,60,61,62,63,64,65,66,69,70,71,72,73,81,82,83,84,92,93,96,98,102,103,104,],[-44,12,-44,-44,-44,-44,-44,-44,-44,-44,-44,-44,-44,12,-7,-8,-44,-44,-44,-44,-44,12,-44,-44,12,12,12,12,12,-13,12,-17,12,-21,12,-25,12,-32,-34,-28,-12,12,-16,12,-20,12,-24,12,-30,12,-37,12,-31,12,-36,-44,-9,-10,-11,12,-1,-39,-42,-2,-40,-41,-43,]),'POWER':([0,1,3,7,10,11,12,13,14,15,16,17,18,20,21,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,56,57,58,59,60,61,62,63,64,65,66,69,70,71,72,73,81,82,83,84,92,93,96,98,102,103,104,],[-44,13,-44,-44,-44,-44,-44,-44,-44,-44,-44,-44,-44,13,-7,-8,-44,-44,-44,-44,-44,13,-44,-44,13,13,13,13,13,-13,13,-17,13,-21,13,-25,13,-32,-34,-28,-12,13,-16,13,-20,13,-24,13,-30,13,-37,13,-31,13,-36,-44,-9,-10,-11,13,-1,-39,-42,-2,-40,-41,-43,]),'PLUS':([0,1,3,6,7,10,11,12,13,14,15,16,17,18,20,21,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,56,57,58,59,60,61,62,63,64,65,66,68,69,70,71,72,73,81,82,83,84,92,93,96,98,102,103,104,],[-44,14,-44,25,-44,-44,-44,-44,-44,-44,-44,-44,-44,-44,14,-7,-8,-44,-44,-44,-44,-44,14,-44,-44,14,14,14,14,14,25,14,25,14,25,14,25,14,25,-34,-28,25,14,25,14,25,14,25,14,25,14,-37,25,14,-31,14,25,-44,-9,-10,-11,14,-1,-39,-42,-2,-40,-41,-43,]),'MINUS':([0,1,3,6,7,10,11,12,13,14,15,16,17,18,20,21,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,56,57,58,59,60,61,62,63,64,65,66,68,69,70,71,72,73,81,82,83,84,92,93,96,98,102,103,104,],[-44,15,-44,26,-44,-44,-44,-44,-44,-44,-44,-44,-44,-44,15,-7,-8,-44,-44,-44,-44,-44,15,-44,-44,15,15,15,15,15,26,15,26,15,26,15,26,15,26,-34,-28,26,15,26,15,26,15,26,15,26,15,-37,26,15,-31,15,26,-44,-9,-10,-11,15,-1,-39,-42,-2,-40,-41,-43,]),'TIMES':([0,1,3,6,7,10,11,12,13,14,15,16,17,18,20,21,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,56,57,58,59,60,61,62,63,64,65,66,68,69,70,71,72,73,81,82,83,84,92,93,96,98,102,103,104,],[-44,16,-44,27,-44,-44,-44,-44,-44,-44,-44,-44,-44,-44,16,-7,-8,-44,-44,-44,-44,-44,16,-44,-44,16,16,16,16,16,27,16,27,16,27,16,27,16,27,-34,-28,27,16,27,16,27,16,27,16,27,16,-37,27,16,-31,16,27,-44,-9,-10,-11,16,-1,-39,-42,-2,-40,-41,-43,]),'DIVIDE':([0,1,3,6,7,10,11,12,13,14,15,16,17,18,20,21,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,56,57,58,59,60,61,62,63,64,65,66,68,69,70,71,72,73,81,82,83,84,92,93,96,98,102,103,104,],[-44,17,-44,28,-44,-44,-44,-44,-44,-44,-44,-44,-44,-44,17,-7,-8,-44,-44,-44,-44,-44,17,-44,-44,17,17,17,17,17,28,17,28,17,28,17,28,17,28,-34,-28,28,17,28,17,28,17,28,17,28,17,-37,28,17,-31,17,28,-44,-9,-10,-11,17,-1,-39,-42,-2,-40,-41,-43,]),'DOUBLE_EQUALS':([0,1,3,6,7,9,10,11,12,13,14,15,16,17,18,20,21,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,81,82,83,84,92,93,96,98,102,103,104,],[-44,18,-44,29,-44,32,-44,-44,-44,-44,-44,-44,-44,-44,-44,18,-7,-8,-44,-44,-44,-44,-44,18,-44,-44,18,18,18,18,18,29,18,29,18,29,18,29,18,29,32,-28,29,18,29,18,29,18,29,18,29,18,32,32,29,18,32,18,29,-44,-9,-10,-11,18,-1,-39,-42,-2,-40,-41,-43,]),'$end':([0,1,7,11,12,13,14,15,16,17,18,21,22,25,26,27,28,29,30,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,56,57,58,59,60,61,62,63,64,65,66,70,71,72,73,81,82,83,84,92,93,96,98,102,103,104,],[-44,0,-44,-44,-44,-44,-44,-44,-44,-44,-44,-7,-8,-44,-44,-44,-44,-44,-5,-44,-3,-4,-6,-15,-13,-19,-17,-23,-21,-27,-25,-29,-32,-34,-28,-12,-14,-16,-18,-20,-22,-24,-26,-30,-33,-37,-31,-35,-36,-44,-9,-10,-11,-38,-1,-39,-42,-2,-40,-41,-43,]),'RPAREN':([3,7,11,12,13,14,15,16,17,18,20,21,22,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,81,82,83,84,85,86,89,91,92,93,96,98,99,100,101,102,103,104,],[-44,-44,-44,-44,-44,-44,-44,-44,-44,-44,49,-7,-8,-44,-44,-44,-44,-44,-5,-44,-44,-3,-4,-6,-15,-13,-19,-17,-23,-21,-27,-25,-29,-32,-34,-28,-12,-14,-16,-18,-20,-22,-24,-26,-30,-33,-37,81,82,83,-31,-35,-36,-44,-9,-10,-11,-38,92,93,96,98,-1,-39,-42,-2,102,103,104,-40,-41,-43,]),'INCREMENT':([4,],[21,]),'DECREMENT':([4,],[22,]),'EQUALS':([4,],[23,]),'COLON':([7,10,11,12,13,14,15,16,17,18,21,22,25,26,27,28,29,30,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,56,57,58,59,60,61,62,63,64,65,66,70,71,72,73,81,82,83,84,92,93,96,98,102,103,104,],[-44,-44,-44,-44,-44,-44,-44,-44,-44,-44,-7,-8,-44,-44,-44,-44,-44,-5,-44,73,-3,-4,-6,-15,-13,-19,-17,-23,-21,-27,-25,-29,-32,-34,-28,-12,-14,-16,-18,-20,-22,-24,-26,-30,-33,-37,-31,-35,-36,-44,-9,-10,-11,-38,-1,-39,-42,-2,-40,-41,-43,]),'ARRAY':([23,],[50,]),'NP_ADD':([23,],[51,]),'NP_SUBTRACT':([23,],[52,]),'NP_SUM':([23,],[53,]),'NP_DOT_PRODUCT':([23,],[54,]),'COMMA':([48,55,87,88,90,],[74,80,94,95,97,]),'LIST':([75,],[86,]),}\n_lr_action = {}\nfor _k, _v in _lr_action_items.items():\n   for _x,_y in zip(_v[0],_v[1]):\n      if not _x in _lr_action:  _lr_action[_x] = {}\n      _lr_action[_x][_k] = _y\ndel _lr_action_items\n_lr_goto_items = {'statement':([0,3,7,10,11,12,13,14,15,16,17,18,25,26,27,28,29,31,32,73,],[1,20,30,33,34,35,36,37,39,41,43,45,57,59,61,63,65,69,71,84,]),}\n_lr_goto = {}",
        "detail": "parsetab",
        "documentation": {}
    },
    {
        "label": "_lr_action_items",
        "kind": 5,
        "importPath": "parsetab",
        "description": "parsetab",
        "peekOfCode": "_lr_action_items = {'SET_UP':([0,3,7,10,11,12,13,14,15,16,17,18,25,26,27,28,29,31,32,73,],[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,]),'SET_UP_HOST':([0,3,7,10,11,12,13,14,15,16,17,18,25,26,27,28,29,31,32,73,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'NOT':([0,3,7,10,11,12,13,14,15,16,17,18,25,26,27,28,29,31,32,73,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'VARIABLE':([0,3,7,10,11,12,13,14,15,16,17,18,19,24,25,26,27,28,29,31,32,73,74,76,77,78,79,94,95,97,],[4,4,4,4,4,4,4,4,4,4,4,4,48,55,4,4,4,4,4,4,4,4,85,87,88,89,90,99,100,101,]),'PRINT':([0,3,7,10,11,12,13,14,15,16,17,18,25,26,27,28,29,31,32,73,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'NUMBER':([0,3,7,10,11,12,13,14,15,16,17,18,25,26,27,28,29,31,32,73,80,],[6,6,6,6,6,6,6,38,40,42,44,46,56,58,60,62,64,68,72,6,91,]),'LPAREN':([0,2,3,5,7,8,10,11,12,13,14,15,16,17,18,25,26,27,28,29,31,32,50,51,52,53,54,73,],[3,19,3,24,3,31,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,75,76,77,78,79,3,]),'STRING':([0,3,7,10,11,12,13,14,15,16,17,18,25,26,27,28,29,31,32,73,],[9,9,9,9,9,9,9,9,9,9,9,47,9,9,9,9,66,67,70,9,]),'IF':([0,3,7,10,11,12,13,14,15,16,17,18,25,26,27,28,29,31,32,73,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'AND':([0,1,3,7,10,11,12,13,14,15,16,17,18,20,21,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,56,57,58,59,60,61,62,63,64,65,66,69,70,71,72,73,81,82,83,84,92,93,96,98,102,103,104,],[-44,11,-44,-44,-44,-44,-44,-44,-44,-44,-44,-44,-44,11,-7,-8,-44,-44,-44,-44,-44,11,-44,-44,11,11,11,11,11,-13,11,-17,11,-21,11,-25,11,-32,-34,-28,-12,11,-16,11,-20,11,-24,11,-30,11,-37,11,-31,11,-36,-44,-9,-10,-11,11,-1,-39,-42,-2,-40,-41,-43,]),'OR':([0,1,3,7,10,11,12,13,14,15,16,17,18,20,21,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,56,57,58,59,60,61,62,63,64,65,66,69,70,71,72,73,81,82,83,84,92,93,96,98,102,103,104,],[-44,12,-44,-44,-44,-44,-44,-44,-44,-44,-44,-44,-44,12,-7,-8,-44,-44,-44,-44,-44,12,-44,-44,12,12,12,12,12,-13,12,-17,12,-21,12,-25,12,-32,-34,-28,-12,12,-16,12,-20,12,-24,12,-30,12,-37,12,-31,12,-36,-44,-9,-10,-11,12,-1,-39,-42,-2,-40,-41,-43,]),'POWER':([0,1,3,7,10,11,12,13,14,15,16,17,18,20,21,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,56,57,58,59,60,61,62,63,64,65,66,69,70,71,72,73,81,82,83,84,92,93,96,98,102,103,104,],[-44,13,-44,-44,-44,-44,-44,-44,-44,-44,-44,-44,-44,13,-7,-8,-44,-44,-44,-44,-44,13,-44,-44,13,13,13,13,13,-13,13,-17,13,-21,13,-25,13,-32,-34,-28,-12,13,-16,13,-20,13,-24,13,-30,13,-37,13,-31,13,-36,-44,-9,-10,-11,13,-1,-39,-42,-2,-40,-41,-43,]),'PLUS':([0,1,3,6,7,10,11,12,13,14,15,16,17,18,20,21,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,56,57,58,59,60,61,62,63,64,65,66,68,69,70,71,72,73,81,82,83,84,92,93,96,98,102,103,104,],[-44,14,-44,25,-44,-44,-44,-44,-44,-44,-44,-44,-44,-44,14,-7,-8,-44,-44,-44,-44,-44,14,-44,-44,14,14,14,14,14,25,14,25,14,25,14,25,14,25,-34,-28,25,14,25,14,25,14,25,14,25,14,-37,25,14,-31,14,25,-44,-9,-10,-11,14,-1,-39,-42,-2,-40,-41,-43,]),'MINUS':([0,1,3,6,7,10,11,12,13,14,15,16,17,18,20,21,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,56,57,58,59,60,61,62,63,64,65,66,68,69,70,71,72,73,81,82,83,84,92,93,96,98,102,103,104,],[-44,15,-44,26,-44,-44,-44,-44,-44,-44,-44,-44,-44,-44,15,-7,-8,-44,-44,-44,-44,-44,15,-44,-44,15,15,15,15,15,26,15,26,15,26,15,26,15,26,-34,-28,26,15,26,15,26,15,26,15,26,15,-37,26,15,-31,15,26,-44,-9,-10,-11,15,-1,-39,-42,-2,-40,-41,-43,]),'TIMES':([0,1,3,6,7,10,11,12,13,14,15,16,17,18,20,21,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,56,57,58,59,60,61,62,63,64,65,66,68,69,70,71,72,73,81,82,83,84,92,93,96,98,102,103,104,],[-44,16,-44,27,-44,-44,-44,-44,-44,-44,-44,-44,-44,-44,16,-7,-8,-44,-44,-44,-44,-44,16,-44,-44,16,16,16,16,16,27,16,27,16,27,16,27,16,27,-34,-28,27,16,27,16,27,16,27,16,27,16,-37,27,16,-31,16,27,-44,-9,-10,-11,16,-1,-39,-42,-2,-40,-41,-43,]),'DIVIDE':([0,1,3,6,7,10,11,12,13,14,15,16,17,18,20,21,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,56,57,58,59,60,61,62,63,64,65,66,68,69,70,71,72,73,81,82,83,84,92,93,96,98,102,103,104,],[-44,17,-44,28,-44,-44,-44,-44,-44,-44,-44,-44,-44,-44,17,-7,-8,-44,-44,-44,-44,-44,17,-44,-44,17,17,17,17,17,28,17,28,17,28,17,28,17,28,-34,-28,28,17,28,17,28,17,28,17,28,17,-37,28,17,-31,17,28,-44,-9,-10,-11,17,-1,-39,-42,-2,-40,-41,-43,]),'DOUBLE_EQUALS':([0,1,3,6,7,9,10,11,12,13,14,15,16,17,18,20,21,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,81,82,83,84,92,93,96,98,102,103,104,],[-44,18,-44,29,-44,32,-44,-44,-44,-44,-44,-44,-44,-44,-44,18,-7,-8,-44,-44,-44,-44,-44,18,-44,-44,18,18,18,18,18,29,18,29,18,29,18,29,18,29,32,-28,29,18,29,18,29,18,29,18,29,18,32,32,29,18,32,18,29,-44,-9,-10,-11,18,-1,-39,-42,-2,-40,-41,-43,]),'$end':([0,1,7,11,12,13,14,15,16,17,18,21,22,25,26,27,28,29,30,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,56,57,58,59,60,61,62,63,64,65,66,70,71,72,73,81,82,83,84,92,93,96,98,102,103,104,],[-44,0,-44,-44,-44,-44,-44,-44,-44,-44,-44,-7,-8,-44,-44,-44,-44,-44,-5,-44,-3,-4,-6,-15,-13,-19,-17,-23,-21,-27,-25,-29,-32,-34,-28,-12,-14,-16,-18,-20,-22,-24,-26,-30,-33,-37,-31,-35,-36,-44,-9,-10,-11,-38,-1,-39,-42,-2,-40,-41,-43,]),'RPAREN':([3,7,11,12,13,14,15,16,17,18,20,21,22,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,81,82,83,84,85,86,89,91,92,93,96,98,99,100,101,102,103,104,],[-44,-44,-44,-44,-44,-44,-44,-44,-44,-44,49,-7,-8,-44,-44,-44,-44,-44,-5,-44,-44,-3,-4,-6,-15,-13,-19,-17,-23,-21,-27,-25,-29,-32,-34,-28,-12,-14,-16,-18,-20,-22,-24,-26,-30,-33,-37,81,82,83,-31,-35,-36,-44,-9,-10,-11,-38,92,93,96,98,-1,-39,-42,-2,102,103,104,-40,-41,-43,]),'INCREMENT':([4,],[21,]),'DECREMENT':([4,],[22,]),'EQUALS':([4,],[23,]),'COLON':([7,10,11,12,13,14,15,16,17,18,21,22,25,26,27,28,29,30,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,56,57,58,59,60,61,62,63,64,65,66,70,71,72,73,81,82,83,84,92,93,96,98,102,103,104,],[-44,-44,-44,-44,-44,-44,-44,-44,-44,-44,-7,-8,-44,-44,-44,-44,-44,-5,-44,73,-3,-4,-6,-15,-13,-19,-17,-23,-21,-27,-25,-29,-32,-34,-28,-12,-14,-16,-18,-20,-22,-24,-26,-30,-33,-37,-31,-35,-36,-44,-9,-10,-11,-38,-1,-39,-42,-2,-40,-41,-43,]),'ARRAY':([23,],[50,]),'NP_ADD':([23,],[51,]),'NP_SUBTRACT':([23,],[52,]),'NP_SUM':([23,],[53,]),'NP_DOT_PRODUCT':([23,],[54,]),'COMMA':([48,55,87,88,90,],[74,80,94,95,97,]),'LIST':([75,],[86,]),}\n_lr_action = {}\nfor _k, _v in _lr_action_items.items():\n   for _x,_y in zip(_v[0],_v[1]):\n      if not _x in _lr_action:  _lr_action[_x] = {}\n      _lr_action[_x][_k] = _y\ndel _lr_action_items\n_lr_goto_items = {'statement':([0,3,7,10,11,12,13,14,15,16,17,18,25,26,27,28,29,31,32,73,],[1,20,30,33,34,35,36,37,39,41,43,45,57,59,61,63,65,69,71,84,]),}\n_lr_goto = {}\nfor _k, _v in _lr_goto_items.items():",
        "detail": "parsetab",
        "documentation": {}
    },
    {
        "label": "_lr_action",
        "kind": 5,
        "importPath": "parsetab",
        "description": "parsetab",
        "peekOfCode": "_lr_action = {}\nfor _k, _v in _lr_action_items.items():\n   for _x,_y in zip(_v[0],_v[1]):\n      if not _x in _lr_action:  _lr_action[_x] = {}\n      _lr_action[_x][_k] = _y\ndel _lr_action_items\n_lr_goto_items = {'statement':([0,3,7,10,11,12,13,14,15,16,17,18,25,26,27,28,29,31,32,73,],[1,20,30,33,34,35,36,37,39,41,43,45,57,59,61,63,65,69,71,84,]),}\n_lr_goto = {}\nfor _k, _v in _lr_goto_items.items():\n   for _x, _y in zip(_v[0], _v[1]):",
        "detail": "parsetab",
        "documentation": {}
    },
    {
        "label": "_lr_goto_items",
        "kind": 5,
        "importPath": "parsetab",
        "description": "parsetab",
        "peekOfCode": "_lr_goto_items = {'statement':([0,3,7,10,11,12,13,14,15,16,17,18,25,26,27,28,29,31,32,73,],[1,20,30,33,34,35,36,37,39,41,43,45,57,59,61,63,65,69,71,84,]),}\n_lr_goto = {}\nfor _k, _v in _lr_goto_items.items():\n   for _x, _y in zip(_v[0], _v[1]):\n       if not _x in _lr_goto: _lr_goto[_x] = {}\n       _lr_goto[_x][_k] = _y\ndel _lr_goto_items\n_lr_productions = [\n  (\"S' -> statement\",\"S'\",1,None,None,None),\n  ('statement -> SET_UP LPAREN VARIABLE COMMA VARIABLE RPAREN','statement',6,'p_setup_function','parsing_yacc.py',16),",
        "detail": "parsetab",
        "documentation": {}
    },
    {
        "label": "_lr_goto",
        "kind": 5,
        "importPath": "parsetab",
        "description": "parsetab",
        "peekOfCode": "_lr_goto = {}\nfor _k, _v in _lr_goto_items.items():\n   for _x, _y in zip(_v[0], _v[1]):\n       if not _x in _lr_goto: _lr_goto[_x] = {}\n       _lr_goto[_x][_k] = _y\ndel _lr_goto_items\n_lr_productions = [\n  (\"S' -> statement\",\"S'\",1,None,None,None),\n  ('statement -> SET_UP LPAREN VARIABLE COMMA VARIABLE RPAREN','statement',6,'p_setup_function','parsing_yacc.py',16),\n  ('statement -> SET_UP_HOST LPAREN VARIABLE COMMA NUMBER RPAREN','statement',6,'p_host_setup','parsing_yacc.py',29),",
        "detail": "parsetab",
        "documentation": {}
    },
    {
        "label": "_lr_productions",
        "kind": 5,
        "importPath": "parsetab",
        "description": "parsetab",
        "peekOfCode": "_lr_productions = [\n  (\"S' -> statement\",\"S'\",1,None,None,None),\n  ('statement -> SET_UP LPAREN VARIABLE COMMA VARIABLE RPAREN','statement',6,'p_setup_function','parsing_yacc.py',16),\n  ('statement -> SET_UP_HOST LPAREN VARIABLE COMMA NUMBER RPAREN','statement',6,'p_host_setup','parsing_yacc.py',29),\n  ('statement -> statement AND statement','statement',3,'p_expression_and','parsing_yacc.py',46),\n  ('statement -> statement OR statement','statement',3,'p_expression_or','parsing_yacc.py',55),\n  ('statement -> NOT statement','statement',2,'p_expression_not','parsing_yacc.py',65),\n  ('statement -> statement POWER statement','statement',3,'p_expression_exponentiation','parsing_yacc.py',75),\n  ('statement -> VARIABLE INCREMENT','statement',2,'p_expression_increment','parsing_yacc.py',85),\n  ('statement -> VARIABLE DECREMENT','statement',2,'p_expression_decrement','parsing_yacc.py',95),",
        "detail": "parsetab",
        "documentation": {}
    },
    {
        "label": "get_var_name",
        "kind": 2,
        "importPath": "pythonTopython2",
        "description": "pythonTopython2",
        "peekOfCode": "def get_var_name(var):\n    for name, value in globals().items():\n        if value is var:\n            return name\ndef numpy_add_to_py(a, b):\n    a_name = get_var_name(a)\n    b_name = get_var_name(b)\n    return f\"cupy.add({a_name}, {b_name})\"\ndef numpy_subtract_to_py(a, b):\n    a_name = get_var_name(a)",
        "detail": "pythonTopython2",
        "documentation": {}
    },
    {
        "label": "numpy_add_to_py",
        "kind": 2,
        "importPath": "pythonTopython2",
        "description": "pythonTopython2",
        "peekOfCode": "def numpy_add_to_py(a, b):\n    a_name = get_var_name(a)\n    b_name = get_var_name(b)\n    return f\"cupy.add({a_name}, {b_name})\"\ndef numpy_subtract_to_py(a, b):\n    a_name = get_var_name(a)\n    b_name = get_var_name(b)\n    return f\"cupy.subtract({a_name}, {b_name})\"\ndef numpy_sum_to_py(a):\n    a_name = get_var_name(a)",
        "detail": "pythonTopython2",
        "documentation": {}
    },
    {
        "label": "numpy_subtract_to_py",
        "kind": 2,
        "importPath": "pythonTopython2",
        "description": "pythonTopython2",
        "peekOfCode": "def numpy_subtract_to_py(a, b):\n    a_name = get_var_name(a)\n    b_name = get_var_name(b)\n    return f\"cupy.subtract({a_name}, {b_name})\"\ndef numpy_sum_to_py(a):\n    a_name = get_var_name(a)\n    return f\"cupy.sum({a_name})\"\ndef numpy_dot_to_py(a, b):\n    a_name = get_var_name(a)\n    b_name = get_var_name(b)",
        "detail": "pythonTopython2",
        "documentation": {}
    },
    {
        "label": "numpy_sum_to_py",
        "kind": 2,
        "importPath": "pythonTopython2",
        "description": "pythonTopython2",
        "peekOfCode": "def numpy_sum_to_py(a):\n    a_name = get_var_name(a)\n    return f\"cupy.sum({a_name})\"\ndef numpy_dot_to_py(a, b):\n    a_name = get_var_name(a)\n    b_name = get_var_name(b)\n    return f\"cupy.dot({a_name}, {b_name})\"",
        "detail": "pythonTopython2",
        "documentation": {}
    },
    {
        "label": "numpy_dot_to_py",
        "kind": 2,
        "importPath": "pythonTopython2",
        "description": "pythonTopython2",
        "peekOfCode": "def numpy_dot_to_py(a, b):\n    a_name = get_var_name(a)\n    b_name = get_var_name(b)\n    return f\"cupy.dot({a_name}, {b_name})\"",
        "detail": "pythonTopython2",
        "documentation": {}
    }
]