[
    {
        "label": "ply.lex",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ply.lex",
        "description": "ply.lex",
        "detail": "ply.lex",
        "documentation": {}
    },
    {
        "label": "inspect",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "inspect",
        "description": "inspect",
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "yacc",
        "importPath": "ply",
        "description": "ply",
        "isExtraImport": true,
        "detail": "ply",
        "documentation": {}
    },
    {
        "label": "pythonToC",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pythonToC",
        "description": "pythonToC",
        "detail": "pythonToC",
        "documentation": {}
    },
    {
        "label": "pythonTopython2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pythonTopython2",
        "description": "pythonTopython2",
        "detail": "pythonTopython2",
        "documentation": {}
    },
    {
        "label": "main",
        "importPath": "parsing_lex",
        "description": "parsing_lex",
        "isExtraImport": true,
        "detail": "parsing_lex",
        "documentation": {}
    },
    {
        "label": "MyLexer",
        "importPath": "parsing_lex",
        "description": "parsing_lex",
        "isExtraImport": true,
        "detail": "parsing_lex",
        "documentation": {}
    },
    {
        "label": "MyLexer",
        "kind": 6,
        "importPath": "parsing_lex",
        "description": "parsing_lex",
        "peekOfCode": "class MyLexer(object):\n    # This is the class that will build the Lexer \n    # Let's have our Lexer handle reserved keywords \n    reserved = {\n        'print': 'PRINT',\n        'if': 'IF',\n        'else': 'ELSE',\n        'elif': 'ELIF',\n        'while': 'WHILE',\n        'for': 'FOR',",
        "detail": "parsing_lex",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "parsing_lex",
        "description": "parsing_lex",
        "peekOfCode": "def main(input):\n    # Call your parsing function(s) here\n    # Let input be a string that contains the code to be parsed \n    m = MyLexer() \n    m.build() \n    m.test(input)\nif __name__ == \"__main__\":\n    main()",
        "detail": "parsing_lex",
        "documentation": {}
    },
    {
        "label": "set_up",
        "kind": 2,
        "importPath": "pythonToC",
        "description": "pythonToC",
        "peekOfCode": "def set_up(file_name):\n    file = open(file_name + \".c\", \"a\")\n    file.write(\"//%%cuda_group_save -n run.cu -g default\\n\")\n    file.write(\"#include <stdio.h>\\n\")\n    file.write('#include \"util.h\"\\n')\n    file.write('#include \"help_file.c\"\\n\\n')\n    file.write(\"__global__\\n\")\n    file.write(f\"void {file_name}_kernel(float * d_input, float * d_output, const int matrix_dim)\" + \"{\\n\")\ndef end_kernel(file_name):\n    file = open(file_name + \".c\", \"a\")",
        "detail": "pythonToC",
        "documentation": {}
    },
    {
        "label": "end_kernel",
        "kind": 2,
        "importPath": "pythonToC",
        "description": "pythonToC",
        "peekOfCode": "def end_kernel(file_name):\n    file = open(file_name + \".c\", \"a\")\n    file.write(\"}\\n\")\ndef end_main(file_name):\n    file = open(file_name + \".c\", \"a\")\n    file.write(\"    return 0;\\n}\")\ndef set_up_main(file_name):\n    file = open(file_name + \".c\", \"a\")\n    file.write(\"__host__\\n int main() {\\n\")\ndef set_arr(var_name, var, var_length, file_name):",
        "detail": "pythonToC",
        "documentation": {}
    },
    {
        "label": "end_main",
        "kind": 2,
        "importPath": "pythonToC",
        "description": "pythonToC",
        "peekOfCode": "def end_main(file_name):\n    file = open(file_name + \".c\", \"a\")\n    file.write(\"    return 0;\\n}\")\ndef set_up_main(file_name):\n    file = open(file_name + \".c\", \"a\")\n    file.write(\"__host__\\n int main() {\\n\")\ndef set_arr(var_name, var, var_length, file_name):\n    file = open(file_name + \".c\", \"a\")\n    #actually getting an array\n    #arr_string = (np.array_str(var))[6:]",
        "detail": "pythonToC",
        "documentation": {}
    },
    {
        "label": "set_up_main",
        "kind": 2,
        "importPath": "pythonToC",
        "description": "pythonToC",
        "peekOfCode": "def set_up_main(file_name):\n    file = open(file_name + \".c\", \"a\")\n    file.write(\"__host__\\n int main() {\\n\")\ndef set_arr(var_name, var, var_length, file_name):\n    file = open(file_name + \".c\", \"a\")\n    #actually getting an array\n    #arr_string = (np.array_str(var))[6:]\n    #if variables == \"\":\n       # variables += f\"d_{var}\"\n    #else:",
        "detail": "pythonToC",
        "documentation": {}
    },
    {
        "label": "set_arr",
        "kind": 2,
        "importPath": "pythonToC",
        "description": "pythonToC",
        "peekOfCode": "def set_arr(var_name, var, var_length, file_name):\n    file = open(file_name + \".c\", \"a\")\n    #actually getting an array\n    #arr_string = (np.array_str(var))[6:]\n    #if variables == \"\":\n       # variables += f\"d_{var}\"\n    #else:\n        #variables += (f\", d_{var}\")\n    variables = []\n    variables.append(f\"d_{var_name}\")",
        "detail": "pythonToC",
        "documentation": {}
    },
    {
        "label": "deploy_kernel",
        "kind": 2,
        "importPath": "pythonToC",
        "description": "pythonToC",
        "peekOfCode": "def deploy_kernel(file_name):\n    file = open(file_name + \".c\", \"a\")\n    file.write(f\"    THREADS_PER_BLOCK = matrix_dim;\\n\")\n    file.write(\"    BLOCKS_PER_GRID = matrix_dim;\\n\")\n    file.write(f\"    {file_name}_kernel<<<BLOCKS_PER_GRID, THREADS_PER_BLOCK>>>({variables});\\n\")\n    file.write(\"    cudaDeviceSynchronize();\\n\\n\")\ndef transfer_data(var_name, var, file_name, hToD):\n    file = open(file_name + \".c\", \"a\")\n    if hToD:\n        #file.write(f\"    cudaMemcpy(d_{var_name}, h_{var_name},sizeof(h_{var_name}), cudaMemcpyHostToDevice);\\n\\n\")",
        "detail": "pythonToC",
        "documentation": {}
    },
    {
        "label": "transfer_data",
        "kind": 2,
        "importPath": "pythonToC",
        "description": "pythonToC",
        "peekOfCode": "def transfer_data(var_name, var, file_name, hToD):\n    file = open(file_name + \".c\", \"a\")\n    if hToD:\n        #file.write(f\"    cudaMemcpy(d_{var_name}, h_{var_name},sizeof(h_{var_name}), cudaMemcpyHostToDevice);\\n\\n\")\n        return f\"    cudaMemcpy(d_{var_name}, h_{var_name},sizeof(h_{var_name}), cudaMemcpyHostToDevice);\\n\\n\"\n    else:\n        #file.write(f\"   cudaMemcpy(h_{var_name}, d_{var_name}, sizeof(h_{var_name}), cudaMemcpyDeviceToHost);\")\n        return f\"   cudaMemcpy(h_{var_name}, d_{var_name}, sizeof(h_{var_name}), cudaMemcpyDeviceToHost);\\n\"\ndef free_data(var, file_name):\n    file = open(file_name + \".c\", \"a\")",
        "detail": "pythonToC",
        "documentation": {}
    },
    {
        "label": "free_data",
        "kind": 2,
        "importPath": "pythonToC",
        "description": "pythonToC",
        "peekOfCode": "def free_data(var, file_name):\n    file = open(file_name + \".c\", \"a\")\n    file.write(f\"    cudaFree(d_{get_var_name(var)});\\n\")\n    file.write(f\"    free(h_{get_var_name(var)});\\n\")\n#    file.write(\"}\\n\\n__host__\\n\")\n#    file.write(\"const int THREADS_PER_BLOCK = 256, BLOCKS = 3;\\n\\n\")\n# convert args to c\n# convert args from device to host\n#    file.write(file_name + \"<<<BLOCKS,THREADS_PER_BLOCK>>>(args);\\n\")\n#    file.write(\"cudaDeviceSynchronize();\\n\")",
        "detail": "pythonToC",
        "documentation": {}
    },
    {
        "label": "get_var_name",
        "kind": 2,
        "importPath": "pythonToC",
        "description": "pythonToC",
        "peekOfCode": "def get_var_name(var):\n    callers_local_vars = inspect.currentframe().f_back.f_locals.items()\n    return ([var_name for var_name, var_val in callers_local_vars if var_val is var])[0]\ndef numpy_add_to_c(a_name, b_name, result_name):\n    #a_name = get_var_name(a)\n    #b_name = get_var_name(b)\n    #result_name = get_var_name(result)\n    return f\"addArraysHelper({a_name}, {b_name}, {result_name});\"\ndef numpy_sub_to_c(a_name, b_name, result_name):\n    #a_name = get_var_name(a)",
        "detail": "pythonToC",
        "documentation": {}
    },
    {
        "label": "numpy_add_to_c",
        "kind": 2,
        "importPath": "pythonToC",
        "description": "pythonToC",
        "peekOfCode": "def numpy_add_to_c(a_name, b_name, result_name):\n    #a_name = get_var_name(a)\n    #b_name = get_var_name(b)\n    #result_name = get_var_name(result)\n    return f\"addArraysHelper({a_name}, {b_name}, {result_name});\"\ndef numpy_sub_to_c(a_name, b_name, result_name):\n    #a_name = get_var_name(a)\n    #b_name = get_var_name(b)\n    #result_name = get_var_name(result)\n    return f\"subtractArraysHelper({a_name}, {b_name}, {result_name});\"",
        "detail": "pythonToC",
        "documentation": {}
    },
    {
        "label": "numpy_sub_to_c",
        "kind": 2,
        "importPath": "pythonToC",
        "description": "pythonToC",
        "peekOfCode": "def numpy_sub_to_c(a_name, b_name, result_name):\n    #a_name = get_var_name(a)\n    #b_name = get_var_name(b)\n    #result_name = get_var_name(result)\n    return f\"subtractArraysHelper({a_name}, {b_name}, {result_name});\"\ndef numpy_sum_to_c(a_name, result_name):\n    #a_name = get_var_name(a)\n    #result_name = get_var_name(result)\n    return f\"sumArraysHelper({a_name}, {result_name});\"\ndef numpy_dot_product_to_c(a_name, b_name, result_name):",
        "detail": "pythonToC",
        "documentation": {}
    },
    {
        "label": "numpy_sum_to_c",
        "kind": 2,
        "importPath": "pythonToC",
        "description": "pythonToC",
        "peekOfCode": "def numpy_sum_to_c(a_name, result_name):\n    #a_name = get_var_name(a)\n    #result_name = get_var_name(result)\n    return f\"sumArraysHelper({a_name}, {result_name});\"\ndef numpy_dot_product_to_c(a_name, b_name, result_name):\n    #a_name = get_var_name(a)\n    #b_name = get_var_name(b)\n    #result_name = get_var_name(result)\n    return f\"dotArraysHelper({a_name}, {b_name}, {result_name});\"\ndef set_up_host(args, file_name, matrix_dim):",
        "detail": "pythonToC",
        "documentation": {}
    },
    {
        "label": "numpy_dot_product_to_c",
        "kind": 2,
        "importPath": "pythonToC",
        "description": "pythonToC",
        "peekOfCode": "def numpy_dot_product_to_c(a_name, b_name, result_name):\n    #a_name = get_var_name(a)\n    #b_name = get_var_name(b)\n    #result_name = get_var_name(result)\n    return f\"dotArraysHelper({a_name}, {b_name}, {result_name});\"\ndef set_up_host(args, file_name, matrix_dim):\n    file = open(file_name + \".c\", \"a\")\n    file.write(\"    float *h_input, *h_output;\\n\")\n    file.write(f\"    h_input = (float*)malloc({matrix_dim} * {matrix_dim} * sizeof(float));\\n\")\n    file.write(f\"    h_output = (float*)malloc({matrix_dim} * {matrix_dim} * sizeof(float));\\n\")",
        "detail": "pythonToC",
        "documentation": {}
    },
    {
        "label": "set_up_host",
        "kind": 2,
        "importPath": "pythonToC",
        "description": "pythonToC",
        "peekOfCode": "def set_up_host(args, file_name, matrix_dim):\n    file = open(file_name + \".c\", \"a\")\n    file.write(\"    float *h_input, *h_output;\\n\")\n    file.write(f\"    h_input = (float*)malloc({matrix_dim} * {matrix_dim} * sizeof(float));\\n\")\n    file.write(f\"    h_output = (float*)malloc({matrix_dim} * {matrix_dim} * sizeof(float));\\n\")\n    file.write(\"    float *d_input, *d_output;\\n\")\n    file.write(f\"    cudaMalloc(&d_input, {matrix_dim} * {matrix_dim} * sizeof(float));\\n\")\n    file.write(f\"    cudaMalloc(&d_output, {matrix_dim} * {matrix_dim} * sizeof(float));\\n\\n\")\n    file.write(\n        f\"    cudaMemcpy(d_input, h_input, {matrix_dim} * {matrix_dim} * sizeof(float), cudaMemcpyHostToDevice);\\n\\n\")",
        "detail": "pythonToC",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "pythonToC",
        "description": "pythonToC",
        "peekOfCode": "def main():\n    set_up('test')\n    end_kernel('test')\n    set_up_main('test')\n    set_arr(\"b\", \"[1, 2, 3]\", \"test\")\n    deploy_kernel('test')\n    end_main('test')\n    pass\nif __name__ == \"__main__\":\n    main()",
        "detail": "pythonToC",
        "documentation": {}
    },
    {
        "label": "variables",
        "kind": 5,
        "importPath": "pythonToC",
        "description": "pythonToC",
        "peekOfCode": "variables = \"\"\n# Define your functions here\ndef set_up(file_name):\n    file = open(file_name + \".c\", \"a\")\n    file.write(\"//%%cuda_group_save -n run.cu -g default\\n\")\n    file.write(\"#include <stdio.h>\\n\")\n    file.write('#include \"util.h\"\\n')\n    file.write('#include \"help_file.c\"\\n\\n')\n    file.write(\"__global__\\n\")\n    file.write(f\"void {file_name}_kernel(float * d_input, float * d_output, const int matrix_dim)\" + \"{\\n\")",
        "detail": "pythonToC",
        "documentation": {}
    },
    {
        "label": "MyParser",
        "kind": 6,
        "importPath": "parsing_yacc",
        "description": "parsing_yacc",
        "peekOfCode": "class MyParser(object): \n    # Define the tokens that the parser will recognize \n    tokens = MyLexer.tokens\n    #handling advanced expressions:\n    #handling logical AND operator\n    def p_expression_and(self, p):\n        '''statement : NUMBER AND NUMBER \n                     | NUMBER AND statement\n                     | statement AND NUMBER\n                     | statement AND statement'''",
        "detail": "parsing_yacc",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "parsing_yacc",
        "description": "parsing_yacc",
        "peekOfCode": "def main(input, mode):\n    # Create a parser object\n    parser = MyParser(mode)\n    # Parse the input\n    return parser.parse(input)\nif __name__ == '__main__':\n    main()",
        "detail": "parsing_yacc",
        "documentation": {}
    },
    {
        "label": "_tabversion",
        "kind": 5,
        "importPath": "parsetab",
        "description": "parsetab",
        "peekOfCode": "_tabversion = '3.10'\n_lr_method = 'LALR'\n_lr_signature = 'AND ARRAY BREAK COLON COMMA COMMENT DECREMENT DEF DIVIDE DOUBLE_EQUALS ELIF ELSE EQUALS FALSE FOR IF IN INCREMENT LIST LPAREN MINUS NONE NOT NP_ABS NP_ADD NP_COS NP_DOT_PRODUCT NP_EXP NP_LOG NP_LOG10 NP_POWER NP_SIGN NP_SIN NP_SQRT NP_SUBTRACT NP_SUM NUMBER OR PLUS POWER PRINT RANGE RETURN RPAREN SET_UP SET_UP_HOST SPACE STRING TIMES TRUE VARIABLE WHILEstatement : NUMBER AND NUMBER \\n                     | NUMBER AND statement\\n                     | statement AND NUMBER\\n                     | statement AND statementstatement : NUMBER OR NUMBER \\n                     | NUMBER OR statement\\n                     | statement OR NUMBER\\n                     | statement OR statementstatement : NOT NUMBER \\n                     | NOT statementstatement : NUMBER POWER NUMBER \\n                     | NUMBER POWER statement\\n                     | statement POWER NUMBER\\n                     | statement POWER statementstatement : INCREMENT NUMBER \\n                     | INCREMENT statement\\n                     | INCREMENT VARIABLEstatement : DECREMENT NUMBER \\n                     | DECREMENT statement\\n                     | DECREMENT VARIABLEstatement : NP_SIN LPAREN statement RPAREN\\n                     | NP_SIN LPAREN NUMBER RPARENstatement : NP_COS LPAREN statement RPAREN\\n                     | NP_COS LPAREN NUMBER RPARENstatement : PRINT LPAREN STRING RPAREN \\n                     | PRINT LPAREN NUMBER RPAREN\\n                     | PRINT LPAREN statement RPAREN\\n                     | PRINT LPAREN VARIABLE RPARENstatement : NUMBER PLUS NUMBER \\n                     | statement PLUS NUMBER\\n                     | NUMBER PLUS statement\\n                     | statement PLUS statementstatement : NUMBER MINUS NUMBER \\n                     | statement MINUS NUMBER\\n                     | NUMBER MINUS statement\\n                     | statement MINUS statementstatement : NUMBER TIMES NUMBER \\n                     | statement TIMES NUMBER\\n                     | NUMBER TIMES statement\\n                     | statement TIMES statementstatement : NUMBER DIVIDE NUMBER\\n                     | statement DIVIDE NUMBER\\n                     | NUMBER DIVIDE statement\\n                     | statement DIVIDE statementstatement : LPAREN statement RPARENstatement : statement DOUBLE_EQUALS statement\\n                     | NUMBER DOUBLE_EQUALS NUMBER\\n                     | STRING DOUBLE_EQUALS STRING\\n                     | statement DOUBLE_EQUALS NUMBER\\n                     | NUMBER DOUBLE_EQUALS statement\\n                     | statement DOUBLE_EQUALS STRING\\n                     | STRING DOUBLE_EQUALS statement\\n                     | STRING DOUBLE_EQUALS NUMBER\\n                     | NUMBER DOUBLE_EQUALS STRINGstatement : IF statement COLON statementstatement : FOR VARIABLE IN RANGE LPAREN NUMBER RPAREN COLON statementstatement : VARIABLE EQUALS ARRAY LPAREN LIST RPARENstatement : VARIABLE EQUALS NP_ADD LPAREN VARIABLE COMMA VARIABLE RPARENstatement : VARIABLE EQUALS NP_SUBTRACT LPAREN VARIABLE COMMA VARIABLE RPARENstatement : VARIABLE EQUALS NP_SUM LPAREN VARIABLE RPARENstatement : VARIABLE EQUALS NP_DOT_PRODUCT LPAREN VARIABLE COMMA VARIABLE RPARENstatement : '\n_lr_action_items = {'NUMBER':([0,3,4,6,8,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,39,41,42,43,97,119,133,],[2,30,32,36,2,2,47,49,51,53,55,57,59,61,63,65,67,69,71,73,75,77,86,89,91,96,2,125,2,]),'NOT':([0,3,4,6,8,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,39,41,42,43,97,133,],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'INCREMENT':([0,3,4,6,8,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,39,41,42,43,97,133,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'DECREMENT':([0,3,4,6,8,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,39,41,42,43,97,133,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'NP_SIN':([0,3,4,6,8,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,39,41,42,43,97,133,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'NP_COS':([0,3,4,6,8,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,39,41,42,43,97,133,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'PRINT':([0,3,4,6,8,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,39,41,42,43,97,133,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'LPAREN':([0,3,4,6,7,8,9,10,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,39,41,42,43,80,81,82,83,84,97,113,133,],[8,8,8,8,39,8,41,42,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,99,100,101,102,103,8,119,8,]),'STRING':([0,3,4,6,8,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,39,41,42,43,97,133,],[11,11,11,11,11,11,11,11,11,11,11,11,11,62,11,11,11,11,11,11,11,79,11,11,90,94,11,11,]),'IF':([0,3,4,6,8,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,39,41,42,43,97,133,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'FOR':([0,3,4,6,8,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,39,41,42,43,97,133,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'VARIABLE':([0,3,4,6,8,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,39,41,42,43,97,100,101,102,103,121,122,124,133,],[5,5,34,38,5,5,45,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,93,5,5,115,116,117,118,126,127,128,5,]),'AND':([0,1,2,3,4,6,8,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,39,40,41,42,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,85,86,87,88,89,91,92,94,95,96,97,104,105,106,107,108,109,110,111,112,120,123,130,131,132,133,134,],[-62,14,22,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,22,14,22,14,-17,22,14,-20,-62,14,-62,-62,-62,14,14,22,14,22,14,22,14,22,14,22,14,22,14,22,14,22,-51,22,14,22,14,22,14,22,14,22,14,22,14,22,14,22,14,-54,14,22,-45,14,22,22,14,-48,14,22,-62,-21,-22,-23,-24,-25,-26,-27,-28,14,-57,-60,-58,-59,-61,-62,14,]),'OR':([0,1,2,3,4,6,8,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,39,40,41,42,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,85,86,87,88,89,91,92,94,95,96,97,104,105,106,107,108,109,110,111,112,120,123,130,131,132,133,134,],[-62,15,23,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,23,15,23,15,-17,23,15,-20,-62,15,-62,-62,-62,15,15,23,15,23,15,23,15,23,15,23,15,23,15,23,15,23,-51,23,15,23,15,23,15,23,15,23,15,23,15,23,15,23,15,-54,15,23,-45,15,23,23,15,-48,15,23,-62,-21,-22,-23,-24,-25,-26,-27,-28,15,-57,-60,-58,-59,-61,-62,15,]),'POWER':([0,1,2,3,4,6,8,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,39,40,41,42,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,85,86,87,88,89,91,92,94,95,96,97,104,105,106,107,108,109,110,111,112,120,123,130,131,132,133,134,],[-62,16,24,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,24,16,24,16,-17,24,16,-20,-62,16,-62,-62,-62,16,16,24,16,24,16,24,16,24,16,24,16,24,16,24,16,24,-51,24,16,24,16,24,16,24,16,24,16,24,16,24,16,24,16,-54,16,24,-45,16,24,24,16,-48,16,24,-62,-21,-22,-23,-24,-25,-26,-27,-28,16,-57,-60,-58,-59,-61,-62,16,]),'PLUS':([0,1,2,3,4,6,8,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,39,40,41,42,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,85,86,87,88,89,91,92,94,95,96,97,104,105,106,107,108,109,110,111,112,120,123,130,131,132,133,134,],[-62,17,25,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,25,17,25,17,-17,25,17,-20,-62,17,-62,-62,-62,17,17,25,17,25,17,25,17,25,17,25,17,25,17,25,17,25,-51,25,17,25,17,25,17,25,17,25,17,25,17,25,17,25,17,-54,17,25,-45,17,25,25,17,-48,17,25,-62,-21,-22,-23,-24,-25,-26,-27,-28,17,-57,-60,-58,-59,-61,-62,17,]),'MINUS':([0,1,2,3,4,6,8,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,39,40,41,42,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,85,86,87,88,89,91,92,94,95,96,97,104,105,106,107,108,109,110,111,112,120,123,130,131,132,133,134,],[-62,18,26,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,26,18,26,18,-17,26,18,-20,-62,18,-62,-62,-62,18,18,26,18,26,18,26,18,26,18,26,18,26,18,26,18,26,-51,26,18,26,18,26,18,26,18,26,18,26,18,26,18,26,18,-54,18,26,-45,18,26,26,18,-48,18,26,-62,-21,-22,-23,-24,-25,-26,-27,-28,18,-57,-60,-58,-59,-61,-62,18,]),'TIMES':([0,1,2,3,4,6,8,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,39,40,41,42,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,85,86,87,88,89,91,92,94,95,96,97,104,105,106,107,108,109,110,111,112,120,123,130,131,132,133,134,],[-62,19,27,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,27,19,27,19,-17,27,19,-20,-62,19,-62,-62,-62,19,19,27,19,27,19,27,19,27,19,27,19,27,19,27,19,27,-51,27,19,27,19,27,19,27,19,27,19,27,19,27,19,27,19,-54,19,27,-45,19,27,27,19,-48,19,27,-62,-21,-22,-23,-24,-25,-26,-27,-28,19,-57,-60,-58,-59,-61,-62,19,]),'DIVIDE':([0,1,2,3,4,6,8,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,39,40,41,42,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,85,86,87,88,89,91,92,94,95,96,97,104,105,106,107,108,109,110,111,112,120,123,130,131,132,133,134,],[-62,20,28,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,28,20,28,20,-17,28,20,-20,-62,20,-62,-62,-62,20,20,28,20,28,20,28,20,28,20,28,20,28,20,28,20,28,-51,28,20,28,20,28,20,28,20,28,20,28,20,28,20,28,20,-54,20,28,-45,20,28,28,20,-48,20,28,-62,-21,-22,-23,-24,-25,-26,-27,-28,20,-57,-60,-58,-59,-61,-62,20,]),'DOUBLE_EQUALS':([0,1,2,3,4,6,8,11,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,39,40,41,42,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,85,86,87,88,89,90,91,92,94,95,96,97,104,105,106,107,108,109,110,111,112,120,123,130,131,132,133,134,],[-62,21,29,-62,-62,-62,-62,43,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,29,21,29,21,-17,29,21,-20,-62,21,-62,-62,-62,21,21,29,21,29,21,29,21,29,21,29,21,29,21,29,21,29,43,29,21,29,21,29,21,29,21,29,21,29,21,29,21,29,21,43,21,29,-45,21,29,43,29,21,43,21,29,-62,-21,-22,-23,-24,-25,-26,-27,-28,21,-57,-60,-58,-59,-61,-62,21,]),'$end':([0,1,3,4,6,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,43,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,87,94,95,96,97,104,105,106,107,108,109,110,111,112,120,123,130,131,132,133,134,],[-62,0,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-9,-10,-15,-16,-17,-18,-19,-20,-62,-4,-3,-8,-7,-14,-13,-32,-30,-36,-34,-40,-38,-44,-42,-46,-49,-51,-1,-2,-5,-6,-11,-12,-29,-31,-33,-35,-37,-39,-41,-43,-47,-50,-54,-45,-48,-52,-53,-62,-21,-22,-23,-24,-25,-26,-27,-28,-55,-57,-60,-58,-59,-61,-62,-56,]),'RPAREN':([3,4,6,8,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,39,40,41,42,43,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,85,86,87,88,89,90,91,92,93,94,95,96,97,104,105,106,107,108,109,110,111,112,114,117,120,123,125,126,127,128,130,131,132,133,134,],[-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-9,-10,-15,-16,-17,-18,-19,-20,-62,87,-62,-62,-62,-4,-3,-8,-7,-14,-13,-32,-30,-36,-34,-40,-38,-44,-42,-46,-49,-51,-1,-2,-5,-6,-11,-12,-29,-31,-33,-35,-37,-39,-41,-43,-47,-50,-54,104,105,-45,106,107,108,109,110,111,-48,-52,-53,-62,-21,-22,-23,-24,-25,-26,-27,-28,-55,120,123,-57,-60,129,130,131,132,-58,-59,-61,-62,-56,]),'COLON':([3,4,6,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,87,94,95,96,97,104,105,106,107,108,109,110,111,112,120,123,129,130,131,132,133,134,],[-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-9,-10,-15,-16,-17,-18,-19,-20,-62,97,-4,-3,-8,-7,-14,-13,-32,-30,-36,-34,-40,-38,-44,-42,-46,-49,-51,-1,-2,-5,-6,-11,-12,-29,-31,-33,-35,-37,-39,-41,-43,-47,-50,-54,-45,-48,-52,-53,-62,-21,-22,-23,-24,-25,-26,-27,-28,-55,-57,-60,133,-58,-59,-61,-62,-56,]),'EQUALS':([5,34,38,93,],[35,35,35,35,]),'ARRAY':([35,],[80,]),'NP_ADD':([35,],[81,]),'NP_SUBTRACT':([35,],[82,]),'NP_SUM':([35,],[83,]),'NP_DOT_PRODUCT':([35,],[84,]),'IN':([45,],[98,]),'RANGE':([98,],[113,]),'LIST':([99,],[114,]),'COMMA':([115,116,118,],[121,122,124,]),}\n_lr_action = {}\nfor _k, _v in _lr_action_items.items():\n   for _x,_y in zip(_v[0],_v[1]):\n      if not _x in _lr_action:  _lr_action[_x] = {}\n      _lr_action[_x][_k] = _y\ndel _lr_action_items",
        "detail": "parsetab",
        "documentation": {}
    },
    {
        "label": "_lr_method",
        "kind": 5,
        "importPath": "parsetab",
        "description": "parsetab",
        "peekOfCode": "_lr_method = 'LALR'\n_lr_signature = 'AND ARRAY BREAK COLON COMMA COMMENT DECREMENT DEF DIVIDE DOUBLE_EQUALS ELIF ELSE EQUALS FALSE FOR IF IN INCREMENT LIST LPAREN MINUS NONE NOT NP_ABS NP_ADD NP_COS NP_DOT_PRODUCT NP_EXP NP_LOG NP_LOG10 NP_POWER NP_SIGN NP_SIN NP_SQRT NP_SUBTRACT NP_SUM NUMBER OR PLUS POWER PRINT RANGE RETURN RPAREN SET_UP SET_UP_HOST SPACE STRING TIMES TRUE VARIABLE WHILEstatement : NUMBER AND NUMBER \\n                     | NUMBER AND statement\\n                     | statement AND NUMBER\\n                     | statement AND statementstatement : NUMBER OR NUMBER \\n                     | NUMBER OR statement\\n                     | statement OR NUMBER\\n                     | statement OR statementstatement : NOT NUMBER \\n                     | NOT statementstatement : NUMBER POWER NUMBER \\n                     | NUMBER POWER statement\\n                     | statement POWER NUMBER\\n                     | statement POWER statementstatement : INCREMENT NUMBER \\n                     | INCREMENT statement\\n                     | INCREMENT VARIABLEstatement : DECREMENT NUMBER \\n                     | DECREMENT statement\\n                     | DECREMENT VARIABLEstatement : NP_SIN LPAREN statement RPAREN\\n                     | NP_SIN LPAREN NUMBER RPARENstatement : NP_COS LPAREN statement RPAREN\\n                     | NP_COS LPAREN NUMBER RPARENstatement : PRINT LPAREN STRING RPAREN \\n                     | PRINT LPAREN NUMBER RPAREN\\n                     | PRINT LPAREN statement RPAREN\\n                     | PRINT LPAREN VARIABLE RPARENstatement : NUMBER PLUS NUMBER \\n                     | statement PLUS NUMBER\\n                     | NUMBER PLUS statement\\n                     | statement PLUS statementstatement : NUMBER MINUS NUMBER \\n                     | statement MINUS NUMBER\\n                     | NUMBER MINUS statement\\n                     | statement MINUS statementstatement : NUMBER TIMES NUMBER \\n                     | statement TIMES NUMBER\\n                     | NUMBER TIMES statement\\n                     | statement TIMES statementstatement : NUMBER DIVIDE NUMBER\\n                     | statement DIVIDE NUMBER\\n                     | NUMBER DIVIDE statement\\n                     | statement DIVIDE statementstatement : LPAREN statement RPARENstatement : statement DOUBLE_EQUALS statement\\n                     | NUMBER DOUBLE_EQUALS NUMBER\\n                     | STRING DOUBLE_EQUALS STRING\\n                     | statement DOUBLE_EQUALS NUMBER\\n                     | NUMBER DOUBLE_EQUALS statement\\n                     | statement DOUBLE_EQUALS STRING\\n                     | STRING DOUBLE_EQUALS statement\\n                     | STRING DOUBLE_EQUALS NUMBER\\n                     | NUMBER DOUBLE_EQUALS STRINGstatement : IF statement COLON statementstatement : FOR VARIABLE IN RANGE LPAREN NUMBER RPAREN COLON statementstatement : VARIABLE EQUALS ARRAY LPAREN LIST RPARENstatement : VARIABLE EQUALS NP_ADD LPAREN VARIABLE COMMA VARIABLE RPARENstatement : VARIABLE EQUALS NP_SUBTRACT LPAREN VARIABLE COMMA VARIABLE RPARENstatement : VARIABLE EQUALS NP_SUM LPAREN VARIABLE RPARENstatement : VARIABLE EQUALS NP_DOT_PRODUCT LPAREN VARIABLE COMMA VARIABLE RPARENstatement : '\n_lr_action_items = {'NUMBER':([0,3,4,6,8,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,39,41,42,43,97,119,133,],[2,30,32,36,2,2,47,49,51,53,55,57,59,61,63,65,67,69,71,73,75,77,86,89,91,96,2,125,2,]),'NOT':([0,3,4,6,8,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,39,41,42,43,97,133,],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'INCREMENT':([0,3,4,6,8,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,39,41,42,43,97,133,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'DECREMENT':([0,3,4,6,8,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,39,41,42,43,97,133,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'NP_SIN':([0,3,4,6,8,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,39,41,42,43,97,133,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'NP_COS':([0,3,4,6,8,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,39,41,42,43,97,133,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'PRINT':([0,3,4,6,8,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,39,41,42,43,97,133,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'LPAREN':([0,3,4,6,7,8,9,10,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,39,41,42,43,80,81,82,83,84,97,113,133,],[8,8,8,8,39,8,41,42,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,99,100,101,102,103,8,119,8,]),'STRING':([0,3,4,6,8,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,39,41,42,43,97,133,],[11,11,11,11,11,11,11,11,11,11,11,11,11,62,11,11,11,11,11,11,11,79,11,11,90,94,11,11,]),'IF':([0,3,4,6,8,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,39,41,42,43,97,133,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'FOR':([0,3,4,6,8,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,39,41,42,43,97,133,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'VARIABLE':([0,3,4,6,8,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,39,41,42,43,97,100,101,102,103,121,122,124,133,],[5,5,34,38,5,5,45,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,93,5,5,115,116,117,118,126,127,128,5,]),'AND':([0,1,2,3,4,6,8,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,39,40,41,42,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,85,86,87,88,89,91,92,94,95,96,97,104,105,106,107,108,109,110,111,112,120,123,130,131,132,133,134,],[-62,14,22,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,22,14,22,14,-17,22,14,-20,-62,14,-62,-62,-62,14,14,22,14,22,14,22,14,22,14,22,14,22,14,22,14,22,-51,22,14,22,14,22,14,22,14,22,14,22,14,22,14,22,14,-54,14,22,-45,14,22,22,14,-48,14,22,-62,-21,-22,-23,-24,-25,-26,-27,-28,14,-57,-60,-58,-59,-61,-62,14,]),'OR':([0,1,2,3,4,6,8,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,39,40,41,42,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,85,86,87,88,89,91,92,94,95,96,97,104,105,106,107,108,109,110,111,112,120,123,130,131,132,133,134,],[-62,15,23,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,23,15,23,15,-17,23,15,-20,-62,15,-62,-62,-62,15,15,23,15,23,15,23,15,23,15,23,15,23,15,23,15,23,-51,23,15,23,15,23,15,23,15,23,15,23,15,23,15,23,15,-54,15,23,-45,15,23,23,15,-48,15,23,-62,-21,-22,-23,-24,-25,-26,-27,-28,15,-57,-60,-58,-59,-61,-62,15,]),'POWER':([0,1,2,3,4,6,8,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,39,40,41,42,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,85,86,87,88,89,91,92,94,95,96,97,104,105,106,107,108,109,110,111,112,120,123,130,131,132,133,134,],[-62,16,24,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,24,16,24,16,-17,24,16,-20,-62,16,-62,-62,-62,16,16,24,16,24,16,24,16,24,16,24,16,24,16,24,16,24,-51,24,16,24,16,24,16,24,16,24,16,24,16,24,16,24,16,-54,16,24,-45,16,24,24,16,-48,16,24,-62,-21,-22,-23,-24,-25,-26,-27,-28,16,-57,-60,-58,-59,-61,-62,16,]),'PLUS':([0,1,2,3,4,6,8,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,39,40,41,42,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,85,86,87,88,89,91,92,94,95,96,97,104,105,106,107,108,109,110,111,112,120,123,130,131,132,133,134,],[-62,17,25,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,25,17,25,17,-17,25,17,-20,-62,17,-62,-62,-62,17,17,25,17,25,17,25,17,25,17,25,17,25,17,25,17,25,-51,25,17,25,17,25,17,25,17,25,17,25,17,25,17,25,17,-54,17,25,-45,17,25,25,17,-48,17,25,-62,-21,-22,-23,-24,-25,-26,-27,-28,17,-57,-60,-58,-59,-61,-62,17,]),'MINUS':([0,1,2,3,4,6,8,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,39,40,41,42,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,85,86,87,88,89,91,92,94,95,96,97,104,105,106,107,108,109,110,111,112,120,123,130,131,132,133,134,],[-62,18,26,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,26,18,26,18,-17,26,18,-20,-62,18,-62,-62,-62,18,18,26,18,26,18,26,18,26,18,26,18,26,18,26,18,26,-51,26,18,26,18,26,18,26,18,26,18,26,18,26,18,26,18,-54,18,26,-45,18,26,26,18,-48,18,26,-62,-21,-22,-23,-24,-25,-26,-27,-28,18,-57,-60,-58,-59,-61,-62,18,]),'TIMES':([0,1,2,3,4,6,8,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,39,40,41,42,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,85,86,87,88,89,91,92,94,95,96,97,104,105,106,107,108,109,110,111,112,120,123,130,131,132,133,134,],[-62,19,27,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,27,19,27,19,-17,27,19,-20,-62,19,-62,-62,-62,19,19,27,19,27,19,27,19,27,19,27,19,27,19,27,19,27,-51,27,19,27,19,27,19,27,19,27,19,27,19,27,19,27,19,-54,19,27,-45,19,27,27,19,-48,19,27,-62,-21,-22,-23,-24,-25,-26,-27,-28,19,-57,-60,-58,-59,-61,-62,19,]),'DIVIDE':([0,1,2,3,4,6,8,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,39,40,41,42,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,85,86,87,88,89,91,92,94,95,96,97,104,105,106,107,108,109,110,111,112,120,123,130,131,132,133,134,],[-62,20,28,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,28,20,28,20,-17,28,20,-20,-62,20,-62,-62,-62,20,20,28,20,28,20,28,20,28,20,28,20,28,20,28,20,28,-51,28,20,28,20,28,20,28,20,28,20,28,20,28,20,28,20,-54,20,28,-45,20,28,28,20,-48,20,28,-62,-21,-22,-23,-24,-25,-26,-27,-28,20,-57,-60,-58,-59,-61,-62,20,]),'DOUBLE_EQUALS':([0,1,2,3,4,6,8,11,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,39,40,41,42,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,85,86,87,88,89,90,91,92,94,95,96,97,104,105,106,107,108,109,110,111,112,120,123,130,131,132,133,134,],[-62,21,29,-62,-62,-62,-62,43,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,29,21,29,21,-17,29,21,-20,-62,21,-62,-62,-62,21,21,29,21,29,21,29,21,29,21,29,21,29,21,29,21,29,43,29,21,29,21,29,21,29,21,29,21,29,21,29,21,29,21,43,21,29,-45,21,29,43,29,21,43,21,29,-62,-21,-22,-23,-24,-25,-26,-27,-28,21,-57,-60,-58,-59,-61,-62,21,]),'$end':([0,1,3,4,6,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,43,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,87,94,95,96,97,104,105,106,107,108,109,110,111,112,120,123,130,131,132,133,134,],[-62,0,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-9,-10,-15,-16,-17,-18,-19,-20,-62,-4,-3,-8,-7,-14,-13,-32,-30,-36,-34,-40,-38,-44,-42,-46,-49,-51,-1,-2,-5,-6,-11,-12,-29,-31,-33,-35,-37,-39,-41,-43,-47,-50,-54,-45,-48,-52,-53,-62,-21,-22,-23,-24,-25,-26,-27,-28,-55,-57,-60,-58,-59,-61,-62,-56,]),'RPAREN':([3,4,6,8,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,39,40,41,42,43,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,85,86,87,88,89,90,91,92,93,94,95,96,97,104,105,106,107,108,109,110,111,112,114,117,120,123,125,126,127,128,130,131,132,133,134,],[-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-9,-10,-15,-16,-17,-18,-19,-20,-62,87,-62,-62,-62,-4,-3,-8,-7,-14,-13,-32,-30,-36,-34,-40,-38,-44,-42,-46,-49,-51,-1,-2,-5,-6,-11,-12,-29,-31,-33,-35,-37,-39,-41,-43,-47,-50,-54,104,105,-45,106,107,108,109,110,111,-48,-52,-53,-62,-21,-22,-23,-24,-25,-26,-27,-28,-55,120,123,-57,-60,129,130,131,132,-58,-59,-61,-62,-56,]),'COLON':([3,4,6,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,87,94,95,96,97,104,105,106,107,108,109,110,111,112,120,123,129,130,131,132,133,134,],[-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-9,-10,-15,-16,-17,-18,-19,-20,-62,97,-4,-3,-8,-7,-14,-13,-32,-30,-36,-34,-40,-38,-44,-42,-46,-49,-51,-1,-2,-5,-6,-11,-12,-29,-31,-33,-35,-37,-39,-41,-43,-47,-50,-54,-45,-48,-52,-53,-62,-21,-22,-23,-24,-25,-26,-27,-28,-55,-57,-60,133,-58,-59,-61,-62,-56,]),'EQUALS':([5,34,38,93,],[35,35,35,35,]),'ARRAY':([35,],[80,]),'NP_ADD':([35,],[81,]),'NP_SUBTRACT':([35,],[82,]),'NP_SUM':([35,],[83,]),'NP_DOT_PRODUCT':([35,],[84,]),'IN':([45,],[98,]),'RANGE':([98,],[113,]),'LIST':([99,],[114,]),'COMMA':([115,116,118,],[121,122,124,]),}\n_lr_action = {}\nfor _k, _v in _lr_action_items.items():\n   for _x,_y in zip(_v[0],_v[1]):\n      if not _x in _lr_action:  _lr_action[_x] = {}\n      _lr_action[_x][_k] = _y\ndel _lr_action_items\n_lr_goto_items = {'statement':([0,3,4,6,8,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,39,41,42,43,97,133,],[1,31,33,37,40,44,46,48,50,52,54,56,58,60,64,66,68,70,72,74,76,78,85,88,92,95,112,134,]),}",
        "detail": "parsetab",
        "documentation": {}
    },
    {
        "label": "_lr_signature",
        "kind": 5,
        "importPath": "parsetab",
        "description": "parsetab",
        "peekOfCode": "_lr_signature = 'AND ARRAY BREAK COLON COMMA COMMENT DECREMENT DEF DIVIDE DOUBLE_EQUALS ELIF ELSE EQUALS FALSE FOR IF IN INCREMENT LIST LPAREN MINUS NONE NOT NP_ABS NP_ADD NP_COS NP_DOT_PRODUCT NP_EXP NP_LOG NP_LOG10 NP_POWER NP_SIGN NP_SIN NP_SQRT NP_SUBTRACT NP_SUM NUMBER OR PLUS POWER PRINT RANGE RETURN RPAREN SET_UP SET_UP_HOST SPACE STRING TIMES TRUE VARIABLE WHILEstatement : NUMBER AND NUMBER \\n                     | NUMBER AND statement\\n                     | statement AND NUMBER\\n                     | statement AND statementstatement : NUMBER OR NUMBER \\n                     | NUMBER OR statement\\n                     | statement OR NUMBER\\n                     | statement OR statementstatement : NOT NUMBER \\n                     | NOT statementstatement : NUMBER POWER NUMBER \\n                     | NUMBER POWER statement\\n                     | statement POWER NUMBER\\n                     | statement POWER statementstatement : INCREMENT NUMBER \\n                     | INCREMENT statement\\n                     | INCREMENT VARIABLEstatement : DECREMENT NUMBER \\n                     | DECREMENT statement\\n                     | DECREMENT VARIABLEstatement : NP_SIN LPAREN statement RPAREN\\n                     | NP_SIN LPAREN NUMBER RPARENstatement : NP_COS LPAREN statement RPAREN\\n                     | NP_COS LPAREN NUMBER RPARENstatement : PRINT LPAREN STRING RPAREN \\n                     | PRINT LPAREN NUMBER RPAREN\\n                     | PRINT LPAREN statement RPAREN\\n                     | PRINT LPAREN VARIABLE RPARENstatement : NUMBER PLUS NUMBER \\n                     | statement PLUS NUMBER\\n                     | NUMBER PLUS statement\\n                     | statement PLUS statementstatement : NUMBER MINUS NUMBER \\n                     | statement MINUS NUMBER\\n                     | NUMBER MINUS statement\\n                     | statement MINUS statementstatement : NUMBER TIMES NUMBER \\n                     | statement TIMES NUMBER\\n                     | NUMBER TIMES statement\\n                     | statement TIMES statementstatement : NUMBER DIVIDE NUMBER\\n                     | statement DIVIDE NUMBER\\n                     | NUMBER DIVIDE statement\\n                     | statement DIVIDE statementstatement : LPAREN statement RPARENstatement : statement DOUBLE_EQUALS statement\\n                     | NUMBER DOUBLE_EQUALS NUMBER\\n                     | STRING DOUBLE_EQUALS STRING\\n                     | statement DOUBLE_EQUALS NUMBER\\n                     | NUMBER DOUBLE_EQUALS statement\\n                     | statement DOUBLE_EQUALS STRING\\n                     | STRING DOUBLE_EQUALS statement\\n                     | STRING DOUBLE_EQUALS NUMBER\\n                     | NUMBER DOUBLE_EQUALS STRINGstatement : IF statement COLON statementstatement : FOR VARIABLE IN RANGE LPAREN NUMBER RPAREN COLON statementstatement : VARIABLE EQUALS ARRAY LPAREN LIST RPARENstatement : VARIABLE EQUALS NP_ADD LPAREN VARIABLE COMMA VARIABLE RPARENstatement : VARIABLE EQUALS NP_SUBTRACT LPAREN VARIABLE COMMA VARIABLE RPARENstatement : VARIABLE EQUALS NP_SUM LPAREN VARIABLE RPARENstatement : VARIABLE EQUALS NP_DOT_PRODUCT LPAREN VARIABLE COMMA VARIABLE RPARENstatement : '\n_lr_action_items = {'NUMBER':([0,3,4,6,8,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,39,41,42,43,97,119,133,],[2,30,32,36,2,2,47,49,51,53,55,57,59,61,63,65,67,69,71,73,75,77,86,89,91,96,2,125,2,]),'NOT':([0,3,4,6,8,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,39,41,42,43,97,133,],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'INCREMENT':([0,3,4,6,8,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,39,41,42,43,97,133,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'DECREMENT':([0,3,4,6,8,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,39,41,42,43,97,133,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'NP_SIN':([0,3,4,6,8,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,39,41,42,43,97,133,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'NP_COS':([0,3,4,6,8,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,39,41,42,43,97,133,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'PRINT':([0,3,4,6,8,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,39,41,42,43,97,133,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'LPAREN':([0,3,4,6,7,8,9,10,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,39,41,42,43,80,81,82,83,84,97,113,133,],[8,8,8,8,39,8,41,42,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,99,100,101,102,103,8,119,8,]),'STRING':([0,3,4,6,8,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,39,41,42,43,97,133,],[11,11,11,11,11,11,11,11,11,11,11,11,11,62,11,11,11,11,11,11,11,79,11,11,90,94,11,11,]),'IF':([0,3,4,6,8,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,39,41,42,43,97,133,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'FOR':([0,3,4,6,8,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,39,41,42,43,97,133,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'VARIABLE':([0,3,4,6,8,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,39,41,42,43,97,100,101,102,103,121,122,124,133,],[5,5,34,38,5,5,45,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,93,5,5,115,116,117,118,126,127,128,5,]),'AND':([0,1,2,3,4,6,8,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,39,40,41,42,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,85,86,87,88,89,91,92,94,95,96,97,104,105,106,107,108,109,110,111,112,120,123,130,131,132,133,134,],[-62,14,22,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,22,14,22,14,-17,22,14,-20,-62,14,-62,-62,-62,14,14,22,14,22,14,22,14,22,14,22,14,22,14,22,14,22,-51,22,14,22,14,22,14,22,14,22,14,22,14,22,14,22,14,-54,14,22,-45,14,22,22,14,-48,14,22,-62,-21,-22,-23,-24,-25,-26,-27,-28,14,-57,-60,-58,-59,-61,-62,14,]),'OR':([0,1,2,3,4,6,8,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,39,40,41,42,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,85,86,87,88,89,91,92,94,95,96,97,104,105,106,107,108,109,110,111,112,120,123,130,131,132,133,134,],[-62,15,23,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,23,15,23,15,-17,23,15,-20,-62,15,-62,-62,-62,15,15,23,15,23,15,23,15,23,15,23,15,23,15,23,15,23,-51,23,15,23,15,23,15,23,15,23,15,23,15,23,15,23,15,-54,15,23,-45,15,23,23,15,-48,15,23,-62,-21,-22,-23,-24,-25,-26,-27,-28,15,-57,-60,-58,-59,-61,-62,15,]),'POWER':([0,1,2,3,4,6,8,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,39,40,41,42,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,85,86,87,88,89,91,92,94,95,96,97,104,105,106,107,108,109,110,111,112,120,123,130,131,132,133,134,],[-62,16,24,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,24,16,24,16,-17,24,16,-20,-62,16,-62,-62,-62,16,16,24,16,24,16,24,16,24,16,24,16,24,16,24,16,24,-51,24,16,24,16,24,16,24,16,24,16,24,16,24,16,24,16,-54,16,24,-45,16,24,24,16,-48,16,24,-62,-21,-22,-23,-24,-25,-26,-27,-28,16,-57,-60,-58,-59,-61,-62,16,]),'PLUS':([0,1,2,3,4,6,8,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,39,40,41,42,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,85,86,87,88,89,91,92,94,95,96,97,104,105,106,107,108,109,110,111,112,120,123,130,131,132,133,134,],[-62,17,25,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,25,17,25,17,-17,25,17,-20,-62,17,-62,-62,-62,17,17,25,17,25,17,25,17,25,17,25,17,25,17,25,17,25,-51,25,17,25,17,25,17,25,17,25,17,25,17,25,17,25,17,-54,17,25,-45,17,25,25,17,-48,17,25,-62,-21,-22,-23,-24,-25,-26,-27,-28,17,-57,-60,-58,-59,-61,-62,17,]),'MINUS':([0,1,2,3,4,6,8,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,39,40,41,42,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,85,86,87,88,89,91,92,94,95,96,97,104,105,106,107,108,109,110,111,112,120,123,130,131,132,133,134,],[-62,18,26,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,26,18,26,18,-17,26,18,-20,-62,18,-62,-62,-62,18,18,26,18,26,18,26,18,26,18,26,18,26,18,26,18,26,-51,26,18,26,18,26,18,26,18,26,18,26,18,26,18,26,18,-54,18,26,-45,18,26,26,18,-48,18,26,-62,-21,-22,-23,-24,-25,-26,-27,-28,18,-57,-60,-58,-59,-61,-62,18,]),'TIMES':([0,1,2,3,4,6,8,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,39,40,41,42,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,85,86,87,88,89,91,92,94,95,96,97,104,105,106,107,108,109,110,111,112,120,123,130,131,132,133,134,],[-62,19,27,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,27,19,27,19,-17,27,19,-20,-62,19,-62,-62,-62,19,19,27,19,27,19,27,19,27,19,27,19,27,19,27,19,27,-51,27,19,27,19,27,19,27,19,27,19,27,19,27,19,27,19,-54,19,27,-45,19,27,27,19,-48,19,27,-62,-21,-22,-23,-24,-25,-26,-27,-28,19,-57,-60,-58,-59,-61,-62,19,]),'DIVIDE':([0,1,2,3,4,6,8,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,39,40,41,42,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,85,86,87,88,89,91,92,94,95,96,97,104,105,106,107,108,109,110,111,112,120,123,130,131,132,133,134,],[-62,20,28,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,28,20,28,20,-17,28,20,-20,-62,20,-62,-62,-62,20,20,28,20,28,20,28,20,28,20,28,20,28,20,28,20,28,-51,28,20,28,20,28,20,28,20,28,20,28,20,28,20,28,20,-54,20,28,-45,20,28,28,20,-48,20,28,-62,-21,-22,-23,-24,-25,-26,-27,-28,20,-57,-60,-58,-59,-61,-62,20,]),'DOUBLE_EQUALS':([0,1,2,3,4,6,8,11,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,39,40,41,42,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,85,86,87,88,89,90,91,92,94,95,96,97,104,105,106,107,108,109,110,111,112,120,123,130,131,132,133,134,],[-62,21,29,-62,-62,-62,-62,43,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,29,21,29,21,-17,29,21,-20,-62,21,-62,-62,-62,21,21,29,21,29,21,29,21,29,21,29,21,29,21,29,21,29,43,29,21,29,21,29,21,29,21,29,21,29,21,29,21,29,21,43,21,29,-45,21,29,43,29,21,43,21,29,-62,-21,-22,-23,-24,-25,-26,-27,-28,21,-57,-60,-58,-59,-61,-62,21,]),'$end':([0,1,3,4,6,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,43,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,87,94,95,96,97,104,105,106,107,108,109,110,111,112,120,123,130,131,132,133,134,],[-62,0,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-9,-10,-15,-16,-17,-18,-19,-20,-62,-4,-3,-8,-7,-14,-13,-32,-30,-36,-34,-40,-38,-44,-42,-46,-49,-51,-1,-2,-5,-6,-11,-12,-29,-31,-33,-35,-37,-39,-41,-43,-47,-50,-54,-45,-48,-52,-53,-62,-21,-22,-23,-24,-25,-26,-27,-28,-55,-57,-60,-58,-59,-61,-62,-56,]),'RPAREN':([3,4,6,8,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,39,40,41,42,43,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,85,86,87,88,89,90,91,92,93,94,95,96,97,104,105,106,107,108,109,110,111,112,114,117,120,123,125,126,127,128,130,131,132,133,134,],[-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-9,-10,-15,-16,-17,-18,-19,-20,-62,87,-62,-62,-62,-4,-3,-8,-7,-14,-13,-32,-30,-36,-34,-40,-38,-44,-42,-46,-49,-51,-1,-2,-5,-6,-11,-12,-29,-31,-33,-35,-37,-39,-41,-43,-47,-50,-54,104,105,-45,106,107,108,109,110,111,-48,-52,-53,-62,-21,-22,-23,-24,-25,-26,-27,-28,-55,120,123,-57,-60,129,130,131,132,-58,-59,-61,-62,-56,]),'COLON':([3,4,6,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,87,94,95,96,97,104,105,106,107,108,109,110,111,112,120,123,129,130,131,132,133,134,],[-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-9,-10,-15,-16,-17,-18,-19,-20,-62,97,-4,-3,-8,-7,-14,-13,-32,-30,-36,-34,-40,-38,-44,-42,-46,-49,-51,-1,-2,-5,-6,-11,-12,-29,-31,-33,-35,-37,-39,-41,-43,-47,-50,-54,-45,-48,-52,-53,-62,-21,-22,-23,-24,-25,-26,-27,-28,-55,-57,-60,133,-58,-59,-61,-62,-56,]),'EQUALS':([5,34,38,93,],[35,35,35,35,]),'ARRAY':([35,],[80,]),'NP_ADD':([35,],[81,]),'NP_SUBTRACT':([35,],[82,]),'NP_SUM':([35,],[83,]),'NP_DOT_PRODUCT':([35,],[84,]),'IN':([45,],[98,]),'RANGE':([98,],[113,]),'LIST':([99,],[114,]),'COMMA':([115,116,118,],[121,122,124,]),}\n_lr_action = {}\nfor _k, _v in _lr_action_items.items():\n   for _x,_y in zip(_v[0],_v[1]):\n      if not _x in _lr_action:  _lr_action[_x] = {}\n      _lr_action[_x][_k] = _y\ndel _lr_action_items\n_lr_goto_items = {'statement':([0,3,4,6,8,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,39,41,42,43,97,133,],[1,31,33,37,40,44,46,48,50,52,54,56,58,60,64,66,68,70,72,74,76,78,85,88,92,95,112,134,]),}\n_lr_goto = {}",
        "detail": "parsetab",
        "documentation": {}
    },
    {
        "label": "_lr_action_items",
        "kind": 5,
        "importPath": "parsetab",
        "description": "parsetab",
        "peekOfCode": "_lr_action_items = {'NUMBER':([0,3,4,6,8,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,39,41,42,43,97,119,133,],[2,30,32,36,2,2,47,49,51,53,55,57,59,61,63,65,67,69,71,73,75,77,86,89,91,96,2,125,2,]),'NOT':([0,3,4,6,8,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,39,41,42,43,97,133,],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'INCREMENT':([0,3,4,6,8,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,39,41,42,43,97,133,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'DECREMENT':([0,3,4,6,8,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,39,41,42,43,97,133,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'NP_SIN':([0,3,4,6,8,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,39,41,42,43,97,133,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'NP_COS':([0,3,4,6,8,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,39,41,42,43,97,133,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'PRINT':([0,3,4,6,8,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,39,41,42,43,97,133,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'LPAREN':([0,3,4,6,7,8,9,10,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,39,41,42,43,80,81,82,83,84,97,113,133,],[8,8,8,8,39,8,41,42,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,99,100,101,102,103,8,119,8,]),'STRING':([0,3,4,6,8,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,39,41,42,43,97,133,],[11,11,11,11,11,11,11,11,11,11,11,11,11,62,11,11,11,11,11,11,11,79,11,11,90,94,11,11,]),'IF':([0,3,4,6,8,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,39,41,42,43,97,133,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'FOR':([0,3,4,6,8,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,39,41,42,43,97,133,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'VARIABLE':([0,3,4,6,8,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,39,41,42,43,97,100,101,102,103,121,122,124,133,],[5,5,34,38,5,5,45,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,93,5,5,115,116,117,118,126,127,128,5,]),'AND':([0,1,2,3,4,6,8,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,39,40,41,42,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,85,86,87,88,89,91,92,94,95,96,97,104,105,106,107,108,109,110,111,112,120,123,130,131,132,133,134,],[-62,14,22,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,22,14,22,14,-17,22,14,-20,-62,14,-62,-62,-62,14,14,22,14,22,14,22,14,22,14,22,14,22,14,22,14,22,-51,22,14,22,14,22,14,22,14,22,14,22,14,22,14,22,14,-54,14,22,-45,14,22,22,14,-48,14,22,-62,-21,-22,-23,-24,-25,-26,-27,-28,14,-57,-60,-58,-59,-61,-62,14,]),'OR':([0,1,2,3,4,6,8,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,39,40,41,42,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,85,86,87,88,89,91,92,94,95,96,97,104,105,106,107,108,109,110,111,112,120,123,130,131,132,133,134,],[-62,15,23,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,23,15,23,15,-17,23,15,-20,-62,15,-62,-62,-62,15,15,23,15,23,15,23,15,23,15,23,15,23,15,23,15,23,-51,23,15,23,15,23,15,23,15,23,15,23,15,23,15,23,15,-54,15,23,-45,15,23,23,15,-48,15,23,-62,-21,-22,-23,-24,-25,-26,-27,-28,15,-57,-60,-58,-59,-61,-62,15,]),'POWER':([0,1,2,3,4,6,8,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,39,40,41,42,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,85,86,87,88,89,91,92,94,95,96,97,104,105,106,107,108,109,110,111,112,120,123,130,131,132,133,134,],[-62,16,24,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,24,16,24,16,-17,24,16,-20,-62,16,-62,-62,-62,16,16,24,16,24,16,24,16,24,16,24,16,24,16,24,16,24,-51,24,16,24,16,24,16,24,16,24,16,24,16,24,16,24,16,-54,16,24,-45,16,24,24,16,-48,16,24,-62,-21,-22,-23,-24,-25,-26,-27,-28,16,-57,-60,-58,-59,-61,-62,16,]),'PLUS':([0,1,2,3,4,6,8,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,39,40,41,42,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,85,86,87,88,89,91,92,94,95,96,97,104,105,106,107,108,109,110,111,112,120,123,130,131,132,133,134,],[-62,17,25,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,25,17,25,17,-17,25,17,-20,-62,17,-62,-62,-62,17,17,25,17,25,17,25,17,25,17,25,17,25,17,25,17,25,-51,25,17,25,17,25,17,25,17,25,17,25,17,25,17,25,17,-54,17,25,-45,17,25,25,17,-48,17,25,-62,-21,-22,-23,-24,-25,-26,-27,-28,17,-57,-60,-58,-59,-61,-62,17,]),'MINUS':([0,1,2,3,4,6,8,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,39,40,41,42,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,85,86,87,88,89,91,92,94,95,96,97,104,105,106,107,108,109,110,111,112,120,123,130,131,132,133,134,],[-62,18,26,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,26,18,26,18,-17,26,18,-20,-62,18,-62,-62,-62,18,18,26,18,26,18,26,18,26,18,26,18,26,18,26,18,26,-51,26,18,26,18,26,18,26,18,26,18,26,18,26,18,26,18,-54,18,26,-45,18,26,26,18,-48,18,26,-62,-21,-22,-23,-24,-25,-26,-27,-28,18,-57,-60,-58,-59,-61,-62,18,]),'TIMES':([0,1,2,3,4,6,8,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,39,40,41,42,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,85,86,87,88,89,91,92,94,95,96,97,104,105,106,107,108,109,110,111,112,120,123,130,131,132,133,134,],[-62,19,27,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,27,19,27,19,-17,27,19,-20,-62,19,-62,-62,-62,19,19,27,19,27,19,27,19,27,19,27,19,27,19,27,19,27,-51,27,19,27,19,27,19,27,19,27,19,27,19,27,19,27,19,-54,19,27,-45,19,27,27,19,-48,19,27,-62,-21,-22,-23,-24,-25,-26,-27,-28,19,-57,-60,-58,-59,-61,-62,19,]),'DIVIDE':([0,1,2,3,4,6,8,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,39,40,41,42,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,85,86,87,88,89,91,92,94,95,96,97,104,105,106,107,108,109,110,111,112,120,123,130,131,132,133,134,],[-62,20,28,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,28,20,28,20,-17,28,20,-20,-62,20,-62,-62,-62,20,20,28,20,28,20,28,20,28,20,28,20,28,20,28,20,28,-51,28,20,28,20,28,20,28,20,28,20,28,20,28,20,28,20,-54,20,28,-45,20,28,28,20,-48,20,28,-62,-21,-22,-23,-24,-25,-26,-27,-28,20,-57,-60,-58,-59,-61,-62,20,]),'DOUBLE_EQUALS':([0,1,2,3,4,6,8,11,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,39,40,41,42,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,85,86,87,88,89,90,91,92,94,95,96,97,104,105,106,107,108,109,110,111,112,120,123,130,131,132,133,134,],[-62,21,29,-62,-62,-62,-62,43,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,29,21,29,21,-17,29,21,-20,-62,21,-62,-62,-62,21,21,29,21,29,21,29,21,29,21,29,21,29,21,29,21,29,43,29,21,29,21,29,21,29,21,29,21,29,21,29,21,29,21,43,21,29,-45,21,29,43,29,21,43,21,29,-62,-21,-22,-23,-24,-25,-26,-27,-28,21,-57,-60,-58,-59,-61,-62,21,]),'$end':([0,1,3,4,6,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,43,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,87,94,95,96,97,104,105,106,107,108,109,110,111,112,120,123,130,131,132,133,134,],[-62,0,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-9,-10,-15,-16,-17,-18,-19,-20,-62,-4,-3,-8,-7,-14,-13,-32,-30,-36,-34,-40,-38,-44,-42,-46,-49,-51,-1,-2,-5,-6,-11,-12,-29,-31,-33,-35,-37,-39,-41,-43,-47,-50,-54,-45,-48,-52,-53,-62,-21,-22,-23,-24,-25,-26,-27,-28,-55,-57,-60,-58,-59,-61,-62,-56,]),'RPAREN':([3,4,6,8,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,39,40,41,42,43,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,85,86,87,88,89,90,91,92,93,94,95,96,97,104,105,106,107,108,109,110,111,112,114,117,120,123,125,126,127,128,130,131,132,133,134,],[-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-9,-10,-15,-16,-17,-18,-19,-20,-62,87,-62,-62,-62,-4,-3,-8,-7,-14,-13,-32,-30,-36,-34,-40,-38,-44,-42,-46,-49,-51,-1,-2,-5,-6,-11,-12,-29,-31,-33,-35,-37,-39,-41,-43,-47,-50,-54,104,105,-45,106,107,108,109,110,111,-48,-52,-53,-62,-21,-22,-23,-24,-25,-26,-27,-28,-55,120,123,-57,-60,129,130,131,132,-58,-59,-61,-62,-56,]),'COLON':([3,4,6,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,87,94,95,96,97,104,105,106,107,108,109,110,111,112,120,123,129,130,131,132,133,134,],[-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-62,-9,-10,-15,-16,-17,-18,-19,-20,-62,97,-4,-3,-8,-7,-14,-13,-32,-30,-36,-34,-40,-38,-44,-42,-46,-49,-51,-1,-2,-5,-6,-11,-12,-29,-31,-33,-35,-37,-39,-41,-43,-47,-50,-54,-45,-48,-52,-53,-62,-21,-22,-23,-24,-25,-26,-27,-28,-55,-57,-60,133,-58,-59,-61,-62,-56,]),'EQUALS':([5,34,38,93,],[35,35,35,35,]),'ARRAY':([35,],[80,]),'NP_ADD':([35,],[81,]),'NP_SUBTRACT':([35,],[82,]),'NP_SUM':([35,],[83,]),'NP_DOT_PRODUCT':([35,],[84,]),'IN':([45,],[98,]),'RANGE':([98,],[113,]),'LIST':([99,],[114,]),'COMMA':([115,116,118,],[121,122,124,]),}\n_lr_action = {}\nfor _k, _v in _lr_action_items.items():\n   for _x,_y in zip(_v[0],_v[1]):\n      if not _x in _lr_action:  _lr_action[_x] = {}\n      _lr_action[_x][_k] = _y\ndel _lr_action_items\n_lr_goto_items = {'statement':([0,3,4,6,8,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,39,41,42,43,97,133,],[1,31,33,37,40,44,46,48,50,52,54,56,58,60,64,66,68,70,72,74,76,78,85,88,92,95,112,134,]),}\n_lr_goto = {}\nfor _k, _v in _lr_goto_items.items():",
        "detail": "parsetab",
        "documentation": {}
    },
    {
        "label": "_lr_action",
        "kind": 5,
        "importPath": "parsetab",
        "description": "parsetab",
        "peekOfCode": "_lr_action = {}\nfor _k, _v in _lr_action_items.items():\n   for _x,_y in zip(_v[0],_v[1]):\n      if not _x in _lr_action:  _lr_action[_x] = {}\n      _lr_action[_x][_k] = _y\ndel _lr_action_items\n_lr_goto_items = {'statement':([0,3,4,6,8,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,39,41,42,43,97,133,],[1,31,33,37,40,44,46,48,50,52,54,56,58,60,64,66,68,70,72,74,76,78,85,88,92,95,112,134,]),}\n_lr_goto = {}\nfor _k, _v in _lr_goto_items.items():\n   for _x, _y in zip(_v[0], _v[1]):",
        "detail": "parsetab",
        "documentation": {}
    },
    {
        "label": "_lr_goto_items",
        "kind": 5,
        "importPath": "parsetab",
        "description": "parsetab",
        "peekOfCode": "_lr_goto_items = {'statement':([0,3,4,6,8,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,39,41,42,43,97,133,],[1,31,33,37,40,44,46,48,50,52,54,56,58,60,64,66,68,70,72,74,76,78,85,88,92,95,112,134,]),}\n_lr_goto = {}\nfor _k, _v in _lr_goto_items.items():\n   for _x, _y in zip(_v[0], _v[1]):\n       if not _x in _lr_goto: _lr_goto[_x] = {}\n       _lr_goto[_x][_k] = _y\ndel _lr_goto_items\n_lr_productions = [\n  (\"S' -> statement\",\"S'\",1,None,None,None),\n  ('statement -> NUMBER AND NUMBER','statement',3,'p_expression_and','parsing_yacc.py',17),",
        "detail": "parsetab",
        "documentation": {}
    },
    {
        "label": "_lr_goto",
        "kind": 5,
        "importPath": "parsetab",
        "description": "parsetab",
        "peekOfCode": "_lr_goto = {}\nfor _k, _v in _lr_goto_items.items():\n   for _x, _y in zip(_v[0], _v[1]):\n       if not _x in _lr_goto: _lr_goto[_x] = {}\n       _lr_goto[_x][_k] = _y\ndel _lr_goto_items\n_lr_productions = [\n  (\"S' -> statement\",\"S'\",1,None,None,None),\n  ('statement -> NUMBER AND NUMBER','statement',3,'p_expression_and','parsing_yacc.py',17),\n  ('statement -> NUMBER AND statement','statement',3,'p_expression_and','parsing_yacc.py',18),",
        "detail": "parsetab",
        "documentation": {}
    },
    {
        "label": "_lr_productions",
        "kind": 5,
        "importPath": "parsetab",
        "description": "parsetab",
        "peekOfCode": "_lr_productions = [\n  (\"S' -> statement\",\"S'\",1,None,None,None),\n  ('statement -> NUMBER AND NUMBER','statement',3,'p_expression_and','parsing_yacc.py',17),\n  ('statement -> NUMBER AND statement','statement',3,'p_expression_and','parsing_yacc.py',18),\n  ('statement -> statement AND NUMBER','statement',3,'p_expression_and','parsing_yacc.py',19),\n  ('statement -> statement AND statement','statement',3,'p_expression_and','parsing_yacc.py',20),\n  ('statement -> NUMBER OR NUMBER','statement',3,'p_expression_or','parsing_yacc.py',29),\n  ('statement -> NUMBER OR statement','statement',3,'p_expression_or','parsing_yacc.py',30),\n  ('statement -> statement OR NUMBER','statement',3,'p_expression_or','parsing_yacc.py',31),\n  ('statement -> statement OR statement','statement',3,'p_expression_or','parsing_yacc.py',32),",
        "detail": "parsetab",
        "documentation": {}
    },
    {
        "label": "setup",
        "kind": 2,
        "importPath": "pythonTopython2",
        "description": "pythonTopython2",
        "peekOfCode": "def setup(file_name):\n    file = open(file_name + \".py\", \"a\")\n    file.write(\"import cupy\")\ndef get_var_name(var):\n    for name, value in globals().items():\n        if value is var:\n            return name\n    return var\ndef numpy_add_to_py(a, b):\n    a_name = get_var_name(a)",
        "detail": "pythonTopython2",
        "documentation": {}
    },
    {
        "label": "get_var_name",
        "kind": 2,
        "importPath": "pythonTopython2",
        "description": "pythonTopython2",
        "peekOfCode": "def get_var_name(var):\n    for name, value in globals().items():\n        if value is var:\n            return name\n    return var\ndef numpy_add_to_py(a, b):\n    a_name = get_var_name(a)\n    b_name = get_var_name(b)\n    return f\"cupy.add({a_name}, {b_name})\"\ndef numpy_subtract_to_py(a, b):",
        "detail": "pythonTopython2",
        "documentation": {}
    },
    {
        "label": "numpy_add_to_py",
        "kind": 2,
        "importPath": "pythonTopython2",
        "description": "pythonTopython2",
        "peekOfCode": "def numpy_add_to_py(a, b):\n    a_name = get_var_name(a)\n    b_name = get_var_name(b)\n    return f\"cupy.add({a_name}, {b_name})\"\ndef numpy_subtract_to_py(a, b):\n    a_name = get_var_name(a)\n    b_name = get_var_name(b)\n    return f\"cupy.subtract({a_name}, {b_name})\"\ndef numpy_sum_to_py(a):\n    a_name = get_var_name(a)",
        "detail": "pythonTopython2",
        "documentation": {}
    },
    {
        "label": "numpy_subtract_to_py",
        "kind": 2,
        "importPath": "pythonTopython2",
        "description": "pythonTopython2",
        "peekOfCode": "def numpy_subtract_to_py(a, b):\n    a_name = get_var_name(a)\n    b_name = get_var_name(b)\n    return f\"cupy.subtract({a_name}, {b_name})\"\ndef numpy_sum_to_py(a):\n    a_name = get_var_name(a)\n    return f\"cupy.sum({a_name})\"\ndef numpy_dot_to_py(a, b):\n    a_name = get_var_name(a)\n    b_name = get_var_name(b)",
        "detail": "pythonTopython2",
        "documentation": {}
    },
    {
        "label": "numpy_sum_to_py",
        "kind": 2,
        "importPath": "pythonTopython2",
        "description": "pythonTopython2",
        "peekOfCode": "def numpy_sum_to_py(a):\n    a_name = get_var_name(a)\n    return f\"cupy.sum({a_name})\"\ndef numpy_dot_to_py(a, b):\n    a_name = get_var_name(a)\n    b_name = get_var_name(b)\n    return f\"cupy.dot({a_name}, {b_name})\"\ndef array_to_py(variable_name, list_values):\n    # list_values is a string containing comma-separated values \n    # Turn list_values into a list, and each value in the list into an integer ",
        "detail": "pythonTopython2",
        "documentation": {}
    },
    {
        "label": "numpy_dot_to_py",
        "kind": 2,
        "importPath": "pythonTopython2",
        "description": "pythonTopython2",
        "peekOfCode": "def numpy_dot_to_py(a, b):\n    a_name = get_var_name(a)\n    b_name = get_var_name(b)\n    return f\"cupy.dot({a_name}, {b_name})\"\ndef array_to_py(variable_name, list_values):\n    # list_values is a string containing comma-separated values \n    # Turn list_values into a list, and each value in the list into an integer \n    values = [int(value) for value in list_values.split(',')]\n    return f\"{variable_name} = cupy.array({values})\"",
        "detail": "pythonTopython2",
        "documentation": {}
    },
    {
        "label": "array_to_py",
        "kind": 2,
        "importPath": "pythonTopython2",
        "description": "pythonTopython2",
        "peekOfCode": "def array_to_py(variable_name, list_values):\n    # list_values is a string containing comma-separated values \n    # Turn list_values into a list, and each value in the list into an integer \n    values = [int(value) for value in list_values.split(',')]\n    return f\"{variable_name} = cupy.array({values})\"",
        "detail": "pythonTopython2",
        "documentation": {}
    }
]