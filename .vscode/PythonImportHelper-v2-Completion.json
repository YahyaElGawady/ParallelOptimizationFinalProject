[
    {
        "label": "ply.lex",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ply.lex",
        "description": "ply.lex",
        "detail": "ply.lex",
        "documentation": {}
    },
    {
        "label": "inspect",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "inspect",
        "description": "inspect",
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "yacc",
        "importPath": "ply",
        "description": "ply",
        "isExtraImport": true,
        "detail": "ply",
        "documentation": {}
    },
    {
        "label": "pythonToC",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pythonToC",
        "description": "pythonToC",
        "detail": "pythonToC",
        "documentation": {}
    },
    {
        "label": "main",
        "importPath": "parsing_lex",
        "description": "parsing_lex",
        "isExtraImport": true,
        "detail": "parsing_lex",
        "documentation": {}
    },
    {
        "label": "MyLexer",
        "importPath": "parsing_lex",
        "description": "parsing_lex",
        "isExtraImport": true,
        "detail": "parsing_lex",
        "documentation": {}
    },
    {
        "label": "MyLexer",
        "kind": 6,
        "importPath": "parsing_lex",
        "description": "parsing_lex",
        "peekOfCode": "class MyLexer(object):\n    # This is the class that will build the Lexer \n    # Let's have our Lexer handle reserved keywords \n    reserved = {\n        'print': 'PRINT',\n        'if': 'IF',\n        'else': 'ELSE',\n        'elif': 'ELIF',\n        'while': 'WHILE',\n        'for': 'FOR',",
        "detail": "parsing_lex",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "parsing_lex",
        "description": "parsing_lex",
        "peekOfCode": "def main(input):\n    # Call your parsing function(s) here\n    # Let input be a string that contains the code to be parsed \n    m = MyLexer() \n    m.build() \n    m.test(input)\nif __name__ == \"__main__\":\n    main()",
        "detail": "parsing_lex",
        "documentation": {}
    },
    {
        "label": "set_up",
        "kind": 2,
        "importPath": "pythonToC",
        "description": "pythonToC",
        "peekOfCode": "def set_up(file_name):\n    file = open(file_name + \".c\", \"a\")\n    file.write(\"//%%cuda_group_save -n run.cu -g default\\n\")\n    file.write(\"#include <stdio.h>\\n\")\n    file.write('#include \"util.h\"\\n\\n')\n    file.write('#include \"help_file.c\"')\n    file.write(\"__global__\")\n    file.write(f\"void {file_name}_kernel(float * d_input, float * d_output, const int matrix_dim)\\n\"+\"{\\n\")\ndef end_kernel(file_name):\n    file = open(file_name + \".c\", \"a\")",
        "detail": "pythonToC",
        "documentation": {}
    },
    {
        "label": "end_kernel",
        "kind": 2,
        "importPath": "pythonToC",
        "description": "pythonToC",
        "peekOfCode": "def end_kernel(file_name):\n    file = open(file_name + \".c\", \"a\")\n    file.write(\"}\")\ndef set_up_main(file_name):\n    file = open(file_name + \".c\", \"a\")\n    file.write(\"__host__\\n main() {\\n\")\ndef set_arr(var, file_name):\n    file = open(file_name + \".c\", \"a\")\n    arr_string = (np.array_str(var))[6:]\n    file.write(f\"   float * h_{get_var_name(var)} = {arr_string};\\n\")",
        "detail": "pythonToC",
        "documentation": {}
    },
    {
        "label": "set_up_main",
        "kind": 2,
        "importPath": "pythonToC",
        "description": "pythonToC",
        "peekOfCode": "def set_up_main(file_name):\n    file = open(file_name + \".c\", \"a\")\n    file.write(\"__host__\\n main() {\\n\")\ndef set_arr(var, file_name):\n    file = open(file_name + \".c\", \"a\")\n    arr_string = (np.array_str(var))[6:]\n    file.write(f\"   float * h_{get_var_name(var)} = {arr_string};\\n\")\n    file.write(f\"    float *d_{get_var_name(var)};\\n\")\n    file.write(f\"   cudaMalloc(&d_{get_var_name(var)},sizeof(h_{get_var_name(var)});\\n\")\n    transfer_data(var, file_name, True)",
        "detail": "pythonToC",
        "documentation": {}
    },
    {
        "label": "set_arr",
        "kind": 2,
        "importPath": "pythonToC",
        "description": "pythonToC",
        "peekOfCode": "def set_arr(var, file_name):\n    file = open(file_name + \".c\", \"a\")\n    arr_string = (np.array_str(var))[6:]\n    file.write(f\"   float * h_{get_var_name(var)} = {arr_string};\\n\")\n    file.write(f\"    float *d_{get_var_name(var)};\\n\")\n    file.write(f\"   cudaMalloc(&d_{get_var_name(var)},sizeof(h_{get_var_name(var)});\\n\")\n    transfer_data(var, file_name, True)\ndef transfer_data(var, file_name,hToD):\n    file = open(file_name + \".c\", \"a\")\n    if hToD:",
        "detail": "pythonToC",
        "documentation": {}
    },
    {
        "label": "transfer_data",
        "kind": 2,
        "importPath": "pythonToC",
        "description": "pythonToC",
        "peekOfCode": "def transfer_data(var, file_name,hToD):\n    file = open(file_name + \".c\", \"a\")\n    if hToD:\n        file.write(f\"    cudaMemcpy(d_{get_var_name(var)}, h_{get_var_name(var)},sizeof(h_{get_var_name(var)}), cudaMemcpyHostToDevice);\\n\\n\")\n    else:\n        file.write(f\"   cudaMemcpy(h_{get_var_name(var)}, d_{get_var_name(var)}, sizeof(h_{get_var_name(var)}), cudaMemcpyDeviceToHost);\")\ndef free_data(var, file_name):\n    file = open(file_name + \".c\", \"a\")\n    file.write(f\"    cudaFree(d_{get_var_name(var)});\\n\")\n    file.write(f\"    free(h_{get_var_name(var)});\\n\")",
        "detail": "pythonToC",
        "documentation": {}
    },
    {
        "label": "free_data",
        "kind": 2,
        "importPath": "pythonToC",
        "description": "pythonToC",
        "peekOfCode": "def free_data(var, file_name):\n    file = open(file_name + \".c\", \"a\")\n    file.write(f\"    cudaFree(d_{get_var_name(var)});\\n\")\n    file.write(f\"    free(h_{get_var_name(var)});\\n\")\n#    file.write(\"}\\n\\n__host__\\n\")\n#    file.write(\"const int THREADS_PER_BLOCK = 256, BLOCKS = 3;\\n\\n\")\n# convert args to c\n# convert args from device to host\n#    file.write(file_name + \"<<<BLOCKS,THREADS_PER_BLOCK>>>(args);\\n\")\n#    file.write(\"cudaDeviceSynchronize();\\n\")",
        "detail": "pythonToC",
        "documentation": {}
    },
    {
        "label": "get_var_name",
        "kind": 2,
        "importPath": "pythonToC",
        "description": "pythonToC",
        "peekOfCode": "def get_var_name(var):\n    callers_local_vars = inspect.currentframe().f_back.f_locals.items()\n    return ([var_name for var_name, var_val in callers_local_vars if var_val is var])[0]\ndef numpy_add_to_c(a, b, result):\n    a_name = get_var_name(a)\n    b_name = get_var_name(b)\n    result_name = get_var_name(result)\n    return f\"addArraysHelper({a_name}, {b_name}, {result_name});\"\ndef numpy_sub_to_c(a, b, result):\n    a_name = get_var_name(a)",
        "detail": "pythonToC",
        "documentation": {}
    },
    {
        "label": "numpy_add_to_c",
        "kind": 2,
        "importPath": "pythonToC",
        "description": "pythonToC",
        "peekOfCode": "def numpy_add_to_c(a, b, result):\n    a_name = get_var_name(a)\n    b_name = get_var_name(b)\n    result_name = get_var_name(result)\n    return f\"addArraysHelper({a_name}, {b_name}, {result_name});\"\ndef numpy_sub_to_c(a, b, result):\n    a_name = get_var_name(a)\n    b_name = get_var_name(b)\n    result_name = get_var_name(result)\n    return f\"subtractArraysHelper({a_name}, {b_name}, {result_name});\"",
        "detail": "pythonToC",
        "documentation": {}
    },
    {
        "label": "numpy_sub_to_c",
        "kind": 2,
        "importPath": "pythonToC",
        "description": "pythonToC",
        "peekOfCode": "def numpy_sub_to_c(a, b, result):\n    a_name = get_var_name(a)\n    b_name = get_var_name(b)\n    result_name = get_var_name(result)\n    return f\"subtractArraysHelper({a_name}, {b_name}, {result_name});\"\ndef numpy_sum_to_c(a, result):\n    a_name = get_var_name(a)\n    result_name = get_var_name(result)\n    return f\"sumArraysHelper({a_name}, {result_name});\"\ndef numpy_dot_product_to_c(a, b, result):",
        "detail": "pythonToC",
        "documentation": {}
    },
    {
        "label": "numpy_sum_to_c",
        "kind": 2,
        "importPath": "pythonToC",
        "description": "pythonToC",
        "peekOfCode": "def numpy_sum_to_c(a, result):\n    a_name = get_var_name(a)\n    result_name = get_var_name(result)\n    return f\"sumArraysHelper({a_name}, {result_name});\"\ndef numpy_dot_product_to_c(a, b, result):\n    a_name = get_var_name(a)\n    b_name = get_var_name(b)\n    result_name = get_var_name(result)\n    return f\"dotArraysHelper({a_name}, {b_name}, {result_name});\"\ndef set_up_host(args, file_name, matrix_dim):",
        "detail": "pythonToC",
        "documentation": {}
    },
    {
        "label": "numpy_dot_product_to_c",
        "kind": 2,
        "importPath": "pythonToC",
        "description": "pythonToC",
        "peekOfCode": "def numpy_dot_product_to_c(a, b, result):\n    a_name = get_var_name(a)\n    b_name = get_var_name(b)\n    result_name = get_var_name(result)\n    return f\"dotArraysHelper({a_name}, {b_name}, {result_name});\"\ndef set_up_host(args, file_name, matrix_dim):\n    file = open(file_name + \".c\", \"a\")\n    file.write(\"    float *h_input, *h_output;\\n\")\n    file.write(f\"    h_input = (float*)malloc({matrix_dim} * {matrix_dim} * sizeof(float));\\n\")\n    file.write(f\"    h_output = (float*)malloc({matrix_dim} * {matrix_dim} * sizeof(float));\\n\")",
        "detail": "pythonToC",
        "documentation": {}
    },
    {
        "label": "set_up_host",
        "kind": 2,
        "importPath": "pythonToC",
        "description": "pythonToC",
        "peekOfCode": "def set_up_host(args, file_name, matrix_dim):\n    file = open(file_name + \".c\", \"a\")\n    file.write(\"    float *h_input, *h_output;\\n\")\n    file.write(f\"    h_input = (float*)malloc({matrix_dim} * {matrix_dim} * sizeof(float));\\n\")\n    file.write(f\"    h_output = (float*)malloc({matrix_dim} * {matrix_dim} * sizeof(float));\\n\")\n    file.write(\"    float *d_input, *d_output;\\n\")\n    file.write(f\"    cudaMalloc(&d_input, {matrix_dim} * {matrix_dim} * sizeof(float));\\n\")\n    file.write(f\"    cudaMalloc(&d_output, {matrix_dim} * {matrix_dim} * sizeof(float));\\n\\n\")\n    file.write(f\"    cudaMemcpy(d_input, h_input, {matrix_dim} * {matrix_dim} * sizeof(float), cudaMemcpyHostToDevice);\\n\\n\")\n    file.write(f\"    THREADS_PER_BLOCK = matrix_dim;\\n\")",
        "detail": "pythonToC",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "pythonToC",
        "description": "pythonToC",
        "peekOfCode": "def main():\n    x = 5\n    print(get_var_name(x))\n    set_up(\"hi\")\n    pass\nif __name__ == \"__main__\":\n    main()\n#helper functions\n# __device__ void addArraysHelper(float *array1, float *array2, float *result) {\n#     int N = blockDim.x * gridDim.x;",
        "detail": "pythonToC",
        "documentation": {}
    },
    {
        "label": "MyParser",
        "kind": 6,
        "importPath": "parsing_yacc",
        "description": "parsing_yacc",
        "peekOfCode": "class MyParser(object): \n    # Define the tokens that the parser will recognize \n    tokens = MyLexer.tokens\n    #handling advanced expressions:\n    #handling logical AND operator\n    def p_expression_and(self, p):\n        '''statement : statement AND statement'''\n        if self.mode == 'C':\n            output = \"%s && %s\" % (p[1], p[3])\n        else:",
        "detail": "parsing_yacc",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "parsing_yacc",
        "description": "parsing_yacc",
        "peekOfCode": "def main(input, mode):\n    # Create a parser object\n    parser = MyParser(mode)\n    # Parse the input\n    return parser.parse(input)\nif __name__ == '__main__':\n    main()",
        "detail": "parsing_yacc",
        "documentation": {}
    },
    {
        "label": "_tabversion",
        "kind": 5,
        "importPath": "parsetab",
        "description": "parsetab",
        "peekOfCode": "_tabversion = '3.10'\n_lr_method = 'LALR'\n_lr_signature = 'AND ARRAY BREAK COLON COMMA COMMENT DECREMENT DEF DIVIDE DOUBLE_EQUALS ELIF ELSE EQUALS FALSE FOR IF IN INCREMENT LIST LPAREN MINUS NONE NOT NP_ABS NP_ADD NP_COS NP_DOT_PRODUCT NP_EXP NP_LOG NP_LOG10 NP_POWER NP_SIGN NP_SIN NP_SQRT NP_SUBTRACT NP_SUM NUMBER OR PLUS POWER PRINT RANGE RETURN RPAREN SET_UP SET_UP_HOST SPACE STRING TIMES TRUE VARIABLE WHILEstatement : statement AND statementstatement : NUMBER OR NUMBER \\n                     | NUMBER OR statement\\n                     | statement OR NUMBER\\n                     | statement OR statementstatement : NOT statementstatement : statement POWER statementstatement : VARIABLE INCREMENTstatement : VARIABLE DECREMENTstatement : PRINT LPAREN STRING RPAREN \\n                     | PRINT LPAREN NUMBER RPAREN\\n                     | PRINT LPAREN statement RPARENstatement : NUMBER PLUS NUMBER \\n                     | statement PLUS NUMBER\\n                     | NUMBER PLUS statement\\n                     | statement PLUS statementstatement : NUMBER MINUS NUMBER \\n                     | statement MINUS NUMBER\\n                     | NUMBER MINUS statement\\n                     | statement MINUS statementstatement : NUMBER TIMES NUMBER \\n                     | statement TIMES NUMBER\\n                     | NUMBER TIMES statement\\n                     | statement TIMES statementstatement : NUMBER DIVIDE NUMBER\\n                     | statement DIVIDE NUMBER\\n                     | NUMBER DIVIDE statement\\n                     | statement DIVIDE statementstatement : LPAREN statement RPARENstatement : statement DOUBLE_EQUALS statement\\n                     | NUMBER DOUBLE_EQUALS NUMBER\\n                     | STRING DOUBLE_EQUALS STRING\\n                     | statement DOUBLE_EQUALS NUMBER\\n                     | NUMBER DOUBLE_EQUALS statement\\n                     | statement DOUBLE_EQUALS STRING\\n                     | STRING DOUBLE_EQUALS statement\\n                     | STRING DOUBLE_EQUALS NUMBER\\n                     | NUMBER DOUBLE_EQUALS STRINGstatement : IF statement COLON statementstatement : VARIABLE EQUALS ARRAY LPAREN LIST RPARENstatement : VARIABLE EQUALS NP_ADD LPAREN VARIABLE COMMA VARIABLE RPARENstatement : VARIABLE EQUALS NP_SUBTRACT LPAREN VARIABLE COMMA VARIABLE RPARENstatement : VARIABLE EQUALS NP_SUM LPAREN VARIABLE RPARENstatement : VARIABLE EQUALS NP_DOT_PRODUCT LPAREN VARIABLE COMMA VARIABLE RPAREN'\n_lr_action_items = {'NUMBER':([0,3,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,27,29,71,],[2,2,2,2,2,33,2,36,38,40,42,44,46,48,50,52,54,56,65,70,2,]),'NOT':([0,3,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,27,29,71,],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'VARIABLE':([0,3,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,27,29,71,73,74,75,76,87,88,90,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,82,83,84,85,91,92,93,]),'PRINT':([0,3,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,27,29,71,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'LPAREN':([0,3,5,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,27,29,59,60,61,62,63,71,],[6,6,27,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,72,73,74,75,76,6,]),'STRING':([0,3,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,27,29,71,],[7,7,7,7,7,7,7,7,7,7,7,45,7,7,7,7,7,58,64,68,7,]),'IF':([0,3,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,27,29,71,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'$end':([1,23,24,25,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,67,68,69,70,77,78,79,80,86,89,94,95,96,],[0,-6,-8,-9,-1,-5,-4,-7,-16,-14,-20,-18,-24,-22,-28,-26,-30,-33,-35,-2,-3,-13,-15,-17,-19,-21,-23,-25,-27,-31,-34,-38,-29,-32,-36,-37,-10,-11,-12,-39,-40,-43,-41,-42,-44,]),'AND':([1,23,24,25,28,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,66,67,68,69,70,77,78,79,80,86,89,94,95,96,],[9,9,-8,-9,9,9,9,9,-4,9,9,-14,9,-18,9,-22,9,-26,9,-33,-35,-2,9,-13,9,-17,9,-21,9,-25,9,-31,9,-38,9,-29,-32,9,-37,-10,-11,-12,9,-40,-43,-41,-42,-44,]),'OR':([1,2,23,24,25,28,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,65,66,67,68,69,70,77,78,79,80,86,89,94,95,96,],[10,17,10,-8,-9,10,10,10,10,17,10,10,17,10,17,10,17,10,17,10,17,-35,17,10,17,10,17,10,17,10,17,10,17,10,-38,17,10,-29,-32,10,17,-10,-11,-12,10,-40,-43,-41,-42,-44,]),'POWER':([1,23,24,25,28,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,66,67,68,69,70,77,78,79,80,86,89,94,95,96,],[11,11,-8,-9,11,11,11,11,-4,11,11,-14,11,-18,11,-22,11,-26,11,-33,-35,-2,11,-13,11,-17,11,-21,11,-25,11,-31,11,-38,11,-29,-32,11,-37,-10,-11,-12,11,-40,-43,-41,-42,-44,]),'PLUS':([1,2,23,24,25,28,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,65,66,67,68,69,70,77,78,79,80,86,89,94,95,96,],[12,18,12,-8,-9,12,12,12,12,18,12,12,18,12,18,12,18,12,18,12,18,-35,18,12,18,12,18,12,18,12,18,12,18,12,-38,18,12,-29,-32,12,18,-10,-11,-12,12,-40,-43,-41,-42,-44,]),'MINUS':([1,2,23,24,25,28,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,65,66,67,68,69,70,77,78,79,80,86,89,94,95,96,],[13,19,13,-8,-9,13,13,13,13,19,13,13,19,13,19,13,19,13,19,13,19,-35,19,13,19,13,19,13,19,13,19,13,19,13,-38,19,13,-29,-32,13,19,-10,-11,-12,13,-40,-43,-41,-42,-44,]),'TIMES':([1,2,23,24,25,28,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,65,66,67,68,69,70,77,78,79,80,86,89,94,95,96,],[14,20,14,-8,-9,14,14,14,14,20,14,14,20,14,20,14,20,14,20,14,20,-35,20,14,20,14,20,14,20,14,20,14,20,14,-38,20,14,-29,-32,14,20,-10,-11,-12,14,-40,-43,-41,-42,-44,]),'DIVIDE':([1,2,23,24,25,28,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,65,66,67,68,69,70,77,78,79,80,86,89,94,95,96,],[15,21,15,-8,-9,15,15,15,15,21,15,15,21,15,21,15,21,15,21,15,21,-35,21,15,21,15,21,15,21,15,21,15,21,15,-38,21,15,-29,-32,15,21,-10,-11,-12,15,-40,-43,-41,-42,-44,]),'DOUBLE_EQUALS':([1,2,7,23,24,25,28,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,64,65,66,67,68,69,70,77,78,79,80,86,89,94,95,96,],[16,22,29,16,-8,-9,16,16,16,16,22,16,16,22,16,22,16,22,16,22,16,22,29,22,16,22,16,22,16,22,16,22,16,22,16,29,29,22,16,-29,29,16,22,-10,-11,-12,16,-40,-43,-41,-42,-44,]),'INCREMENT':([4,],[24,]),'DECREMENT':([4,],[25,]),'EQUALS':([4,],[26,]),'RPAREN':([23,24,25,28,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,64,65,66,67,68,69,70,77,78,79,80,81,84,86,89,91,92,93,94,95,96,],[-6,-8,-9,67,-1,-5,-4,-7,-16,-14,-20,-18,-24,-22,-28,-26,-30,-33,-35,-2,-3,-13,-15,-17,-19,-21,-23,-25,-27,-31,-34,-38,77,78,79,-29,-32,-36,-37,-10,-11,-12,-39,86,89,-40,-43,94,95,96,-41,-42,-44,]),'COLON':([23,24,25,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,67,68,69,70,77,78,79,80,86,89,94,95,96,],[-6,-8,-9,71,-1,-5,-4,-7,-16,-14,-20,-18,-24,-22,-28,-26,-30,-33,-35,-2,-3,-13,-15,-17,-19,-21,-23,-25,-27,-31,-34,-38,-29,-32,-36,-37,-10,-11,-12,-39,-40,-43,-41,-42,-44,]),'ARRAY':([26,],[59,]),'NP_ADD':([26,],[60,]),'NP_SUBTRACT':([26,],[61,]),'NP_SUM':([26,],[62,]),'NP_DOT_PRODUCT':([26,],[63,]),'LIST':([72,],[81,]),'COMMA':([82,83,85,],[87,88,90,]),}\n_lr_action = {}\nfor _k, _v in _lr_action_items.items():\n   for _x,_y in zip(_v[0],_v[1]):\n      if not _x in _lr_action:  _lr_action[_x] = {}\n      _lr_action[_x][_k] = _y\ndel _lr_action_items",
        "detail": "parsetab",
        "documentation": {}
    },
    {
        "label": "_lr_method",
        "kind": 5,
        "importPath": "parsetab",
        "description": "parsetab",
        "peekOfCode": "_lr_method = 'LALR'\n_lr_signature = 'AND ARRAY BREAK COLON COMMA COMMENT DECREMENT DEF DIVIDE DOUBLE_EQUALS ELIF ELSE EQUALS FALSE FOR IF IN INCREMENT LIST LPAREN MINUS NONE NOT NP_ABS NP_ADD NP_COS NP_DOT_PRODUCT NP_EXP NP_LOG NP_LOG10 NP_POWER NP_SIGN NP_SIN NP_SQRT NP_SUBTRACT NP_SUM NUMBER OR PLUS POWER PRINT RANGE RETURN RPAREN SET_UP SET_UP_HOST SPACE STRING TIMES TRUE VARIABLE WHILEstatement : statement AND statementstatement : NUMBER OR NUMBER \\n                     | NUMBER OR statement\\n                     | statement OR NUMBER\\n                     | statement OR statementstatement : NOT statementstatement : statement POWER statementstatement : VARIABLE INCREMENTstatement : VARIABLE DECREMENTstatement : PRINT LPAREN STRING RPAREN \\n                     | PRINT LPAREN NUMBER RPAREN\\n                     | PRINT LPAREN statement RPARENstatement : NUMBER PLUS NUMBER \\n                     | statement PLUS NUMBER\\n                     | NUMBER PLUS statement\\n                     | statement PLUS statementstatement : NUMBER MINUS NUMBER \\n                     | statement MINUS NUMBER\\n                     | NUMBER MINUS statement\\n                     | statement MINUS statementstatement : NUMBER TIMES NUMBER \\n                     | statement TIMES NUMBER\\n                     | NUMBER TIMES statement\\n                     | statement TIMES statementstatement : NUMBER DIVIDE NUMBER\\n                     | statement DIVIDE NUMBER\\n                     | NUMBER DIVIDE statement\\n                     | statement DIVIDE statementstatement : LPAREN statement RPARENstatement : statement DOUBLE_EQUALS statement\\n                     | NUMBER DOUBLE_EQUALS NUMBER\\n                     | STRING DOUBLE_EQUALS STRING\\n                     | statement DOUBLE_EQUALS NUMBER\\n                     | NUMBER DOUBLE_EQUALS statement\\n                     | statement DOUBLE_EQUALS STRING\\n                     | STRING DOUBLE_EQUALS statement\\n                     | STRING DOUBLE_EQUALS NUMBER\\n                     | NUMBER DOUBLE_EQUALS STRINGstatement : IF statement COLON statementstatement : VARIABLE EQUALS ARRAY LPAREN LIST RPARENstatement : VARIABLE EQUALS NP_ADD LPAREN VARIABLE COMMA VARIABLE RPARENstatement : VARIABLE EQUALS NP_SUBTRACT LPAREN VARIABLE COMMA VARIABLE RPARENstatement : VARIABLE EQUALS NP_SUM LPAREN VARIABLE RPARENstatement : VARIABLE EQUALS NP_DOT_PRODUCT LPAREN VARIABLE COMMA VARIABLE RPAREN'\n_lr_action_items = {'NUMBER':([0,3,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,27,29,71,],[2,2,2,2,2,33,2,36,38,40,42,44,46,48,50,52,54,56,65,70,2,]),'NOT':([0,3,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,27,29,71,],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'VARIABLE':([0,3,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,27,29,71,73,74,75,76,87,88,90,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,82,83,84,85,91,92,93,]),'PRINT':([0,3,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,27,29,71,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'LPAREN':([0,3,5,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,27,29,59,60,61,62,63,71,],[6,6,27,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,72,73,74,75,76,6,]),'STRING':([0,3,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,27,29,71,],[7,7,7,7,7,7,7,7,7,7,7,45,7,7,7,7,7,58,64,68,7,]),'IF':([0,3,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,27,29,71,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'$end':([1,23,24,25,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,67,68,69,70,77,78,79,80,86,89,94,95,96,],[0,-6,-8,-9,-1,-5,-4,-7,-16,-14,-20,-18,-24,-22,-28,-26,-30,-33,-35,-2,-3,-13,-15,-17,-19,-21,-23,-25,-27,-31,-34,-38,-29,-32,-36,-37,-10,-11,-12,-39,-40,-43,-41,-42,-44,]),'AND':([1,23,24,25,28,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,66,67,68,69,70,77,78,79,80,86,89,94,95,96,],[9,9,-8,-9,9,9,9,9,-4,9,9,-14,9,-18,9,-22,9,-26,9,-33,-35,-2,9,-13,9,-17,9,-21,9,-25,9,-31,9,-38,9,-29,-32,9,-37,-10,-11,-12,9,-40,-43,-41,-42,-44,]),'OR':([1,2,23,24,25,28,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,65,66,67,68,69,70,77,78,79,80,86,89,94,95,96,],[10,17,10,-8,-9,10,10,10,10,17,10,10,17,10,17,10,17,10,17,10,17,-35,17,10,17,10,17,10,17,10,17,10,17,10,-38,17,10,-29,-32,10,17,-10,-11,-12,10,-40,-43,-41,-42,-44,]),'POWER':([1,23,24,25,28,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,66,67,68,69,70,77,78,79,80,86,89,94,95,96,],[11,11,-8,-9,11,11,11,11,-4,11,11,-14,11,-18,11,-22,11,-26,11,-33,-35,-2,11,-13,11,-17,11,-21,11,-25,11,-31,11,-38,11,-29,-32,11,-37,-10,-11,-12,11,-40,-43,-41,-42,-44,]),'PLUS':([1,2,23,24,25,28,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,65,66,67,68,69,70,77,78,79,80,86,89,94,95,96,],[12,18,12,-8,-9,12,12,12,12,18,12,12,18,12,18,12,18,12,18,12,18,-35,18,12,18,12,18,12,18,12,18,12,18,12,-38,18,12,-29,-32,12,18,-10,-11,-12,12,-40,-43,-41,-42,-44,]),'MINUS':([1,2,23,24,25,28,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,65,66,67,68,69,70,77,78,79,80,86,89,94,95,96,],[13,19,13,-8,-9,13,13,13,13,19,13,13,19,13,19,13,19,13,19,13,19,-35,19,13,19,13,19,13,19,13,19,13,19,13,-38,19,13,-29,-32,13,19,-10,-11,-12,13,-40,-43,-41,-42,-44,]),'TIMES':([1,2,23,24,25,28,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,65,66,67,68,69,70,77,78,79,80,86,89,94,95,96,],[14,20,14,-8,-9,14,14,14,14,20,14,14,20,14,20,14,20,14,20,14,20,-35,20,14,20,14,20,14,20,14,20,14,20,14,-38,20,14,-29,-32,14,20,-10,-11,-12,14,-40,-43,-41,-42,-44,]),'DIVIDE':([1,2,23,24,25,28,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,65,66,67,68,69,70,77,78,79,80,86,89,94,95,96,],[15,21,15,-8,-9,15,15,15,15,21,15,15,21,15,21,15,21,15,21,15,21,-35,21,15,21,15,21,15,21,15,21,15,21,15,-38,21,15,-29,-32,15,21,-10,-11,-12,15,-40,-43,-41,-42,-44,]),'DOUBLE_EQUALS':([1,2,7,23,24,25,28,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,64,65,66,67,68,69,70,77,78,79,80,86,89,94,95,96,],[16,22,29,16,-8,-9,16,16,16,16,22,16,16,22,16,22,16,22,16,22,16,22,29,22,16,22,16,22,16,22,16,22,16,22,16,29,29,22,16,-29,29,16,22,-10,-11,-12,16,-40,-43,-41,-42,-44,]),'INCREMENT':([4,],[24,]),'DECREMENT':([4,],[25,]),'EQUALS':([4,],[26,]),'RPAREN':([23,24,25,28,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,64,65,66,67,68,69,70,77,78,79,80,81,84,86,89,91,92,93,94,95,96,],[-6,-8,-9,67,-1,-5,-4,-7,-16,-14,-20,-18,-24,-22,-28,-26,-30,-33,-35,-2,-3,-13,-15,-17,-19,-21,-23,-25,-27,-31,-34,-38,77,78,79,-29,-32,-36,-37,-10,-11,-12,-39,86,89,-40,-43,94,95,96,-41,-42,-44,]),'COLON':([23,24,25,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,67,68,69,70,77,78,79,80,86,89,94,95,96,],[-6,-8,-9,71,-1,-5,-4,-7,-16,-14,-20,-18,-24,-22,-28,-26,-30,-33,-35,-2,-3,-13,-15,-17,-19,-21,-23,-25,-27,-31,-34,-38,-29,-32,-36,-37,-10,-11,-12,-39,-40,-43,-41,-42,-44,]),'ARRAY':([26,],[59,]),'NP_ADD':([26,],[60,]),'NP_SUBTRACT':([26,],[61,]),'NP_SUM':([26,],[62,]),'NP_DOT_PRODUCT':([26,],[63,]),'LIST':([72,],[81,]),'COMMA':([82,83,85,],[87,88,90,]),}\n_lr_action = {}\nfor _k, _v in _lr_action_items.items():\n   for _x,_y in zip(_v[0],_v[1]):\n      if not _x in _lr_action:  _lr_action[_x] = {}\n      _lr_action[_x][_k] = _y\ndel _lr_action_items\n_lr_goto_items = {'statement':([0,3,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,27,29,71,],[1,23,28,30,31,32,34,35,37,39,41,43,47,49,51,53,55,57,66,69,80,]),}",
        "detail": "parsetab",
        "documentation": {}
    },
    {
        "label": "_lr_signature",
        "kind": 5,
        "importPath": "parsetab",
        "description": "parsetab",
        "peekOfCode": "_lr_signature = 'AND ARRAY BREAK COLON COMMA COMMENT DECREMENT DEF DIVIDE DOUBLE_EQUALS ELIF ELSE EQUALS FALSE FOR IF IN INCREMENT LIST LPAREN MINUS NONE NOT NP_ABS NP_ADD NP_COS NP_DOT_PRODUCT NP_EXP NP_LOG NP_LOG10 NP_POWER NP_SIGN NP_SIN NP_SQRT NP_SUBTRACT NP_SUM NUMBER OR PLUS POWER PRINT RANGE RETURN RPAREN SET_UP SET_UP_HOST SPACE STRING TIMES TRUE VARIABLE WHILEstatement : statement AND statementstatement : NUMBER OR NUMBER \\n                     | NUMBER OR statement\\n                     | statement OR NUMBER\\n                     | statement OR statementstatement : NOT statementstatement : statement POWER statementstatement : VARIABLE INCREMENTstatement : VARIABLE DECREMENTstatement : PRINT LPAREN STRING RPAREN \\n                     | PRINT LPAREN NUMBER RPAREN\\n                     | PRINT LPAREN statement RPARENstatement : NUMBER PLUS NUMBER \\n                     | statement PLUS NUMBER\\n                     | NUMBER PLUS statement\\n                     | statement PLUS statementstatement : NUMBER MINUS NUMBER \\n                     | statement MINUS NUMBER\\n                     | NUMBER MINUS statement\\n                     | statement MINUS statementstatement : NUMBER TIMES NUMBER \\n                     | statement TIMES NUMBER\\n                     | NUMBER TIMES statement\\n                     | statement TIMES statementstatement : NUMBER DIVIDE NUMBER\\n                     | statement DIVIDE NUMBER\\n                     | NUMBER DIVIDE statement\\n                     | statement DIVIDE statementstatement : LPAREN statement RPARENstatement : statement DOUBLE_EQUALS statement\\n                     | NUMBER DOUBLE_EQUALS NUMBER\\n                     | STRING DOUBLE_EQUALS STRING\\n                     | statement DOUBLE_EQUALS NUMBER\\n                     | NUMBER DOUBLE_EQUALS statement\\n                     | statement DOUBLE_EQUALS STRING\\n                     | STRING DOUBLE_EQUALS statement\\n                     | STRING DOUBLE_EQUALS NUMBER\\n                     | NUMBER DOUBLE_EQUALS STRINGstatement : IF statement COLON statementstatement : VARIABLE EQUALS ARRAY LPAREN LIST RPARENstatement : VARIABLE EQUALS NP_ADD LPAREN VARIABLE COMMA VARIABLE RPARENstatement : VARIABLE EQUALS NP_SUBTRACT LPAREN VARIABLE COMMA VARIABLE RPARENstatement : VARIABLE EQUALS NP_SUM LPAREN VARIABLE RPARENstatement : VARIABLE EQUALS NP_DOT_PRODUCT LPAREN VARIABLE COMMA VARIABLE RPAREN'\n_lr_action_items = {'NUMBER':([0,3,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,27,29,71,],[2,2,2,2,2,33,2,36,38,40,42,44,46,48,50,52,54,56,65,70,2,]),'NOT':([0,3,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,27,29,71,],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'VARIABLE':([0,3,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,27,29,71,73,74,75,76,87,88,90,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,82,83,84,85,91,92,93,]),'PRINT':([0,3,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,27,29,71,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'LPAREN':([0,3,5,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,27,29,59,60,61,62,63,71,],[6,6,27,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,72,73,74,75,76,6,]),'STRING':([0,3,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,27,29,71,],[7,7,7,7,7,7,7,7,7,7,7,45,7,7,7,7,7,58,64,68,7,]),'IF':([0,3,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,27,29,71,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'$end':([1,23,24,25,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,67,68,69,70,77,78,79,80,86,89,94,95,96,],[0,-6,-8,-9,-1,-5,-4,-7,-16,-14,-20,-18,-24,-22,-28,-26,-30,-33,-35,-2,-3,-13,-15,-17,-19,-21,-23,-25,-27,-31,-34,-38,-29,-32,-36,-37,-10,-11,-12,-39,-40,-43,-41,-42,-44,]),'AND':([1,23,24,25,28,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,66,67,68,69,70,77,78,79,80,86,89,94,95,96,],[9,9,-8,-9,9,9,9,9,-4,9,9,-14,9,-18,9,-22,9,-26,9,-33,-35,-2,9,-13,9,-17,9,-21,9,-25,9,-31,9,-38,9,-29,-32,9,-37,-10,-11,-12,9,-40,-43,-41,-42,-44,]),'OR':([1,2,23,24,25,28,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,65,66,67,68,69,70,77,78,79,80,86,89,94,95,96,],[10,17,10,-8,-9,10,10,10,10,17,10,10,17,10,17,10,17,10,17,10,17,-35,17,10,17,10,17,10,17,10,17,10,17,10,-38,17,10,-29,-32,10,17,-10,-11,-12,10,-40,-43,-41,-42,-44,]),'POWER':([1,23,24,25,28,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,66,67,68,69,70,77,78,79,80,86,89,94,95,96,],[11,11,-8,-9,11,11,11,11,-4,11,11,-14,11,-18,11,-22,11,-26,11,-33,-35,-2,11,-13,11,-17,11,-21,11,-25,11,-31,11,-38,11,-29,-32,11,-37,-10,-11,-12,11,-40,-43,-41,-42,-44,]),'PLUS':([1,2,23,24,25,28,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,65,66,67,68,69,70,77,78,79,80,86,89,94,95,96,],[12,18,12,-8,-9,12,12,12,12,18,12,12,18,12,18,12,18,12,18,12,18,-35,18,12,18,12,18,12,18,12,18,12,18,12,-38,18,12,-29,-32,12,18,-10,-11,-12,12,-40,-43,-41,-42,-44,]),'MINUS':([1,2,23,24,25,28,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,65,66,67,68,69,70,77,78,79,80,86,89,94,95,96,],[13,19,13,-8,-9,13,13,13,13,19,13,13,19,13,19,13,19,13,19,13,19,-35,19,13,19,13,19,13,19,13,19,13,19,13,-38,19,13,-29,-32,13,19,-10,-11,-12,13,-40,-43,-41,-42,-44,]),'TIMES':([1,2,23,24,25,28,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,65,66,67,68,69,70,77,78,79,80,86,89,94,95,96,],[14,20,14,-8,-9,14,14,14,14,20,14,14,20,14,20,14,20,14,20,14,20,-35,20,14,20,14,20,14,20,14,20,14,20,14,-38,20,14,-29,-32,14,20,-10,-11,-12,14,-40,-43,-41,-42,-44,]),'DIVIDE':([1,2,23,24,25,28,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,65,66,67,68,69,70,77,78,79,80,86,89,94,95,96,],[15,21,15,-8,-9,15,15,15,15,21,15,15,21,15,21,15,21,15,21,15,21,-35,21,15,21,15,21,15,21,15,21,15,21,15,-38,21,15,-29,-32,15,21,-10,-11,-12,15,-40,-43,-41,-42,-44,]),'DOUBLE_EQUALS':([1,2,7,23,24,25,28,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,64,65,66,67,68,69,70,77,78,79,80,86,89,94,95,96,],[16,22,29,16,-8,-9,16,16,16,16,22,16,16,22,16,22,16,22,16,22,16,22,29,22,16,22,16,22,16,22,16,22,16,22,16,29,29,22,16,-29,29,16,22,-10,-11,-12,16,-40,-43,-41,-42,-44,]),'INCREMENT':([4,],[24,]),'DECREMENT':([4,],[25,]),'EQUALS':([4,],[26,]),'RPAREN':([23,24,25,28,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,64,65,66,67,68,69,70,77,78,79,80,81,84,86,89,91,92,93,94,95,96,],[-6,-8,-9,67,-1,-5,-4,-7,-16,-14,-20,-18,-24,-22,-28,-26,-30,-33,-35,-2,-3,-13,-15,-17,-19,-21,-23,-25,-27,-31,-34,-38,77,78,79,-29,-32,-36,-37,-10,-11,-12,-39,86,89,-40,-43,94,95,96,-41,-42,-44,]),'COLON':([23,24,25,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,67,68,69,70,77,78,79,80,86,89,94,95,96,],[-6,-8,-9,71,-1,-5,-4,-7,-16,-14,-20,-18,-24,-22,-28,-26,-30,-33,-35,-2,-3,-13,-15,-17,-19,-21,-23,-25,-27,-31,-34,-38,-29,-32,-36,-37,-10,-11,-12,-39,-40,-43,-41,-42,-44,]),'ARRAY':([26,],[59,]),'NP_ADD':([26,],[60,]),'NP_SUBTRACT':([26,],[61,]),'NP_SUM':([26,],[62,]),'NP_DOT_PRODUCT':([26,],[63,]),'LIST':([72,],[81,]),'COMMA':([82,83,85,],[87,88,90,]),}\n_lr_action = {}\nfor _k, _v in _lr_action_items.items():\n   for _x,_y in zip(_v[0],_v[1]):\n      if not _x in _lr_action:  _lr_action[_x] = {}\n      _lr_action[_x][_k] = _y\ndel _lr_action_items\n_lr_goto_items = {'statement':([0,3,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,27,29,71,],[1,23,28,30,31,32,34,35,37,39,41,43,47,49,51,53,55,57,66,69,80,]),}\n_lr_goto = {}",
        "detail": "parsetab",
        "documentation": {}
    },
    {
        "label": "_lr_action_items",
        "kind": 5,
        "importPath": "parsetab",
        "description": "parsetab",
        "peekOfCode": "_lr_action_items = {'NUMBER':([0,3,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,27,29,71,],[2,2,2,2,2,33,2,36,38,40,42,44,46,48,50,52,54,56,65,70,2,]),'NOT':([0,3,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,27,29,71,],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'VARIABLE':([0,3,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,27,29,71,73,74,75,76,87,88,90,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,82,83,84,85,91,92,93,]),'PRINT':([0,3,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,27,29,71,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'LPAREN':([0,3,5,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,27,29,59,60,61,62,63,71,],[6,6,27,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,72,73,74,75,76,6,]),'STRING':([0,3,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,27,29,71,],[7,7,7,7,7,7,7,7,7,7,7,45,7,7,7,7,7,58,64,68,7,]),'IF':([0,3,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,27,29,71,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'$end':([1,23,24,25,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,67,68,69,70,77,78,79,80,86,89,94,95,96,],[0,-6,-8,-9,-1,-5,-4,-7,-16,-14,-20,-18,-24,-22,-28,-26,-30,-33,-35,-2,-3,-13,-15,-17,-19,-21,-23,-25,-27,-31,-34,-38,-29,-32,-36,-37,-10,-11,-12,-39,-40,-43,-41,-42,-44,]),'AND':([1,23,24,25,28,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,66,67,68,69,70,77,78,79,80,86,89,94,95,96,],[9,9,-8,-9,9,9,9,9,-4,9,9,-14,9,-18,9,-22,9,-26,9,-33,-35,-2,9,-13,9,-17,9,-21,9,-25,9,-31,9,-38,9,-29,-32,9,-37,-10,-11,-12,9,-40,-43,-41,-42,-44,]),'OR':([1,2,23,24,25,28,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,65,66,67,68,69,70,77,78,79,80,86,89,94,95,96,],[10,17,10,-8,-9,10,10,10,10,17,10,10,17,10,17,10,17,10,17,10,17,-35,17,10,17,10,17,10,17,10,17,10,17,10,-38,17,10,-29,-32,10,17,-10,-11,-12,10,-40,-43,-41,-42,-44,]),'POWER':([1,23,24,25,28,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,66,67,68,69,70,77,78,79,80,86,89,94,95,96,],[11,11,-8,-9,11,11,11,11,-4,11,11,-14,11,-18,11,-22,11,-26,11,-33,-35,-2,11,-13,11,-17,11,-21,11,-25,11,-31,11,-38,11,-29,-32,11,-37,-10,-11,-12,11,-40,-43,-41,-42,-44,]),'PLUS':([1,2,23,24,25,28,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,65,66,67,68,69,70,77,78,79,80,86,89,94,95,96,],[12,18,12,-8,-9,12,12,12,12,18,12,12,18,12,18,12,18,12,18,12,18,-35,18,12,18,12,18,12,18,12,18,12,18,12,-38,18,12,-29,-32,12,18,-10,-11,-12,12,-40,-43,-41,-42,-44,]),'MINUS':([1,2,23,24,25,28,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,65,66,67,68,69,70,77,78,79,80,86,89,94,95,96,],[13,19,13,-8,-9,13,13,13,13,19,13,13,19,13,19,13,19,13,19,13,19,-35,19,13,19,13,19,13,19,13,19,13,19,13,-38,19,13,-29,-32,13,19,-10,-11,-12,13,-40,-43,-41,-42,-44,]),'TIMES':([1,2,23,24,25,28,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,65,66,67,68,69,70,77,78,79,80,86,89,94,95,96,],[14,20,14,-8,-9,14,14,14,14,20,14,14,20,14,20,14,20,14,20,14,20,-35,20,14,20,14,20,14,20,14,20,14,20,14,-38,20,14,-29,-32,14,20,-10,-11,-12,14,-40,-43,-41,-42,-44,]),'DIVIDE':([1,2,23,24,25,28,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,65,66,67,68,69,70,77,78,79,80,86,89,94,95,96,],[15,21,15,-8,-9,15,15,15,15,21,15,15,21,15,21,15,21,15,21,15,21,-35,21,15,21,15,21,15,21,15,21,15,21,15,-38,21,15,-29,-32,15,21,-10,-11,-12,15,-40,-43,-41,-42,-44,]),'DOUBLE_EQUALS':([1,2,7,23,24,25,28,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,64,65,66,67,68,69,70,77,78,79,80,86,89,94,95,96,],[16,22,29,16,-8,-9,16,16,16,16,22,16,16,22,16,22,16,22,16,22,16,22,29,22,16,22,16,22,16,22,16,22,16,22,16,29,29,22,16,-29,29,16,22,-10,-11,-12,16,-40,-43,-41,-42,-44,]),'INCREMENT':([4,],[24,]),'DECREMENT':([4,],[25,]),'EQUALS':([4,],[26,]),'RPAREN':([23,24,25,28,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,64,65,66,67,68,69,70,77,78,79,80,81,84,86,89,91,92,93,94,95,96,],[-6,-8,-9,67,-1,-5,-4,-7,-16,-14,-20,-18,-24,-22,-28,-26,-30,-33,-35,-2,-3,-13,-15,-17,-19,-21,-23,-25,-27,-31,-34,-38,77,78,79,-29,-32,-36,-37,-10,-11,-12,-39,86,89,-40,-43,94,95,96,-41,-42,-44,]),'COLON':([23,24,25,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,67,68,69,70,77,78,79,80,86,89,94,95,96,],[-6,-8,-9,71,-1,-5,-4,-7,-16,-14,-20,-18,-24,-22,-28,-26,-30,-33,-35,-2,-3,-13,-15,-17,-19,-21,-23,-25,-27,-31,-34,-38,-29,-32,-36,-37,-10,-11,-12,-39,-40,-43,-41,-42,-44,]),'ARRAY':([26,],[59,]),'NP_ADD':([26,],[60,]),'NP_SUBTRACT':([26,],[61,]),'NP_SUM':([26,],[62,]),'NP_DOT_PRODUCT':([26,],[63,]),'LIST':([72,],[81,]),'COMMA':([82,83,85,],[87,88,90,]),}\n_lr_action = {}\nfor _k, _v in _lr_action_items.items():\n   for _x,_y in zip(_v[0],_v[1]):\n      if not _x in _lr_action:  _lr_action[_x] = {}\n      _lr_action[_x][_k] = _y\ndel _lr_action_items\n_lr_goto_items = {'statement':([0,3,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,27,29,71,],[1,23,28,30,31,32,34,35,37,39,41,43,47,49,51,53,55,57,66,69,80,]),}\n_lr_goto = {}\nfor _k, _v in _lr_goto_items.items():",
        "detail": "parsetab",
        "documentation": {}
    },
    {
        "label": "_lr_action",
        "kind": 5,
        "importPath": "parsetab",
        "description": "parsetab",
        "peekOfCode": "_lr_action = {}\nfor _k, _v in _lr_action_items.items():\n   for _x,_y in zip(_v[0],_v[1]):\n      if not _x in _lr_action:  _lr_action[_x] = {}\n      _lr_action[_x][_k] = _y\ndel _lr_action_items\n_lr_goto_items = {'statement':([0,3,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,27,29,71,],[1,23,28,30,31,32,34,35,37,39,41,43,47,49,51,53,55,57,66,69,80,]),}\n_lr_goto = {}\nfor _k, _v in _lr_goto_items.items():\n   for _x, _y in zip(_v[0], _v[1]):",
        "detail": "parsetab",
        "documentation": {}
    },
    {
        "label": "_lr_goto_items",
        "kind": 5,
        "importPath": "parsetab",
        "description": "parsetab",
        "peekOfCode": "_lr_goto_items = {'statement':([0,3,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,27,29,71,],[1,23,28,30,31,32,34,35,37,39,41,43,47,49,51,53,55,57,66,69,80,]),}\n_lr_goto = {}\nfor _k, _v in _lr_goto_items.items():\n   for _x, _y in zip(_v[0], _v[1]):\n       if not _x in _lr_goto: _lr_goto[_x] = {}\n       _lr_goto[_x][_k] = _y\ndel _lr_goto_items\n_lr_productions = [\n  (\"S' -> statement\",\"S'\",1,None,None,None),\n  ('statement -> statement AND statement','statement',3,'p_expression_and','parsing_yacc.py',19),",
        "detail": "parsetab",
        "documentation": {}
    },
    {
        "label": "_lr_goto",
        "kind": 5,
        "importPath": "parsetab",
        "description": "parsetab",
        "peekOfCode": "_lr_goto = {}\nfor _k, _v in _lr_goto_items.items():\n   for _x, _y in zip(_v[0], _v[1]):\n       if not _x in _lr_goto: _lr_goto[_x] = {}\n       _lr_goto[_x][_k] = _y\ndel _lr_goto_items\n_lr_productions = [\n  (\"S' -> statement\",\"S'\",1,None,None,None),\n  ('statement -> statement AND statement','statement',3,'p_expression_and','parsing_yacc.py',19),\n  ('statement -> NUMBER OR NUMBER','statement',3,'p_expression_or','parsing_yacc.py',28),",
        "detail": "parsetab",
        "documentation": {}
    },
    {
        "label": "_lr_productions",
        "kind": 5,
        "importPath": "parsetab",
        "description": "parsetab",
        "peekOfCode": "_lr_productions = [\n  (\"S' -> statement\",\"S'\",1,None,None,None),\n  ('statement -> statement AND statement','statement',3,'p_expression_and','parsing_yacc.py',19),\n  ('statement -> NUMBER OR NUMBER','statement',3,'p_expression_or','parsing_yacc.py',28),\n  ('statement -> NUMBER OR statement','statement',3,'p_expression_or','parsing_yacc.py',29),\n  ('statement -> statement OR NUMBER','statement',3,'p_expression_or','parsing_yacc.py',30),\n  ('statement -> statement OR statement','statement',3,'p_expression_or','parsing_yacc.py',31),\n  ('statement -> NOT statement','statement',2,'p_expression_not','parsing_yacc.py',41),\n  ('statement -> statement POWER statement','statement',3,'p_expression_exponentiation','parsing_yacc.py',51),\n  ('statement -> VARIABLE INCREMENT','statement',2,'p_expression_increment','parsing_yacc.py',61),",
        "detail": "parsetab",
        "documentation": {}
    },
    {
        "label": "get_var_name",
        "kind": 2,
        "importPath": "pythonTopython2",
        "description": "pythonTopython2",
        "peekOfCode": "def get_var_name(var):\n    for name, value in globals().items():\n        if value is var:\n            return name\ndef numpy_add_to_py(a, b):\n    a_name = get_var_name(a)\n    b_name = get_var_name(b)\n    return f\"cupy.add({a_name}, {b_name})\"\ndef numpy_subtract_to_py(a, b):\n    a_name = get_var_name(a)",
        "detail": "pythonTopython2",
        "documentation": {}
    },
    {
        "label": "numpy_add_to_py",
        "kind": 2,
        "importPath": "pythonTopython2",
        "description": "pythonTopython2",
        "peekOfCode": "def numpy_add_to_py(a, b):\n    a_name = get_var_name(a)\n    b_name = get_var_name(b)\n    return f\"cupy.add({a_name}, {b_name})\"\ndef numpy_subtract_to_py(a, b):\n    a_name = get_var_name(a)\n    b_name = get_var_name(b)\n    return f\"cupy.subtract({a_name}, {b_name})\"\ndef numpy_sum_to_py(a):\n    a_name = get_var_name(a)",
        "detail": "pythonTopython2",
        "documentation": {}
    },
    {
        "label": "numpy_subtract_to_py",
        "kind": 2,
        "importPath": "pythonTopython2",
        "description": "pythonTopython2",
        "peekOfCode": "def numpy_subtract_to_py(a, b):\n    a_name = get_var_name(a)\n    b_name = get_var_name(b)\n    return f\"cupy.subtract({a_name}, {b_name})\"\ndef numpy_sum_to_py(a):\n    a_name = get_var_name(a)\n    return f\"cupy.sum({a_name})\"\ndef numpy_dot_to_py(a, b):\n    a_name = get_var_name(a)\n    b_name = get_var_name(b)",
        "detail": "pythonTopython2",
        "documentation": {}
    },
    {
        "label": "numpy_sum_to_py",
        "kind": 2,
        "importPath": "pythonTopython2",
        "description": "pythonTopython2",
        "peekOfCode": "def numpy_sum_to_py(a):\n    a_name = get_var_name(a)\n    return f\"cupy.sum({a_name})\"\ndef numpy_dot_to_py(a, b):\n    a_name = get_var_name(a)\n    b_name = get_var_name(b)\n    return f\"cupy.dot({a_name}, {b_name})\"",
        "detail": "pythonTopython2",
        "documentation": {}
    },
    {
        "label": "numpy_dot_to_py",
        "kind": 2,
        "importPath": "pythonTopython2",
        "description": "pythonTopython2",
        "peekOfCode": "def numpy_dot_to_py(a, b):\n    a_name = get_var_name(a)\n    b_name = get_var_name(b)\n    return f\"cupy.dot({a_name}, {b_name})\"",
        "detail": "pythonTopython2",
        "documentation": {}
    }
]