[
    {
        "label": "ply.lex",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ply.lex",
        "description": "ply.lex",
        "detail": "ply.lex",
        "documentation": {}
    },
    {
        "label": "yacc",
        "importPath": "ply",
        "description": "ply",
        "isExtraImport": true,
        "detail": "ply",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "main",
        "importPath": "parsing_lex",
        "description": "parsing_lex",
        "isExtraImport": true,
        "detail": "parsing_lex",
        "documentation": {}
    },
    {
        "label": "MyLexer",
        "importPath": "parsing_lex",
        "description": "parsing_lex",
        "isExtraImport": true,
        "detail": "parsing_lex",
        "documentation": {}
    },
    {
        "label": "MyLexer",
        "kind": 6,
        "importPath": "parsing_lex",
        "description": "parsing_lex",
        "peekOfCode": "class MyLexer(object):\n    # This is the class that will build the Lexer \n    # Let's have our Lexer handle reserved keywords \n    reserved = {\n        'if': 'IF',\n        'else': 'ELSE',\n        'elif': 'ELIF',\n        'while': 'WHILE',\n        'for': 'FOR',\n        'in': 'IN',",
        "detail": "parsing_lex",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "parsing_lex",
        "description": "parsing_lex",
        "peekOfCode": "def main(input):\n    # Call your parsing function(s) here\n    # Let input be a string that contains the code to be parsed \n    m = MyLexer() \n    m.build() \n    m.test(input)\nif __name__ == \"__main__\":\n    main()",
        "detail": "parsing_lex",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "pythonTopython",
        "description": "pythonTopython",
        "peekOfCode": "def main():\n    # Your main code logic goes here\n    pass\nif __name__ == \"__main__\":\n    main()",
        "detail": "pythonTopython",
        "documentation": {}
    },
    {
        "label": "set_u",
        "kind": 2,
        "importPath": "pythonToC",
        "description": "pythonToC",
        "peekOfCode": "def set_up (args, file_name):\n    file = open(file_name + \".c\", \"a\")\n    file.write(\"#include <stdio.h>\\n\")\n    file.write(\"#include <cuda_runtime.h>\\n\\n\")\n    file.write(\"__global__ void \" + file_name + \"(int [][] args) {\\n\")\n    # parse through the function\n    file.write(\"}\\n\\n__host__\\n\")\n    file.write(\"int main() {\\n\")\n    file.write(\"const int THREADS_PER_BLOCK = 256, BLOCKS = 3;\\n\\n\")\n    # convert args to c",
        "detail": "pythonToC",
        "documentation": {}
    },
    {
        "label": "args_to_c",
        "kind": 2,
        "importPath": "pythonToC",
        "description": "pythonToC",
        "peekOfCode": "def args_to_c():\n    #convert python args to c\n    #numpy\ndef main():\n    pass\nif __name__ == \"__main__\":\n    main()\n#helper functions\n__device__ void addArraysHelper(float *array1, float *array2, float *result) {\n    int N = blockDim.x * gridDim.x;",
        "detail": "pythonToC",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "pythonToC",
        "description": "pythonToC",
        "peekOfCode": "def main():\n    pass\nif __name__ == \"__main__\":\n    main()\n#helper functions\n__device__ void addArraysHelper(float *array1, float *array2, float *result) {\n    int N = blockDim.x * gridDim.x;\n    for (int i = threadIdx.x + blockIdx.x * blockDim.x; i < N; i += blockDim.x * gridDim.x) {\n        result[i] = array1[i] + array2[i];\n    }",
        "detail": "pythonToC",
        "documentation": {}
    },
    {
        "label": "MyParser",
        "kind": 6,
        "importPath": "parsing_yacc",
        "description": "parsing_yacc",
        "peekOfCode": "class MyParser(object): \n    # Define the tokens that the parser will recognize \n    tokens = MyLexer.tokens\n    # Handle print statements \n    def p_print_statement(self, p):\n        '''statement : PRINT LPAREN STRING RPAREN'''\n        # Based on the mode, we either want to call the C or Python print function \n        if self.mode == 'C':\n            # for now let's put a placeholder\n            print(\"C print\")",
        "detail": "parsing_yacc",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "parsing_yacc",
        "description": "parsing_yacc",
        "peekOfCode": "def main(input, mode):\n    # Create a parser object\n    parser = MyParser(mode)\n    # Parse the input\n    parser.parse(input)\nif __name__ == '__main__':\n    main()",
        "detail": "parsing_yacc",
        "documentation": {}
    },
    {
        "label": "_tabversion",
        "kind": 5,
        "importPath": "parsetab",
        "description": "parsetab",
        "peekOfCode": "_tabversion = '3.10'\n_lr_method = 'LALR'\n_lr_signature = 'COLON COMMENT DEF DIVIDE DOUBLE_EQUALS ELIF ELSE EQUALS FALSE FOR IF IN LPAREN MINUS NONE NUMBER PLUS PRINT RANGE RETURN RPAREN STRING TIMES TRUE WHILEstatement : PRINT LPAREN STRING RPAREN'\n_lr_action_items = {'PRINT':([0,],[2,]),'$end':([1,5,],[0,-1,]),'LPAREN':([2,],[3,]),'STRING':([3,],[4,]),'RPAREN':([4,],[5,]),}\n_lr_action = {}\nfor _k, _v in _lr_action_items.items():\n   for _x,_y in zip(_v[0],_v[1]):\n      if not _x in _lr_action:  _lr_action[_x] = {}\n      _lr_action[_x][_k] = _y\ndel _lr_action_items",
        "detail": "parsetab",
        "documentation": {}
    },
    {
        "label": "_lr_method",
        "kind": 5,
        "importPath": "parsetab",
        "description": "parsetab",
        "peekOfCode": "_lr_method = 'LALR'\n_lr_signature = 'COLON COMMENT DEF DIVIDE DOUBLE_EQUALS ELIF ELSE EQUALS FALSE FOR IF IN LPAREN MINUS NONE NUMBER PLUS PRINT RANGE RETURN RPAREN STRING TIMES TRUE WHILEstatement : PRINT LPAREN STRING RPAREN'\n_lr_action_items = {'PRINT':([0,],[2,]),'$end':([1,5,],[0,-1,]),'LPAREN':([2,],[3,]),'STRING':([3,],[4,]),'RPAREN':([4,],[5,]),}\n_lr_action = {}\nfor _k, _v in _lr_action_items.items():\n   for _x,_y in zip(_v[0],_v[1]):\n      if not _x in _lr_action:  _lr_action[_x] = {}\n      _lr_action[_x][_k] = _y\ndel _lr_action_items\n_lr_goto_items = {'statement':([0,],[1,]),}",
        "detail": "parsetab",
        "documentation": {}
    },
    {
        "label": "_lr_signature",
        "kind": 5,
        "importPath": "parsetab",
        "description": "parsetab",
        "peekOfCode": "_lr_signature = 'COLON COMMENT DEF DIVIDE DOUBLE_EQUALS ELIF ELSE EQUALS FALSE FOR IF IN LPAREN MINUS NONE NUMBER PLUS PRINT RANGE RETURN RPAREN STRING TIMES TRUE WHILEstatement : PRINT LPAREN STRING RPAREN'\n_lr_action_items = {'PRINT':([0,],[2,]),'$end':([1,5,],[0,-1,]),'LPAREN':([2,],[3,]),'STRING':([3,],[4,]),'RPAREN':([4,],[5,]),}\n_lr_action = {}\nfor _k, _v in _lr_action_items.items():\n   for _x,_y in zip(_v[0],_v[1]):\n      if not _x in _lr_action:  _lr_action[_x] = {}\n      _lr_action[_x][_k] = _y\ndel _lr_action_items\n_lr_goto_items = {'statement':([0,],[1,]),}\n_lr_goto = {}",
        "detail": "parsetab",
        "documentation": {}
    },
    {
        "label": "_lr_action_items",
        "kind": 5,
        "importPath": "parsetab",
        "description": "parsetab",
        "peekOfCode": "_lr_action_items = {'PRINT':([0,],[2,]),'$end':([1,5,],[0,-1,]),'LPAREN':([2,],[3,]),'STRING':([3,],[4,]),'RPAREN':([4,],[5,]),}\n_lr_action = {}\nfor _k, _v in _lr_action_items.items():\n   for _x,_y in zip(_v[0],_v[1]):\n      if not _x in _lr_action:  _lr_action[_x] = {}\n      _lr_action[_x][_k] = _y\ndel _lr_action_items\n_lr_goto_items = {'statement':([0,],[1,]),}\n_lr_goto = {}\nfor _k, _v in _lr_goto_items.items():",
        "detail": "parsetab",
        "documentation": {}
    },
    {
        "label": "_lr_action",
        "kind": 5,
        "importPath": "parsetab",
        "description": "parsetab",
        "peekOfCode": "_lr_action = {}\nfor _k, _v in _lr_action_items.items():\n   for _x,_y in zip(_v[0],_v[1]):\n      if not _x in _lr_action:  _lr_action[_x] = {}\n      _lr_action[_x][_k] = _y\ndel _lr_action_items\n_lr_goto_items = {'statement':([0,],[1,]),}\n_lr_goto = {}\nfor _k, _v in _lr_goto_items.items():\n   for _x, _y in zip(_v[0], _v[1]):",
        "detail": "parsetab",
        "documentation": {}
    },
    {
        "label": "_lr_goto_items",
        "kind": 5,
        "importPath": "parsetab",
        "description": "parsetab",
        "peekOfCode": "_lr_goto_items = {'statement':([0,],[1,]),}\n_lr_goto = {}\nfor _k, _v in _lr_goto_items.items():\n   for _x, _y in zip(_v[0], _v[1]):\n       if not _x in _lr_goto: _lr_goto[_x] = {}\n       _lr_goto[_x][_k] = _y\ndel _lr_goto_items\n_lr_productions = [\n  (\"S' -> statement\",\"S'\",1,None,None,None),\n  ('statement -> PRINT LPAREN STRING RPAREN','statement',4,'p_print_statement','parsing_yacc.py',14),",
        "detail": "parsetab",
        "documentation": {}
    },
    {
        "label": "_lr_goto",
        "kind": 5,
        "importPath": "parsetab",
        "description": "parsetab",
        "peekOfCode": "_lr_goto = {}\nfor _k, _v in _lr_goto_items.items():\n   for _x, _y in zip(_v[0], _v[1]):\n       if not _x in _lr_goto: _lr_goto[_x] = {}\n       _lr_goto[_x][_k] = _y\ndel _lr_goto_items\n_lr_productions = [\n  (\"S' -> statement\",\"S'\",1,None,None,None),\n  ('statement -> PRINT LPAREN STRING RPAREN','statement',4,'p_print_statement','parsing_yacc.py',14),\n]",
        "detail": "parsetab",
        "documentation": {}
    },
    {
        "label": "_lr_productions",
        "kind": 5,
        "importPath": "parsetab",
        "description": "parsetab",
        "peekOfCode": "_lr_productions = [\n  (\"S' -> statement\",\"S'\",1,None,None,None),\n  ('statement -> PRINT LPAREN STRING RPAREN','statement',4,'p_print_statement','parsing_yacc.py',14),\n]",
        "detail": "parsetab",
        "documentation": {}
    }
]