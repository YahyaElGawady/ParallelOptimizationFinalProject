Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COLON
    COMMENT
    DEF
    DOUBLE_EQUALS
    ELIF
    ELSE
    EQUALS
    FALSE
    FOR
    IF
    IN
    NONE
    RANGE
    RETURN
    TRUE
    WHILE

Grammar

Rule 0     S' -> statement
Rule 1     statement -> PRINT LPAREN STRING RPAREN
Rule 2     statement -> NUMBER PLUS NUMBER
Rule 3     statement -> NUMBER MINUS NUMBER
Rule 4     statement -> NUMBER TIMES NUMBER
Rule 5     statement -> NUMBER DIVIDE NUMBER
Rule 6     statement -> LPAREN statement RPAREN

Terminals, with rules where they appear

COLON                : 
COMMENT              : 
DEF                  : 
DIVIDE               : 5
DOUBLE_EQUALS        : 
ELIF                 : 
ELSE                 : 
EQUALS               : 
FALSE                : 
FOR                  : 
IF                   : 
IN                   : 
LPAREN               : 1 6
MINUS                : 3
NONE                 : 
NUMBER               : 2 2 3 3 4 4 5 5
PLUS                 : 2
PRINT                : 1
RANGE                : 
RETURN               : 
RPAREN               : 1 6
STRING               : 1
TIMES                : 4
TRUE                 : 
WHILE                : 
error                : 

Nonterminals, with rules where they appear

statement            : 6 0

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . PRINT LPAREN STRING RPAREN
    (2) statement -> . NUMBER PLUS NUMBER
    (3) statement -> . NUMBER MINUS NUMBER
    (4) statement -> . NUMBER TIMES NUMBER
    (5) statement -> . NUMBER DIVIDE NUMBER
    (6) statement -> . LPAREN statement RPAREN

    PRINT           shift and go to state 2
    NUMBER          shift and go to state 4
    LPAREN          shift and go to state 3

    statement                      shift and go to state 1

state 1

    (0) S' -> statement .



state 2

    (1) statement -> PRINT . LPAREN STRING RPAREN

    LPAREN          shift and go to state 5


state 3

    (6) statement -> LPAREN . statement RPAREN
    (1) statement -> . PRINT LPAREN STRING RPAREN
    (2) statement -> . NUMBER PLUS NUMBER
    (3) statement -> . NUMBER MINUS NUMBER
    (4) statement -> . NUMBER TIMES NUMBER
    (5) statement -> . NUMBER DIVIDE NUMBER
    (6) statement -> . LPAREN statement RPAREN

    PRINT           shift and go to state 2
    NUMBER          shift and go to state 4
    LPAREN          shift and go to state 3

    statement                      shift and go to state 6

state 4

    (2) statement -> NUMBER . PLUS NUMBER
    (3) statement -> NUMBER . MINUS NUMBER
    (4) statement -> NUMBER . TIMES NUMBER
    (5) statement -> NUMBER . DIVIDE NUMBER

    PLUS            shift and go to state 7
    MINUS           shift and go to state 8
    TIMES           shift and go to state 9
    DIVIDE          shift and go to state 10


state 5

    (1) statement -> PRINT LPAREN . STRING RPAREN

    STRING          shift and go to state 11


state 6

    (6) statement -> LPAREN statement . RPAREN

    RPAREN          shift and go to state 12


state 7

    (2) statement -> NUMBER PLUS . NUMBER

    NUMBER          shift and go to state 13


state 8

    (3) statement -> NUMBER MINUS . NUMBER

    NUMBER          shift and go to state 14


state 9

    (4) statement -> NUMBER TIMES . NUMBER

    NUMBER          shift and go to state 15


state 10

    (5) statement -> NUMBER DIVIDE . NUMBER

    NUMBER          shift and go to state 16


state 11

    (1) statement -> PRINT LPAREN STRING . RPAREN

    RPAREN          shift and go to state 17


state 12

    (6) statement -> LPAREN statement RPAREN .

    $end            reduce using rule 6 (statement -> LPAREN statement RPAREN .)
    RPAREN          reduce using rule 6 (statement -> LPAREN statement RPAREN .)


state 13

    (2) statement -> NUMBER PLUS NUMBER .

    $end            reduce using rule 2 (statement -> NUMBER PLUS NUMBER .)
    RPAREN          reduce using rule 2 (statement -> NUMBER PLUS NUMBER .)


state 14

    (3) statement -> NUMBER MINUS NUMBER .

    $end            reduce using rule 3 (statement -> NUMBER MINUS NUMBER .)
    RPAREN          reduce using rule 3 (statement -> NUMBER MINUS NUMBER .)


state 15

    (4) statement -> NUMBER TIMES NUMBER .

    $end            reduce using rule 4 (statement -> NUMBER TIMES NUMBER .)
    RPAREN          reduce using rule 4 (statement -> NUMBER TIMES NUMBER .)


state 16

    (5) statement -> NUMBER DIVIDE NUMBER .

    $end            reduce using rule 5 (statement -> NUMBER DIVIDE NUMBER .)
    RPAREN          reduce using rule 5 (statement -> NUMBER DIVIDE NUMBER .)


state 17

    (1) statement -> PRINT LPAREN STRING RPAREN .

    $end            reduce using rule 1 (statement -> PRINT LPAREN STRING RPAREN .)
    RPAREN          reduce using rule 1 (statement -> PRINT LPAREN STRING RPAREN .)

