
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'COLON COMMENT DEF DIVIDE DOUBLE_EQUALS ELIF ELSE EQUALS FALSE FOR IF IN LPAREN MINUS NONE NUMBER PLUS PRINT RANGE RETURN RPAREN STRING TIMES TRUE WHILEstatement : PRINT LPAREN STRING RPAREN \n                     | PRINT LPAREN NUMBER RPAREN\n                     | PRINT LPAREN statement RPARENstatement : NUMBER PLUS NUMBER \n                     | statement PLUS NUMBER\n                     | NUMBER PLUS statement\n                     | statement PLUS statementstatement : NUMBER MINUS NUMBER \n                     | statement MINUS NUMBER\n                     | NUMBER MINUS statement\n                     | statement MINUS statementstatement : NUMBER TIMES NUMBER \n                     | statement TIMES NUMBER\n                     | NUMBER TIMES statement\n                     | statement TIMES statementstatement : NUMBER DIVIDE NUMBER\n                     | statement DIVIDE NUMBER\n                     | NUMBER DIVIDE statement\n                     | statement DIVIDE statementstatement : LPAREN statement RPARENstatement : statement DOUBLE_EQUALS statement\n                     | NUMBER DOUBLE_EQUALS NUMBER\n                     | STRING DOUBLE_EQUALS STRING\n                     | statement DOUBLE_EQUALS NUMBER\n                     | NUMBER DOUBLE_EQUALS statement\n                     | statement DOUBLE_EQUALS STRING\n                     | STRING DOUBLE_EQUALS statement\n                     | STRING DOUBLE_EQUALS NUMBER\n                     | NUMBER DOUBLE_EQUALS STRINGstatement : IF statement COLON statement'
    
_lr_action_items = {'PRINT':([0,3,6,7,8,9,10,11,12,14,15,16,17,18,19,50,],[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,]),'NUMBER':([0,3,6,7,8,9,10,11,12,14,15,16,17,18,19,50,],[5,5,5,22,24,26,28,30,33,38,39,41,43,45,47,5,]),'LPAREN':([0,2,3,6,7,8,9,10,11,12,14,15,16,17,18,19,50,],[3,12,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'STRING':([0,3,6,7,8,9,10,11,12,14,15,16,17,18,19,50,],[4,4,4,4,4,4,4,31,32,36,4,4,4,4,49,4,]),'IF':([0,3,6,7,8,9,10,11,12,14,15,16,17,18,19,50,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'$end':([1,21,22,23,24,25,26,27,28,29,30,31,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,51,52,53,54,],[0,-7,-5,-11,-9,-15,-13,-19,-17,-21,-24,-26,-20,-23,-27,-28,-4,-6,-8,-10,-12,-14,-16,-18,-22,-25,-29,-1,-2,-3,-30,]),'PLUS':([1,5,13,20,21,22,23,24,25,26,27,28,29,30,31,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,51,52,53,54,],[7,15,7,7,7,15,7,15,7,15,7,15,7,15,-26,15,7,-20,-23,7,15,15,7,15,7,15,7,15,7,15,7,-29,-1,-2,-3,7,]),'MINUS':([1,5,13,20,21,22,23,24,25,26,27,28,29,30,31,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,51,52,53,54,],[8,16,8,8,8,16,8,16,8,16,8,16,8,16,-26,16,8,-20,-23,8,16,16,8,16,8,16,8,16,8,16,8,-29,-1,-2,-3,8,]),'TIMES':([1,5,13,20,21,22,23,24,25,26,27,28,29,30,31,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,51,52,53,54,],[9,17,9,9,9,17,9,17,9,17,9,17,9,17,-26,17,9,-20,-23,9,17,17,9,17,9,17,9,17,9,17,9,-29,-1,-2,-3,9,]),'DIVIDE':([1,5,13,20,21,22,23,24,25,26,27,28,29,30,31,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,51,52,53,54,],[10,18,10,10,10,18,10,18,10,18,10,18,10,18,-26,18,10,-20,-23,10,18,18,10,18,10,18,10,18,10,18,10,-29,-1,-2,-3,10,]),'DOUBLE_EQUALS':([1,4,5,13,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,51,52,53,54,],[11,14,19,11,11,11,19,11,19,11,19,11,19,11,19,14,14,19,11,-20,14,11,19,19,11,19,11,19,11,19,11,19,11,14,-1,-2,-3,11,]),'RPAREN':([13,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,51,52,53,54,],[35,-7,-5,-11,-9,-15,-13,-19,-17,-21,-24,-26,51,52,53,-20,-23,-27,-28,-4,-6,-8,-10,-12,-14,-16,-18,-22,-25,-29,-1,-2,-3,-30,]),'COLON':([20,21,22,23,24,25,26,27,28,29,30,31,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,51,52,53,54,],[50,-7,-5,-11,-9,-15,-13,-19,-17,-21,-24,-26,-20,-23,-27,-28,-4,-6,-8,-10,-12,-14,-16,-18,-22,-25,-29,-1,-2,-3,-30,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,3,6,7,8,9,10,11,12,14,15,16,17,18,19,50,],[1,13,20,21,23,25,27,29,34,37,40,42,44,46,48,54,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> PRINT LPAREN STRING RPAREN','statement',4,'p_print_statement','parsing_yacc.py',14),
  ('statement -> PRINT LPAREN NUMBER RPAREN','statement',4,'p_print_statement','parsing_yacc.py',15),
  ('statement -> PRINT LPAREN statement RPAREN','statement',4,'p_print_statement','parsing_yacc.py',16),
  ('statement -> NUMBER PLUS NUMBER','statement',3,'p_expression_plus','parsing_yacc.py',33),
  ('statement -> statement PLUS NUMBER','statement',3,'p_expression_plus','parsing_yacc.py',34),
  ('statement -> NUMBER PLUS statement','statement',3,'p_expression_plus','parsing_yacc.py',35),
  ('statement -> statement PLUS statement','statement',3,'p_expression_plus','parsing_yacc.py',36),
  ('statement -> NUMBER MINUS NUMBER','statement',3,'p_expression_minus','parsing_yacc.py',44),
  ('statement -> statement MINUS NUMBER','statement',3,'p_expression_minus','parsing_yacc.py',45),
  ('statement -> NUMBER MINUS statement','statement',3,'p_expression_minus','parsing_yacc.py',46),
  ('statement -> statement MINUS statement','statement',3,'p_expression_minus','parsing_yacc.py',47),
  ('statement -> NUMBER TIMES NUMBER','statement',3,'p_expression_times','parsing_yacc.py',53),
  ('statement -> statement TIMES NUMBER','statement',3,'p_expression_times','parsing_yacc.py',54),
  ('statement -> NUMBER TIMES statement','statement',3,'p_expression_times','parsing_yacc.py',55),
  ('statement -> statement TIMES statement','statement',3,'p_expression_times','parsing_yacc.py',56),
  ('statement -> NUMBER DIVIDE NUMBER','statement',3,'p_expression_divide','parsing_yacc.py',62),
  ('statement -> statement DIVIDE NUMBER','statement',3,'p_expression_divide','parsing_yacc.py',63),
  ('statement -> NUMBER DIVIDE statement','statement',3,'p_expression_divide','parsing_yacc.py',64),
  ('statement -> statement DIVIDE statement','statement',3,'p_expression_divide','parsing_yacc.py',65),
  ('statement -> LPAREN statement RPAREN','statement',3,'p_expression_parenthesis','parsing_yacc.py',71),
  ('statement -> statement DOUBLE_EQUALS statement','statement',3,'p_expression_equals','parsing_yacc.py',77),
  ('statement -> NUMBER DOUBLE_EQUALS NUMBER','statement',3,'p_expression_equals','parsing_yacc.py',78),
  ('statement -> STRING DOUBLE_EQUALS STRING','statement',3,'p_expression_equals','parsing_yacc.py',79),
  ('statement -> statement DOUBLE_EQUALS NUMBER','statement',3,'p_expression_equals','parsing_yacc.py',80),
  ('statement -> NUMBER DOUBLE_EQUALS statement','statement',3,'p_expression_equals','parsing_yacc.py',81),
  ('statement -> statement DOUBLE_EQUALS STRING','statement',3,'p_expression_equals','parsing_yacc.py',82),
  ('statement -> STRING DOUBLE_EQUALS statement','statement',3,'p_expression_equals','parsing_yacc.py',83),
  ('statement -> STRING DOUBLE_EQUALS NUMBER','statement',3,'p_expression_equals','parsing_yacc.py',84),
  ('statement -> NUMBER DOUBLE_EQUALS STRING','statement',3,'p_expression_equals','parsing_yacc.py',85),
  ('statement -> IF statement COLON statement','statement',4,'p_if_statement','parsing_yacc.py',91),
]
