
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ARRAY BREAK COLON COMMA COMMENT DECREMENT DEF DIVIDE DOUBLE_EQUALS ELIF ELSE EQUALS FALSE FOR IF IN INCREMENT LIST LPAREN MINUS NONE NOT NP_ABS NP_ADD NP_COS NP_DOT_PRODUCT NP_EXP NP_LOG NP_LOG10 NP_POWER NP_SIGN NP_SIN NP_SQRT NP_SUBTRACT NP_SUM NUMBER OR PLUS POWER PRINT RANGE RETURN RPAREN SET_UP SET_UP_HOST SPACE STRING TIMES TRUE VARIABLE WHILEstatement : NUMBER AND NUMBER \n                     | NUMBER AND statement\n                     | statement AND NUMBER\n                     | statement AND statementstatement : NUMBER OR NUMBER \n                     | NUMBER OR statement\n                     | statement OR NUMBER\n                     | statement OR statementstatement : NOT NUMBER \n                     | NOT statementstatement : statement POWER statement\n                     | NUMBER POWER NUMBERstatement : INCREMENT NUMBER \n                     | INCREMENT statement\n                     | INCREMENT VARIABLEstatement : DECREMENT NUMBER \n                     | DECREMENT statement\n                     | DECREMENT VARIABLEstatement : NP_SIN LPAREN statement RPAREN\n                     | NP_SIN LPAREN NUMBER RPARENstatement : NP_COS LPAREN statement RPAREN\n                     | NP_COS LPAREN NUMBER RPARENstatement : PRINT LPAREN STRING RPAREN \n                     | PRINT LPAREN NUMBER RPAREN\n                     | PRINT LPAREN statement RPARENstatement : NUMBER PLUS NUMBER \n                     | statement PLUS NUMBER\n                     | NUMBER PLUS statement\n                     | statement PLUS statementstatement : NUMBER MINUS NUMBER \n                     | statement MINUS NUMBER\n                     | NUMBER MINUS statement\n                     | statement MINUS statementstatement : NUMBER TIMES NUMBER \n                     | statement TIMES NUMBER\n                     | NUMBER TIMES statement\n                     | statement TIMES statementstatement : NUMBER DIVIDE NUMBER\n                     | statement DIVIDE NUMBER\n                     | NUMBER DIVIDE statement\n                     | statement DIVIDE statementstatement : LPAREN statement RPARENstatement : statement DOUBLE_EQUALS statement\n                     | NUMBER DOUBLE_EQUALS NUMBER\n                     | STRING DOUBLE_EQUALS STRING\n                     | statement DOUBLE_EQUALS NUMBER\n                     | NUMBER DOUBLE_EQUALS statement\n                     | statement DOUBLE_EQUALS STRING\n                     | STRING DOUBLE_EQUALS statement\n                     | STRING DOUBLE_EQUALS NUMBER\n                     | NUMBER DOUBLE_EQUALS STRINGstatement : IF statement COLON statementstatement : VARIABLE EQUALS ARRAY LPAREN LIST RPARENstatement : VARIABLE EQUALS NP_ADD LPAREN VARIABLE COMMA VARIABLE RPARENstatement : VARIABLE EQUALS NP_SUBTRACT LPAREN VARIABLE COMMA VARIABLE RPARENstatement : VARIABLE EQUALS NP_SUM LPAREN VARIABLE RPARENstatement : VARIABLE EQUALS NP_DOT_PRODUCT LPAREN VARIABLE COMMA VARIABLE RPARENstatement : '
    
_lr_action_items = {'NUMBER':([0,3,4,6,8,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,38,40,41,42,92,],[2,29,31,35,2,2,45,47,2,50,52,54,56,58,60,62,64,65,67,69,71,73,82,85,87,91,2,]),'NOT':([0,3,4,6,8,12,13,14,15,16,17,18,19,20,21,22,24,25,26,27,28,38,40,41,42,92,],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'INCREMENT':([0,3,4,6,8,12,13,14,15,16,17,18,19,20,21,22,24,25,26,27,28,38,40,41,42,92,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'DECREMENT':([0,3,4,6,8,12,13,14,15,16,17,18,19,20,21,22,24,25,26,27,28,38,40,41,42,92,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'NP_SIN':([0,3,4,6,8,12,13,14,15,16,17,18,19,20,21,22,24,25,26,27,28,38,40,41,42,92,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'NP_COS':([0,3,4,6,8,12,13,14,15,16,17,18,19,20,21,22,24,25,26,27,28,38,40,41,42,92,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'PRINT':([0,3,4,6,8,12,13,14,15,16,17,18,19,20,21,22,24,25,26,27,28,38,40,41,42,92,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'LPAREN':([0,3,4,6,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22,24,25,26,27,28,38,40,41,42,76,77,78,79,80,92,],[8,8,8,8,38,8,40,41,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,93,94,95,96,97,8,]),'STRING':([0,3,4,6,8,12,13,14,15,16,17,18,19,20,21,22,24,25,26,27,28,38,40,41,42,92,],[11,11,11,11,11,11,11,11,11,11,11,11,11,59,11,11,11,11,11,11,75,11,11,86,89,11,]),'IF':([0,3,4,6,8,12,13,14,15,16,17,18,19,20,21,22,24,25,26,27,28,38,40,41,42,92,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'VARIABLE':([0,3,4,6,8,12,13,14,15,16,17,18,19,20,21,22,24,25,26,27,28,38,40,41,42,92,94,95,96,97,112,113,115,],[5,5,33,37,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,107,108,109,110,116,117,118,]),'AND':([0,1,2,3,4,6,8,12,13,14,15,16,17,18,19,20,21,22,24,25,26,27,28,29,30,31,32,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,81,82,83,84,85,87,88,89,90,91,92,98,99,100,101,102,103,104,105,111,114,119,120,121,],[-58,13,21,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,21,13,21,13,-15,21,13,-18,-58,13,-58,-58,-58,13,13,21,13,21,13,13,21,13,21,13,21,13,21,13,21,-48,21,13,21,13,-12,21,13,21,13,21,13,21,13,21,13,-51,13,21,-42,13,21,21,13,-45,13,21,-58,-19,-20,-21,-22,-23,-24,-25,13,-53,-56,-54,-55,-57,]),'OR':([0,1,2,3,4,6,8,12,13,14,15,16,17,18,19,20,21,22,24,25,26,27,28,29,30,31,32,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,81,82,83,84,85,87,88,89,90,91,92,98,99,100,101,102,103,104,105,111,114,119,120,121,],[-58,14,22,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,22,14,22,14,-15,22,14,-18,-58,14,-58,-58,-58,14,14,22,14,22,14,14,22,14,22,14,22,14,22,14,22,-48,22,14,22,14,-12,22,14,22,14,22,14,22,14,22,14,-51,14,22,-42,14,22,22,14,-45,14,22,-58,-19,-20,-21,-22,-23,-24,-25,14,-53,-56,-54,-55,-57,]),'POWER':([0,1,2,3,4,6,8,12,13,14,15,16,17,18,19,20,21,22,24,25,26,27,28,29,30,31,32,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,81,82,83,84,85,87,88,89,90,91,92,98,99,100,101,102,103,104,105,111,114,119,120,121,],[-58,15,23,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,23,15,23,15,-15,23,15,-18,-58,15,-58,-58,-58,15,15,23,15,23,15,15,23,15,23,15,23,15,23,15,23,-48,23,15,23,15,-12,23,15,23,15,23,15,23,15,23,15,-51,15,23,-42,15,23,23,15,-45,15,23,-58,-19,-20,-21,-22,-23,-24,-25,15,-53,-56,-54,-55,-57,]),'PLUS':([0,1,2,3,4,6,8,12,13,14,15,16,17,18,19,20,21,22,24,25,26,27,28,29,30,31,32,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,81,82,83,84,85,87,88,89,90,91,92,98,99,100,101,102,103,104,105,111,114,119,120,121,],[-58,16,24,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,24,16,24,16,-15,24,16,-18,-58,16,-58,-58,-58,16,16,24,16,24,16,16,24,16,24,16,24,16,24,16,24,-48,24,16,24,16,-12,24,16,24,16,24,16,24,16,24,16,-51,16,24,-42,16,24,24,16,-45,16,24,-58,-19,-20,-21,-22,-23,-24,-25,16,-53,-56,-54,-55,-57,]),'MINUS':([0,1,2,3,4,6,8,12,13,14,15,16,17,18,19,20,21,22,24,25,26,27,28,29,30,31,32,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,81,82,83,84,85,87,88,89,90,91,92,98,99,100,101,102,103,104,105,111,114,119,120,121,],[-58,17,25,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,25,17,25,17,-15,25,17,-18,-58,17,-58,-58,-58,17,17,25,17,25,17,17,25,17,25,17,25,17,25,17,25,-48,25,17,25,17,-12,25,17,25,17,25,17,25,17,25,17,-51,17,25,-42,17,25,25,17,-45,17,25,-58,-19,-20,-21,-22,-23,-24,-25,17,-53,-56,-54,-55,-57,]),'TIMES':([0,1,2,3,4,6,8,12,13,14,15,16,17,18,19,20,21,22,24,25,26,27,28,29,30,31,32,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,81,82,83,84,85,87,88,89,90,91,92,98,99,100,101,102,103,104,105,111,114,119,120,121,],[-58,18,26,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,26,18,26,18,-15,26,18,-18,-58,18,-58,-58,-58,18,18,26,18,26,18,18,26,18,26,18,26,18,26,18,26,-48,26,18,26,18,-12,26,18,26,18,26,18,26,18,26,18,-51,18,26,-42,18,26,26,18,-45,18,26,-58,-19,-20,-21,-22,-23,-24,-25,18,-53,-56,-54,-55,-57,]),'DIVIDE':([0,1,2,3,4,6,8,12,13,14,15,16,17,18,19,20,21,22,24,25,26,27,28,29,30,31,32,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,81,82,83,84,85,87,88,89,90,91,92,98,99,100,101,102,103,104,105,111,114,119,120,121,],[-58,19,27,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,27,19,27,19,-15,27,19,-18,-58,19,-58,-58,-58,19,19,27,19,27,19,19,27,19,27,19,27,19,27,19,27,-48,27,19,27,19,-12,27,19,27,19,27,19,27,19,27,19,-51,19,27,-42,19,27,27,19,-45,19,27,-58,-19,-20,-21,-22,-23,-24,-25,19,-53,-56,-54,-55,-57,]),'DOUBLE_EQUALS':([0,1,2,3,4,6,8,11,12,13,14,15,16,17,18,19,20,21,22,24,25,26,27,28,29,30,31,32,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,81,82,83,84,85,86,87,88,89,90,91,92,98,99,100,101,102,103,104,105,111,114,119,120,121,],[-58,20,28,-58,-58,-58,-58,42,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,28,20,28,20,-15,28,20,-18,-58,20,-58,-58,-58,20,20,28,20,28,20,20,28,20,28,20,28,20,28,20,28,42,28,20,28,20,-12,28,20,28,20,28,20,28,20,28,20,42,20,28,-42,20,28,42,28,20,42,20,28,-58,-19,-20,-21,-22,-23,-24,-25,20,-53,-56,-54,-55,-57,]),'$end':([0,1,3,4,6,13,14,15,16,17,18,19,20,21,22,24,25,26,27,28,29,30,31,32,33,35,36,37,42,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,83,89,90,91,92,98,99,100,101,102,103,104,105,111,114,119,120,121,],[-58,0,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-9,-10,-13,-14,-15,-16,-17,-18,-58,-4,-3,-8,-7,-11,-29,-27,-33,-31,-37,-35,-41,-39,-43,-46,-48,-1,-2,-5,-6,-12,-26,-28,-30,-32,-34,-36,-38,-40,-44,-47,-51,-42,-45,-49,-50,-58,-19,-20,-21,-22,-23,-24,-25,-52,-53,-56,-54,-55,-57,]),'RPAREN':([3,4,6,8,13,14,15,16,17,18,19,20,21,22,24,25,26,27,28,29,30,31,32,33,35,36,37,38,39,40,41,42,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,81,82,83,84,85,86,87,88,89,90,91,92,98,99,100,101,102,103,104,105,106,109,111,114,116,117,118,119,120,121,],[-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-9,-10,-13,-14,-15,-16,-17,-18,-58,83,-58,-58,-58,-4,-3,-8,-7,-11,-29,-27,-33,-31,-37,-35,-41,-39,-43,-46,-48,-1,-2,-5,-6,-12,-26,-28,-30,-32,-34,-36,-38,-40,-44,-47,-51,98,99,-42,100,101,102,103,104,-45,-49,-50,-58,-19,-20,-21,-22,-23,-24,-25,-52,111,114,-53,-56,119,120,121,-54,-55,-57,]),'COLON':([3,4,6,12,13,14,15,16,17,18,19,20,21,22,24,25,26,27,28,29,30,31,32,33,35,36,37,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,83,89,90,91,92,98,99,100,101,102,103,104,105,111,114,119,120,121,],[-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-9,-10,-13,-14,-15,-16,-17,-18,-58,92,-4,-3,-8,-7,-11,-29,-27,-33,-31,-37,-35,-41,-39,-43,-46,-48,-1,-2,-5,-6,-12,-26,-28,-30,-32,-34,-36,-38,-40,-44,-47,-51,-42,-45,-49,-50,-58,-19,-20,-21,-22,-23,-24,-25,-52,-53,-56,-54,-55,-57,]),'EQUALS':([5,33,37,],[34,34,34,]),'ARRAY':([34,],[76,]),'NP_ADD':([34,],[77,]),'NP_SUBTRACT':([34,],[78,]),'NP_SUM':([34,],[79,]),'NP_DOT_PRODUCT':([34,],[80,]),'LIST':([93,],[106,]),'COMMA':([107,108,110,],[112,113,115,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,3,4,6,8,12,13,14,15,16,17,18,19,20,21,22,24,25,26,27,28,38,40,41,42,92,],[1,30,32,36,39,43,44,46,48,49,51,53,55,57,61,63,66,68,70,72,74,81,84,88,90,105,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> NUMBER AND NUMBER','statement',3,'p_expression_and','parsing_yacc.py',19),
  ('statement -> NUMBER AND statement','statement',3,'p_expression_and','parsing_yacc.py',20),
  ('statement -> statement AND NUMBER','statement',3,'p_expression_and','parsing_yacc.py',21),
  ('statement -> statement AND statement','statement',3,'p_expression_and','parsing_yacc.py',22),
  ('statement -> NUMBER OR NUMBER','statement',3,'p_expression_or','parsing_yacc.py',31),
  ('statement -> NUMBER OR statement','statement',3,'p_expression_or','parsing_yacc.py',32),
  ('statement -> statement OR NUMBER','statement',3,'p_expression_or','parsing_yacc.py',33),
  ('statement -> statement OR statement','statement',3,'p_expression_or','parsing_yacc.py',34),
  ('statement -> NOT NUMBER','statement',2,'p_expression_not','parsing_yacc.py',44),
  ('statement -> NOT statement','statement',2,'p_expression_not','parsing_yacc.py',45),
  ('statement -> statement POWER statement','statement',3,'p_expression_power','parsing_yacc.py',55),
  ('statement -> NUMBER POWER NUMBER','statement',3,'p_expression_power','parsing_yacc.py',56),
  ('statement -> INCREMENT NUMBER','statement',2,'p_expression_increment','parsing_yacc.py',66),
  ('statement -> INCREMENT statement','statement',2,'p_expression_increment','parsing_yacc.py',67),
  ('statement -> INCREMENT VARIABLE','statement',2,'p_expression_increment','parsing_yacc.py',68),
  ('statement -> DECREMENT NUMBER','statement',2,'p_expression_decrement','parsing_yacc.py',78),
  ('statement -> DECREMENT statement','statement',2,'p_expression_decrement','parsing_yacc.py',79),
  ('statement -> DECREMENT VARIABLE','statement',2,'p_expression_decrement','parsing_yacc.py',80),
  ('statement -> NP_SIN LPAREN statement RPAREN','statement',4,'p_expression_np_sin','parsing_yacc.py',88),
  ('statement -> NP_SIN LPAREN NUMBER RPAREN','statement',4,'p_expression_np_sin','parsing_yacc.py',89),
  ('statement -> NP_COS LPAREN statement RPAREN','statement',4,'p_expression_np_cos','parsing_yacc.py',98),
  ('statement -> NP_COS LPAREN NUMBER RPAREN','statement',4,'p_expression_np_cos','parsing_yacc.py',99),
  ('statement -> PRINT LPAREN STRING RPAREN','statement',4,'p_print_statement','parsing_yacc.py',109),
  ('statement -> PRINT LPAREN NUMBER RPAREN','statement',4,'p_print_statement','parsing_yacc.py',110),
  ('statement -> PRINT LPAREN statement RPAREN','statement',4,'p_print_statement','parsing_yacc.py',111),
  ('statement -> NUMBER PLUS NUMBER','statement',3,'p_expression_plus','parsing_yacc.py',128),
  ('statement -> statement PLUS NUMBER','statement',3,'p_expression_plus','parsing_yacc.py',129),
  ('statement -> NUMBER PLUS statement','statement',3,'p_expression_plus','parsing_yacc.py',130),
  ('statement -> statement PLUS statement','statement',3,'p_expression_plus','parsing_yacc.py',131),
  ('statement -> NUMBER MINUS NUMBER','statement',3,'p_expression_minus','parsing_yacc.py',139),
  ('statement -> statement MINUS NUMBER','statement',3,'p_expression_minus','parsing_yacc.py',140),
  ('statement -> NUMBER MINUS statement','statement',3,'p_expression_minus','parsing_yacc.py',141),
  ('statement -> statement MINUS statement','statement',3,'p_expression_minus','parsing_yacc.py',142),
  ('statement -> NUMBER TIMES NUMBER','statement',3,'p_expression_times','parsing_yacc.py',148),
  ('statement -> statement TIMES NUMBER','statement',3,'p_expression_times','parsing_yacc.py',149),
  ('statement -> NUMBER TIMES statement','statement',3,'p_expression_times','parsing_yacc.py',150),
  ('statement -> statement TIMES statement','statement',3,'p_expression_times','parsing_yacc.py',151),
  ('statement -> NUMBER DIVIDE NUMBER','statement',3,'p_expression_divide','parsing_yacc.py',157),
  ('statement -> statement DIVIDE NUMBER','statement',3,'p_expression_divide','parsing_yacc.py',158),
  ('statement -> NUMBER DIVIDE statement','statement',3,'p_expression_divide','parsing_yacc.py',159),
  ('statement -> statement DIVIDE statement','statement',3,'p_expression_divide','parsing_yacc.py',160),
  ('statement -> LPAREN statement RPAREN','statement',3,'p_expression_parenthesis','parsing_yacc.py',166),
  ('statement -> statement DOUBLE_EQUALS statement','statement',3,'p_expression_equals','parsing_yacc.py',172),
  ('statement -> NUMBER DOUBLE_EQUALS NUMBER','statement',3,'p_expression_equals','parsing_yacc.py',173),
  ('statement -> STRING DOUBLE_EQUALS STRING','statement',3,'p_expression_equals','parsing_yacc.py',174),
  ('statement -> statement DOUBLE_EQUALS NUMBER','statement',3,'p_expression_equals','parsing_yacc.py',175),
  ('statement -> NUMBER DOUBLE_EQUALS statement','statement',3,'p_expression_equals','parsing_yacc.py',176),
  ('statement -> statement DOUBLE_EQUALS STRING','statement',3,'p_expression_equals','parsing_yacc.py',177),
  ('statement -> STRING DOUBLE_EQUALS statement','statement',3,'p_expression_equals','parsing_yacc.py',178),
  ('statement -> STRING DOUBLE_EQUALS NUMBER','statement',3,'p_expression_equals','parsing_yacc.py',179),
  ('statement -> NUMBER DOUBLE_EQUALS STRING','statement',3,'p_expression_equals','parsing_yacc.py',180),
  ('statement -> IF statement COLON statement','statement',4,'p_if_statement','parsing_yacc.py',186),
  ('statement -> VARIABLE EQUALS ARRAY LPAREN LIST RPAREN','statement',6,'p_numpy_array','parsing_yacc.py',198),
  ('statement -> VARIABLE EQUALS NP_ADD LPAREN VARIABLE COMMA VARIABLE RPAREN','statement',8,'p_numpy_add','parsing_yacc.py',224),
  ('statement -> VARIABLE EQUALS NP_SUBTRACT LPAREN VARIABLE COMMA VARIABLE RPAREN','statement',8,'p_numpy_subtract','parsing_yacc.py',240),
  ('statement -> VARIABLE EQUALS NP_SUM LPAREN VARIABLE RPAREN','statement',6,'p_numpy_sum','parsing_yacc.py',256),
  ('statement -> VARIABLE EQUALS NP_DOT_PRODUCT LPAREN VARIABLE COMMA VARIABLE RPAREN','statement',8,'p_numpy_dot_product','parsing_yacc.py',272),
  ('statement -> <empty>','statement',0,'p_space','parsing_yacc.py',286),
]
